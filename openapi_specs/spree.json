{
  "openapi": "3.0.3",
  "servers": [
    {
      "url": "http://localhost:8081",
      "description": "localhost"
    }
  ],
  "info": {
    "version": "1.0.0",
    "title": "Authentication",
    "description": "Spree uses oAuth based Authentication via short-lived Bearer tokens. You can either create a new one or refresh existing token.",
    "contact": {
      "name": "Spark Solutions",
      "url": "https://sparksolutions.co",
      "email": "we@sparksolutions.co"
    },
    "license": {
      "url": "https://github.com/spree/spree/blob/master/license.md",
      "name": "BSD-3-Clause"
    }
  },
  "paths": {
    "/spree_oauth/token": {
      "post": {
        "description": "This endpoint creates a new Bearer Token or refreshes an existing Bearer Token.\n\nThe `token` found in the response body is required to authorize API calls.",
        "operationId": "create-or-refresh-token",
        "responses": {
          "200": {
            "description": "Token was successfully created or refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTokenBody"
              }
            }
          },
          "description": ""
        },
        "summary": "Create or Refresh a Token",
        "tags": [
          "Token"
        ]
      }
    },
    "/api/v2/platform/addresses": {
      "get": {
        "summary": "Return a list of Addresses",
        "tags": [
          "Addresses"
        ],
       
        "description": "Returns a list of Addresses",
        "operationId": "addresses-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,country,state",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[firstname_cont]",
            "in": "query",
            "description": "",
            "example": "John",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an Address",
        "tags": [
          "Addresses"
        ],
       
        "description": "Creates an Address",
        "operationId": "create-address",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,country,state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_address_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/addresses/{id}": {
      "get": {
        "summary": "Return an Address",
        "tags": [
          "Addresses"
        ],
       
        "description": "Returns an Address",
        "operationId": "show-address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,country,state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Address",
        "tags": [
          "Addresses"
        ],
       
        "description": "Updates an Address",
        "operationId": "update-address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,country,state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_address_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Address",
        "tags": [
          "Addresses"
        ],
       
        "description": "Deletes an Address",
        "operationId": "delete-address",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/adjustments": {
      "get": {
        "summary": "Return a list of Adjustments",
        "tags": [
          "Adjustments"
        ],
       
        "description": "Returns a list of Adjustments",
        "operationId": "adjustments-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,adjustable",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[order_id]",
            "in": "query",
            "description": "",
            "example": "1234",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an Adjustment",
        "tags": [
          "Adjustments"
        ],
       
        "description": "Creates an Adjustment",
        "operationId": "create-adjustment",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,adjustable",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_adjustment_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/adjustments/{id}": {
      "get": {
        "summary": "Return an Adjustment",
        "tags": [
          "Adjustments"
        ],
       
        "description": "Returns an Adjustment",
        "operationId": "show-adjustment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,adjustable",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Adjustment",
        "tags": [
          "Adjustments"
        ],
       
        "description": "Updates an Adjustment",
        "operationId": "update-adjustment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,adjustable",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_adjustment_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Adjustment",
        "tags": [
          "Adjustments"
        ],
       
        "description": "Deletes an Adjustment",
        "operationId": "delete-adjustment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/classifications": {
      "get": {
        "summary": "Return a list of Classifications",
        "tags": [
          "Classifications"
        ],
       
        "description": "Returns a list of Classifications",
        "operationId": "classifications-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,taxon",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[taxon_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Classification",
        "tags": [
          "Classifications"
        ],
       
        "description": "Creates a Classification",
        "operationId": "create-classification",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,taxon",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_classification_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/classifications/{id}": {
      "get": {
        "summary": "Return a Classification",
        "tags": [
          "Classifications"
        ],
       
        "description": "Returns a Classification",
        "operationId": "show-classification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,taxon",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Classification",
        "tags": [
          "Classifications"
        ],
       
        "description": "Updates a Classification",
        "operationId": "update-classification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,taxon",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_classification_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Classification",
        "tags": [
          "Classifications"
        ],
       
        "description": "Deletes a Classification",
        "operationId": "delete-classification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/cms_pages": {
      "get": {
        "summary": "Return a list of CMS Pages",
        "tags": [
          "CMS Pages"
        ],
       
        "description": "Returns a list of CMS Pages",
        "operationId": "cms-pages-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "cms_sections",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type_eq]",
            "in": "query",
            "description": "",
            "example": "Spree::Cms::Pages::FeaturePage",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[locale_eq]",
            "in": "query",
            "description": "",
            "example": "en",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[title_cont]",
            "in": "query",
            "description": "",
            "example": "About Us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a CMS Page",
        "tags": [
          "CMS Pages"
        ],
       
        "description": "Creates a CMS Page",
        "operationId": "create-cms-page",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "cms_sections",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_standard_cms_page_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/cms_pages/{id}": {
      "get": {
        "summary": "Return a CMS Page",
        "tags": [
          "CMS Pages"
        ],
       
        "description": "Returns a CMS Page",
        "operationId": "show-cms-page",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "cms_sections",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a CMS Page",
        "tags": [
          "CMS Pages"
        ],
       
        "description": "Updates a CMS Page",
        "operationId": "update-cms-page",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "cms_sections",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_standard_cms_page_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a CMS Page",
        "tags": [
          "CMS Pages"
        ],
       
        "description": "Deletes a CMS Page",
        "operationId": "delete-cms-page",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/cms_sections": {
      "get": {
        "summary": "Return a list of CMS Sections",
        "tags": [
          "CMS Sections"
        ],
       
        "description": "Returns a list of CMS Sections",
        "operationId": "cms-sections-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "Hero",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a CMS Section",
        "tags": [
          "CMS Sections"
        ],
       
        "description": "Creates a CMS Section",
        "operationId": "create-cms-section",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_product_carousel_cms_section_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/cms_sections/{id}": {
      "get": {
        "summary": "Return a CMS Section",
        "tags": [
          "CMS Sections"
        ],
       
        "description": "Returns a CMS Section",
        "operationId": "show-cms-section",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a CMS Section",
        "tags": [
          "CMS Sections"
        ],
       
        "description": "Updates a CMS Section",
        "operationId": "update-cms-section",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_product_carousel_cms_section_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a CMS Section",
        "tags": [
          "CMS Sections"
        ],
       
        "description": "Deletes a CMS Section",
        "operationId": "delete-cms-section",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/countries": {
      "get": {
        "summary": "Returns a list of Countries",
        "tags": [
          "Countries"
        ],
       
        "operationId": "countries-list",
        "description": "Returns a list of Countries",
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/countries/{id}": {
      "get": {
        "summary": "Returns a Country",
        "tags": [
          "Countries"
        ],
       
        "operationId": "show-country",
        "description": "Returns a Country",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/data_feeds": {
      "get": {
        "summary": "Return a list of Data Feeds",
        "tags": [
          "Data Feeds"
        ],
       
        "operationId": "data-feeds-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Data Feed",
        "tags": [
          "Data Feeds"
        ],
       
        "description": "Creates a Data Feed",
        "operationId": "create-data-feed",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_data_feed_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/data_feeds/{id}": {
      "get": {
        "summary": "Return a Data Feed",
        "tags": [
          "Data Feeds"
        ],
       
        "description": "Returns a Data Feed",
        "operationId": "show-data-feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Data Feed",
        "tags": [
          "Data Feeds"
        ],
       
        "description": "Updates a Data Feed",
        "operationId": "update-data-feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_data_feed_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Data Feed",
        "tags": [
          "Data Feeds"
        ],
       
        "description": "Deletes a Data Feed",
        "operationId": "delete-data-feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/digital_links": {
      "get": {
        "summary": "Return a list of Digital Links",
        "tags": [
          "Digital Links"
        ],
       
        "description": "Returns a list of Digital Links",
        "operationId": "digital-links-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Digital Link",
        "tags": [
          "Digital Links"
        ],
       
        "description": "Creates a Digital Link",
        "operationId": "create-digital-link",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_digital_link_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/digital_links/{id}": {
      "get": {
        "summary": "Return a Digital Link",
        "tags": [
          "Digital Links"
        ],
       
        "description": "Returns a Digital Link",
        "operationId": "show-digital-link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Digital Link",
        "tags": [
          "Digital Links"
        ],
       
        "description": "Updates a Digital Link",
        "operationId": "update-digital-link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_digital_link_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Digital Link",
        "tags": [
          "Digital Links"
        ],
       
        "description": "Deletes a Digital Link",
        "operationId": "delete-digital-link",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/digital_links/{id}/reset": {
      "patch": {
        "summary": "Reset a Digital Link",
        "tags": [
          "Digital Links"
        ],
       
        "operationId": "reset-digital-link",
        "description": "Resets a digital link, allowing further downloads.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/digitals": {
      "get": {
        "summary": "Return a list of Digital Assets",
        "tags": [
          "Digital Assets"
        ],
       
        "description": "Returns a list of Digital Assets",
        "operationId": "digitals-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Digital Asset",
        "tags": [
          "Digital Assets"
        ],
       
        "description": "Creates a Digital Asset",
        "operationId": "create-digital",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_digital_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/digitals/{id}": {
      "get": {
        "summary": "Return a Digital Asset",
        "tags": [
          "Digital Assets"
        ],
       
        "description": "Returns a Digital Asset",
        "operationId": "show-digital",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Digital Asset",
        "tags": [
          "Digital Assets"
        ],
       
        "description": "Updates a Digital Asset",
        "operationId": "update-digital",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_digital_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Digital Asset",
        "tags": [
          "Digital Assets"
        ],
       
        "description": "Deletes a Digital Asset",
        "operationId": "delete-digital",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/line_items": {
      "get": {
        "summary": "Return a list of Line Items",
        "tags": [
          "Line Items"
        ],
       
        "description": "Returns a list of Line Items",
        "operationId": "line-items-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,tax_category,variant.product,digital_links",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[order_id_eq]",
            "in": "query",
            "description": "",
            "example": "123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Line Item",
        "tags": [
          "Line Items"
        ],
       
        "description": "Creates a Line Item",
        "operationId": "create-line-item",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,tax_category,variant.product,digital_links",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_line_item_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/line_items/{id}": {
      "get": {
        "summary": "Return a Line Item",
        "tags": [
          "Line Items"
        ],
       
        "description": "Returns a Line Item",
        "operationId": "show-line-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,tax_category,variant.product,digital_links",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Line Item",
        "tags": [
          "Line Items"
        ],
       
        "description": "Updates a Line Item",
        "operationId": "update-line-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "order,tax_category,variant.product,digital_links",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_line_item_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Line Item",
        "tags": [
          "Line Items"
        ],
       
        "description": "Deletes a Line Item",
        "operationId": "delete-line-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/menu_items": {
      "get": {
        "summary": "Return a list of Menu Items",
        "tags": [
          "Menu Items"
        ],
       
        "description": "Returns a list of Menu Items",
        "operationId": "menu-items-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu,icon,parent,children,linked_resource",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "T-Shirts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Menu Item",
        "tags": [
          "Menu Items"
        ],
       
        "description": "Creates a Menu Item",
        "operationId": "create-menu-item",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu,icon,parent,children,linked_resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_menu_item_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/menu_items/{id}": {
      "get": {
        "summary": "Return a Menu Item",
        "tags": [
          "Menu Items"
        ],
       
        "description": "Returns a Menu Item",
        "operationId": "show-menu-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu,icon,parent,children,linked_resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Menu Item",
        "tags": [
          "Menu Items"
        ],
       
        "description": "Updates a Menu Item",
        "operationId": "update-menu-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu,icon,parent,children,linked_resource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_menu_item_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Menu Item",
        "tags": [
          "Menu Items"
        ],
       
        "description": "Deletes a Menu Item",
        "operationId": "delete-menu-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/menu_items/{id}/reposition": {
      "patch": {
        "summary": "Reposition a Menu Item",
        "tags": [
          "Menu Items"
        ],
       
        "operationId": "reposition-menu-item",
        "description": "Reposition a Menu Item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/menu_item_reposition"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/menus": {
      "get": {
        "summary": "Return a list of Menus",
        "tags": [
          "Menus"
        ],
       
        "description": "Returns a list of Menus",
        "operationId": "menus-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu_items",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "Main Menu",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[location_eq]",
            "in": "query",
            "description": "",
            "example": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Menu",
        "tags": [
          "Menus"
        ],
       
        "description": "Creates a Menu",
        "operationId": "create-menu",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_menu_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/menus/{id}": {
      "get": {
        "summary": "Return a Menu",
        "tags": [
          "Menus"
        ],
       
        "description": "Returns a Menu",
        "operationId": "show-menu",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Menu",
        "tags": [
          "Menus"
        ],
       
        "description": "Updates a Menu",
        "operationId": "update-menu",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "menu_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_menu_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Menu",
        "tags": [
          "Menus"
        ],
       
        "description": "Deletes a Menu",
        "operationId": "delete-menu",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/option_types": {
      "get": {
        "summary": "Return a list of Option Types",
        "tags": [
          "Option Types"
        ],
       
        "description": "Returns a list of Option Types",
        "operationId": "option-types-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[option_type_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_cont]",
            "in": "query",
            "description": "",
            "example": "Size",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an Option Type",
        "tags": [
          "Option Types"
        ],
       
        "description": "Creates an Option Type",
        "operationId": "create-option-type",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_option_type_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/option_types/{id}": {
      "get": {
        "summary": "Return an Option Type",
        "tags": [
          "Option Types"
        ],
       
        "description": "Returns an Option Type",
        "operationId": "show-option-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Option Type",
        "tags": [
          "Option Types"
        ],
       
        "description": "Updates an Option Type",
        "operationId": "update-option-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_option_type_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Option Type",
        "tags": [
          "Option Types"
        ],
       
        "description": "Deletes an Option Type",
        "operationId": "delete-option-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/option_values": {
      "get": {
        "summary": "Return a list of Option Values",
        "tags": [
          "Option Values"
        ],
       
        "description": "Returns a list of Option Values",
        "operationId": "option-values-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "option_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[option_type_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_cont]",
            "in": "query",
            "description": "",
            "example": "Red",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an Option Value",
        "tags": [
          "Option Values"
        ],
       
        "description": "Creates an Option Value",
        "operationId": "create-option-value",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "option_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_option_value_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/option_values/{id}": {
      "get": {
        "summary": "Return an Option Value",
        "tags": [
          "Option Values"
        ],
       
        "description": "Returns an Option Value",
        "operationId": "show-option-value",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "option_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Option Value",
        "tags": [
          "Option Values"
        ],
       
        "description": "Updates an Option Value",
        "operationId": "update-option-value",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "option_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_option_value_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Option Value",
        "tags": [
          "Option Values"
        ],
       
        "description": "Deletes an Option Value",
        "operationId": "delete-option-value",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders": {
      "get": {
        "summary": "Return a list of Orders",
        "tags": [
          "Orders"
        ],
       
        "description": "Returns a list of Orders",
        "operationId": "orders-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[state_eq]",
            "in": "query",
            "description": "",
            "example": "complete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Creates an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Creates an Order",
        "operationId": "create-order",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_order_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}": {
      "get": {
        "summary": "Return an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Returns an Order",
        "operationId": "show-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Updates an Order",
        "operationId": "update-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_order_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Deletes an Order",
        "operationId": "delete-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/advance": {
      "patch": {
        "summary": "Advances an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Advances an Order",
        "operationId": "advance-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/next": {
      "patch": {
        "summary": "Next an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Moves an Order to the next state",
        "operationId": "next-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/complete": {
      "patch": {
        "summary": "Completes an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Marks an Order as completed",
        "operationId": "complete-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/empty": {
      "patch": {
        "summary": "Empties an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Removes all line items, promotions, shipment and payments from an Order",
        "operationId": "empty-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/approve": {
      "patch": {
        "summary": "Approves an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Approves an Order, when using a token created for a user, it will save this user as the approver",
        "operationId": "approve-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record approved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/cancel": {
      "patch": {
        "summary": "Cancels an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Cancels an Order, when using a token created for a user, it will save this user as the canceler",
        "operationId": "cancel-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "record canceled"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "cannot be canceled"
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/use_store_credit": {
      "patch": {
        "summary": "Use Store Credit for an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Creates Store Credit payment for an Order",
        "operationId": "use-store-credit-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "store credit payment created"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "user does not have store credit available"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/amount_param"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/orders/{id}/apply_coupon_code": {
      "patch": {
        "summary": "Apply Coupon Code for an Order",
        "tags": [
          "Orders"
        ],
       
        "description": "Creates Store Credit payment for an Order",
        "operationId": "apply-coupon-code-order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "coupon code applied"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "coupon code couldn't be applied"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/coupon_code_param"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/payment_methods": {
      "get": {
        "summary": "Return a list of Payment Methods",
        "tags": [
          "Payment Methods"
        ],
       
        "description": "Returns a list of Payment Methods",
        "operationId": "payment-methods-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stores",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "",
            "example": "Stripe",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Payment Method",
        "tags": [
          "Payment Methods"
        ],
       
        "description": "Creates a Payment Method",
        "operationId": "create-payment-method",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_payment_method_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/payment_methods/{id}": {
      "get": {
        "summary": "Return a Payment Method",
        "tags": [
          "Payment Methods"
        ],
       
        "description": "Returns a Payment Method",
        "operationId": "show-payment-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Payment Method",
        "tags": [
          "Payment Methods"
        ],
       
        "description": "Updates a Payment Method",
        "operationId": "update-payment-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_payment_method_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Payment Method",
        "tags": [
          "Payment Methods"
        ],
       
        "description": "Deletes a Payment Method",
        "operationId": "delete-payment-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/payments": {
      "get": {
        "summary": "Return a list of Payments",
        "tags": [
          "Payments"
        ],
       
        "description": "Returns a list of Payments",
        "operationId": "payments-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "payment_method,order,source",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[payment_method_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[amount_gteq]",
            "in": "query",
            "description": "",
            "example": "99.90",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/payments/{id}": {
      "get": {
        "summary": "Return a Payment",
        "tags": [
          "Payments"
        ],
       
        "description": "Returns a Payment",
        "operationId": "show-payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "payment_method,order,source",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Payment",
        "tags": [
          "Payments"
        ],
       
        "description": "Deletes a Payment",
        "operationId": "delete-payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/products": {
      "get": {
        "summary": "Return a list of Products",
        "tags": [
          "Products"
        ],
       
        "description": "Returns a list of Products",
        "operationId": "products-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "prices",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "Green Toy Boat",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Product",
        "tags": [
          "Products"
        ],
       
        "description": "Creates a Product",
        "operationId": "create-product",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "prices",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_product_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/products/{id}": {
      "get": {
        "summary": "Return a Product",
        "tags": [
          "Products"
        ],
       
        "description": "Returns a Product",
        "operationId": "show-product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "prices",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Product",
        "tags": [
          "Products"
        ],
       
        "description": "Updates a Product",
        "operationId": "update-product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "prices",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_product_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Product",
        "tags": [
          "Products"
        ],
       
        "description": "Deletes a Product",
        "operationId": "delete-product",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_actions": {
      "get": {
        "summary": "Return a list of Promotion Actions",
        "tags": [
          "Promotion Actions"
        ],
       
        "description": "Returns a list of Promotion Actions",
        "operationId": "promotion-actions-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type_eq]",
            "in": "query",
            "description": "",
            "example": "Spree::Promotion::Actions::CreateAdjustment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Promotion Action",
        "tags": [
          "Promotion Actions"
        ],
       
        "description": "Creates a Promotion Action",
        "operationId": "create-promotion-action",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_promotion_action_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_actions/{id}": {
      "get": {
        "summary": "Return a Promotion Action",
        "tags": [
          "Promotion Actions"
        ],
       
        "description": "Returns a Promotion Action",
        "operationId": "show-promotion-action",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Promotion Action",
        "tags": [
          "Promotion Actions"
        ],
       
        "description": "Updates a Promotion Action",
        "operationId": "update-promotion-action",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_promotion_action_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Promotion Action",
        "tags": [
          "Promotion Actions"
        ],
       
        "description": "Deletes a Promotion Action",
        "operationId": "delete-promotion-action",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_categories": {
      "get": {
        "summary": "Return a list of Promotion Categories",
        "tags": [
          "Promotion Categories"
        ],
       
        "description": "Returns a list of Promotion Categories",
        "operationId": "promotion-categories-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[code_eq]",
            "in": "query",
            "description": "",
            "example": "BLK-FRI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "2020 Promotions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Promotion Category",
        "tags": [
          "Promotion Categories"
        ],
       
        "description": "Creates a Promotion Category",
        "operationId": "create-promotion-category",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_promotion_category_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_categories/{id}": {
      "get": {
        "summary": "Return a Promotion Category",
        "tags": [
          "Promotion Categories"
        ],
       
        "description": "Returns a Promotion Category",
        "operationId": "show-promotion-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Promotion Category",
        "tags": [
          "Promotion Categories"
        ],
       
        "description": "Updates a Promotion Category",
        "operationId": "update-promotion-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_promotion_category_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Promotion Category",
        "tags": [
          "Promotion Categories"
        ],
       
        "description": "Deletes a Promotion Category",
        "operationId": "delete-promotion-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_rules": {
      "get": {
        "summary": "Return a list of Promotion Rules",
        "tags": [
          "Promotion Rules"
        ],
       
        "description": "Returns a list of Promotion Rules",
        "operationId": "promotion-rules-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type_eq]",
            "in": "query",
            "description": "",
            "example": "Spree::Promotion::Rules::Product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Promotion Rule",
        "tags": [
          "Promotion Rules"
        ],
       
        "description": "Creates a Promotion Rule",
        "operationId": "create-promotion-rule",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_promotion_rule_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotion_rules/{id}": {
      "get": {
        "summary": "Return a Promotion Rule",
        "tags": [
          "Promotion Rules"
        ],
       
        "description": "Returns a Promotion Rule",
        "operationId": "show-promotion-rule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Promotion Rule",
        "tags": [
          "Promotion Rules"
        ],
       
        "description": "Updates a Promotion Rule",
        "operationId": "update-promotion-rule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_promotion_rule_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Promotion Rule",
        "tags": [
          "Promotion Rules"
        ],
       
        "description": "Deletes a Promotion Rule",
        "operationId": "delete-promotion-rule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotions": {
      "get": {
        "summary": "Return a list of Promotions",
        "tags": [
          "Promotions"
        ],
       
        "description": "Returns a list of Promotions",
        "operationId": "promotions-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotion_category,promotion_rules,promotion_actions,stores",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[code_eq]",
            "in": "query",
            "description": "",
            "example": "BLK-FRI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_cont]",
            "in": "query",
            "description": "",
            "example": "New Customer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Promotion",
        "tags": [
          "Promotions"
        ],
       
        "description": "Creates a Promotion",
        "operationId": "create-promotion",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotion_category,promotion_rules,promotion_actions,stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_promotion_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/promotions/{id}": {
      "get": {
        "summary": "Return a Promotion",
        "tags": [
          "Promotions"
        ],
       
        "description": "Returns a Promotion",
        "operationId": "show-promotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotion_category,promotion_rules,promotion_actions,stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Promotion",
        "tags": [
          "Promotions"
        ],
       
        "description": "Updates a Promotion",
        "operationId": "update-promotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "promotion_category,promotion_rules,promotion_actions,stores",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_promotion_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Promotion",
        "tags": [
          "Promotions"
        ],
       
        "description": "Deletes a Promotion",
        "operationId": "delete-promotion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/roles": {
      "get": {
        "summary": "Return a list of Roles",
        "tags": [
          "Roles"
        ],
       
        "description": "Returns a list of Roles",
        "operationId": "roles-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "admin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Role",
        "tags": [
          "Roles"
        ],
       
        "description": "Creates a Role",
        "operationId": "create-role",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_role_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/roles/{id}": {
      "get": {
        "summary": "Return a Role",
        "tags": [
          "Roles"
        ],
       
        "description": "Returns a Role",
        "operationId": "show-role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Role",
        "tags": [
          "Roles"
        ],
       
        "description": "Updates a Role",
        "operationId": "update-role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_role_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Role",
        "tags": [
          "Roles"
        ],
       
        "description": "Deletes a Role",
        "operationId": "delete-role",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments": {
      "get": {
        "summary": "Return a list of Shipments",
        "tags": [
          "Shipments"
        ],
       
        "description": "Returns a list of Shipments",
        "operationId": "shipments-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[state_eq]",
            "in": "query",
            "description": "",
            "example": "complete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Creates a Shipment",
        "operationId": "create-shipment",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_shipment_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}": {
      "get": {
        "summary": "Return a Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Returns a Shipment",
        "operationId": "show-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Updates a Shipment",
        "operationId": "update-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_shipment_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Deletes a Shipment",
        "operationId": "delete-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/add_item": {
      "patch": {
        "summary": "Adds item (Variant) to an existing Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "If selected Variant was already added to Order it will increase the quantity of existing Line Item, if not it will create a new Line Item",
        "operationId": "add-item-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_item_shipment_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/remove_item": {
      "patch": {
        "summary": "Removes item (Variant) from Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "If selected Variant is removed completely and Shipment doesn't include any other Line Items, Shipment itself will be deleted",
        "operationId": "remove-item-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remove_item_shipment_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/ready": {
      "patch": {
        "summary": "Mark Shipment as ready to be shipped",
        "tags": [
          "Shipments"
        ],
       
        "description": "Marks Shipment as ready to be shipped",
        "operationId": "ready-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/ship": {
      "patch": {
        "summary": "Mark Shipment as shipped",
        "tags": [
          "Shipments"
        ],
       
        "description": "Marks Shipment as shipped",
        "operationId": "ship-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/cancel": {
      "patch": {
        "summary": "Cancels the Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Cancels the Shipment",
        "operationId": "cancel-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/resume": {
      "patch": {
        "summary": "Resumes the Shipment",
        "tags": [
          "Shipments"
        ],
       
        "description": "Resumes previously canceled Shipment",
        "operationId": "resume-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipments/{id}/pend": {
      "patch": {
        "summary": "Moves Shipment back to pending state",
        "tags": [
          "Shipments"
        ],
       
        "description": "Moves Shipment back to pending state",
        "operationId": "pend-shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "line_items,variants,product",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipping_categories": {
      "get": {
        "summary": "Return a list of Shipping Categories",
        "tags": [
          "Shipping Categories"
        ],
       
        "description": "Returns a list of Shipping Categories",
        "operationId": "shipping-categories-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[name_i_cont]",
            "in": "query",
            "description": "",
            "example": "default",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Shipping Category",
        "tags": [
          "Shipping Categories"
        ],
       
        "description": "Creates a Shipping Category",
        "operationId": "create-shipping-category",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_shipping_category_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipping_categories/{id}": {
      "get": {
        "summary": "Return a Shipping Category",
        "tags": [
          "Shipping Categories"
        ],
       
        "description": "Returns a Shipping Category",
        "operationId": "show-shipping-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Shipping Category",
        "tags": [
          "Shipping Categories"
        ],
       
        "description": "Updates a Shipping Category",
        "operationId": "update-shipping-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_shipping_category_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Shipping Category",
        "tags": [
          "Shipping Categories"
        ],
       
        "description": "Deletes a Shipping Category",
        "operationId": "delete-shipping-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipping_methods": {
      "get": {
        "summary": "Return a list of Shipping Methods",
        "tags": [
          "Shipping Methods"
        ],
       
        "description": "Returns a list of Shipping Methods",
        "operationId": "shipping-methods-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator,shipping_categories,shipping_rates,tax_category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "",
            "example": "DHL Express",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[title_cont]",
            "in": "query",
            "description": "",
            "example": "About Us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Shipping Method",
        "tags": [
          "Shipping Methods"
        ],
       
        "description": "Creates a Shipping Method",
        "operationId": "create-shipping-method",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator,shipping_categories,shipping_rates,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_shipping_method_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/shipping_methods/{id}": {
      "get": {
        "summary": "Return a Shipping Method",
        "tags": [
          "Shipping Methods"
        ],
       
        "description": "Returns a Shipping Method",
        "operationId": "show-shipping-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator,shipping_categories,shipping_rates,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Shipping Method",
        "tags": [
          "Shipping Methods"
        ],
       
        "description": "Updates a Shipping Method",
        "operationId": "update-shipping-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "calculator,shipping_categories,shipping_rates,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_shipping_method_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Shipping Method",
        "tags": [
          "Shipping Methods"
        ],
       
        "description": "Deletes a Shipping Method",
        "operationId": "delete-shipping-method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/states": {
      "get": {
        "summary": "Returns a list of States",
        "tags": [
          "States"
        ],
       
        "operationId": "states-list",
        "description": "Returns a list of States",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[country_id_eq]",
            "in": "query",
            "description": "",
            "example": "4",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/states/{id}": {
      "get": {
        "summary": "Returns a State",
        "tags": [
          "States"
        ],
       
        "operationId": "show-state",
        "description": "Returns a State",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/stock_items": {
      "get": {
        "summary": "Return a list of Stock Items",
        "tags": [
          "Stock Items"
        ],
       
        "description": "Returns a list of Stock Items",
        "operationId": "stock-items-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stock_location,variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Stock Item",
        "tags": [
          "Stock Items"
        ],
       
        "description": "Creates a Stock Item",
        "operationId": "create-stock-item",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stock_location,variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_stock_item_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/stock_items/{id}": {
      "get": {
        "summary": "Return a Stock Item",
        "tags": [
          "Stock Items"
        ],
       
        "description": "Returns a Stock Item",
        "operationId": "show-stock-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stock_location,variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Stock Item",
        "tags": [
          "Stock Items"
        ],
       
        "description": "Updates a Stock Item",
        "operationId": "update-stock-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "stock_location,variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_stock_item_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Stock Item",
        "tags": [
          "Stock Items"
        ],
       
        "description": "Deletes a Stock Item",
        "operationId": "delete-stock-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/stock_locations": {
      "get": {
        "summary": "Return a list of Stock Locations",
        "tags": [
          "Stock Locations"
        ],
       
        "description": "Returns a list of Stock Locations",
        "operationId": "stock-locations-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Stock Location",
        "tags": [
          "Stock Locations"
        ],
       
        "description": "Creates a Stock Location",
        "operationId": "create-stock-location",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_stock_location_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/stock_locations/{id}": {
      "get": {
        "summary": "Return a Stock Location",
        "tags": [
          "Stock Locations"
        ],
       
        "description": "Returns a Stock Location",
        "operationId": "show-stock-location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Stock Location",
        "tags": [
          "Stock Locations"
        ],
       
        "description": "Updates a Stock Location",
        "operationId": "update-stock-location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_stock_location_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Stock Location",
        "tags": [
          "Stock Locations"
        ],
       
        "description": "Deletes a Stock Location",
        "operationId": "delete-stock-location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credit_categories": {
      "get": {
        "summary": "Return a list of Store Credit Categories",
        "tags": [
          "Store Credit Categories"
        ],
       
        "description": "Returns a list of Store Credit Categories",
        "operationId": "store-credit-categories-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "refunded",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Store Credit Category",
        "tags": [
          "Store Credit Categories"
        ],
       
        "description": "Creates a Store Credit Category",
        "operationId": "create-store-credit-category",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_store_credit_category_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credit_categories/{id}": {
      "get": {
        "summary": "Return a Store Credit Category",
        "tags": [
          "Store Credit Categories"
        ],
       
        "description": "Returns a Store Credit Category",
        "operationId": "show-store-credit-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Store Credit Category",
        "tags": [
          "Store Credit Categories"
        ],
       
        "description": "Updates a Store Credit Category",
        "operationId": "update-store-credit-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_store_credit_category_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Store Credit Category",
        "tags": [
          "Store Credit Categories"
        ],
       
        "description": "Deletes a Store Credit Category",
        "operationId": "delete-store-credit-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credit_types": {
      "get": {
        "summary": "Return a list of Store Credit Types",
        "tags": [
          "Store Credit Types"
        ],
       
        "description": "Returns a list of Store Credit Types",
        "operationId": "store-credit-types-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Store Credit Type",
        "tags": [
          "Store Credit Types"
        ],
       
        "description": "Creates a Store Credit Type",
        "operationId": "create-store-credit-type",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_store_credit_type_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credit_types/{id}": {
      "get": {
        "summary": "Return a Store Credit Type",
        "tags": [
          "Store Credit Types"
        ],
       
        "description": "Returns a Store Credit Type",
        "operationId": "show-store-credit-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Store Credit Type",
        "tags": [
          "Store Credit Types"
        ],
       
        "description": "Updates a Store Credit Type",
        "operationId": "update-store-credit-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_store_credit_type_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Store Credit Type",
        "tags": [
          "Store Credit Types"
        ],
       
        "description": "Deletes a Store Credit Type",
        "operationId": "delete-store-credit-type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credits": {
      "get": {
        "summary": "Return a list of Store Credits",
        "tags": [
          "Store Credits"
        ],
       
        "description": "Returns a list of Store Credits",
        "operationId": "store-credits-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,created_by,category,credit_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user_id_eq]",
            "in": "query",
            "description": "",
            "example": "5",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_by_id_eq]",
            "in": "query",
            "description": "",
            "example": "2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[amount_gteq]",
            "in": "query",
            "description": "",
            "example": "50.0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[currency_eq]",
            "in": "query",
            "description": "",
            "example": "USD",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Store Credit",
        "tags": [
          "Store Credits"
        ],
       
        "description": "Creates a Store Credit",
        "operationId": "create-store-credit",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,created_by,category,credit_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_store_credit_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/store_credits/{id}": {
      "get": {
        "summary": "Return a Store Credit",
        "tags": [
          "Store Credits"
        ],
       
        "description": "Returns a Store Credit",
        "operationId": "show-store-credit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,created_by,category,credit_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Store Credit",
        "tags": [
          "Store Credits"
        ],
       
        "description": "Updates a Store Credit",
        "operationId": "update-store-credit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "user,created_by,category,credit_type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_store_credit_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Store Credit",
        "tags": [
          "Store Credits"
        ],
       
        "description": "Deletes a Store Credit",
        "operationId": "delete-store-credit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/tax_categories": {
      "get": {
        "summary": "Return a list of Tax Categories",
        "tags": [
          "Tax Categories"
        ],
       
        "description": "Returns a list of Tax Categories",
        "operationId": "tax-categories-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "tax_rates",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "Clothing",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[is_default_true]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[tax_code_eq]",
            "in": "query",
            "description": "",
            "example": "1257L",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Tax Category",
        "tags": [
          "Tax Categories"
        ],
       
        "description": "Creates a Tax Category",
        "operationId": "create-tax-category",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "tax_rates",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_tax_category_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/tax_categories/{id}": {
      "get": {
        "summary": "Return a Tax Category",
        "tags": [
          "Tax Categories"
        ],
       
        "description": "Returns a Tax Category",
        "operationId": "show-tax-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "tax_rates",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Tax Category",
        "tags": [
          "Tax Categories"
        ],
       
        "description": "Updates a Tax Category",
        "operationId": "update-tax-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "tax_rates",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_tax_category_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Tax Category",
        "tags": [
          "Tax Categories"
        ],
       
        "description": "Deletes a Tax Category",
        "operationId": "delete-tax-category",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/tax_rates": {
      "get": {
        "summary": "Return a list of Tax Rates",
        "tags": [
          "Tax Rates"
        ],
       
        "description": "Returns a list of Tax Rates",
        "operationId": "tax-rates-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone,tax_category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[zone_id_eq]",
            "in": "query",
            "description": "",
            "example": "3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[amount_gt]",
            "in": "query",
            "description": "",
            "example": "0.05",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[tax_category_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Tax Rate",
        "tags": [
          "Tax Rates"
        ],
       
        "description": "Creates a Tax Rate",
        "operationId": "create-tax-rate",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_tax_rate_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/tax_rates/{id}": {
      "get": {
        "summary": "Return a Tax Rate",
        "tags": [
          "Tax Rates"
        ],
       
        "description": "Returns a Tax Rate",
        "operationId": "show-tax-rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Tax Rate",
        "tags": [
          "Tax Rates"
        ],
       
        "description": "Updates a Tax Rate",
        "operationId": "update-tax-rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone,tax_category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_tax_rate_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Tax Rate",
        "tags": [
          "Tax Rates"
        ],
       
        "description": "Deletes a Tax Rate",
        "operationId": "delete-tax-rate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/taxonomies": {
      "get": {
        "summary": "Return a list of Taxonomies",
        "tags": [
          "Taxonomies"
        ],
       
        "description": "Returns a list of Taxonomies",
        "operationId": "taxonomies-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxons,root",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "Categories",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Taxonomy",
        "tags": [
          "Taxonomies"
        ],
       
        "description": "Creates a Taxonomy",
        "operationId": "create-taxonomy",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxons,root",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_taxonomy_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/taxonomies/{id}": {
      "get": {
        "summary": "Return a Taxonomy",
        "tags": [
          "Taxonomies"
        ],
       
        "description": "Returns a Taxonomy",
        "operationId": "show-taxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxons,root",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Taxonomy",
        "tags": [
          "Taxonomies"
        ],
       
        "description": "Updates a Taxonomy",
        "operationId": "update-taxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxons,root",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_taxonomy_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Taxonomy",
        "tags": [
          "Taxonomies"
        ],
       
        "description": "Deletes a Taxonomy",
        "operationId": "delete-taxonomy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/taxons": {
      "get": {
        "summary": "Return a list of Taxons",
        "tags": [
          "Taxons"
        ],
       
        "description": "Returns a list of Taxons",
        "operationId": "taxons-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxonomy,parent,children",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[taxonomy_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_cont]",
            "in": "query",
            "description": "",
            "example": "Shirts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Taxon",
        "tags": [
          "Taxons"
        ],
       
        "description": "Creates a Taxon",
        "operationId": "create-taxon",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxonomy,parent,children",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_taxon_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/taxons/{id}": {
      "get": {
        "summary": "Return a Taxon",
        "tags": [
          "Taxons"
        ],
       
        "description": "Returns a Taxon",
        "operationId": "show-taxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxonomy,parent,children",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Taxon",
        "tags": [
          "Taxons"
        ],
       
        "description": "Updates a Taxon",
        "operationId": "update-taxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "taxonomy,parent,children",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_taxon_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Taxon",
        "tags": [
          "Taxons"
        ],
       
        "description": "Deletes a Taxon",
        "operationId": "delete-taxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/taxons/{id}/reposition": {
      "patch": {
        "summary": "Reposition a Taxon",
        "tags": [
          "Taxons"
        ],
       
        "operationId": "reposition-taxon",
        "description": "Reposition a Taxon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxon_reposition"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/users": {
      "get": {
        "summary": "Return a list of Users",
        "tags": [
          "Users"
        ],
       
        "description": "Returns a list of Users",
        "operationId": "users-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "ship_address,bill_address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email_cont]",
            "in": "query",
            "description": "",
            "example": "spree@example.com",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a User",
        "tags": [
          "Users"
        ],
       
        "description": "Creates a User",
        "operationId": "create-user",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "ship_address,bill_address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_user_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/users/{id}": {
      "get": {
        "summary": "Return a User",
        "tags": [
          "Users"
        ],
       
        "description": "Returns a User",
        "operationId": "show-user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "ship_address,bill_address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a User",
        "tags": [
          "Users"
        ],
       
        "description": "Updates a User",
        "operationId": "update-user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "ship_address,bill_address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_user_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a User",
        "tags": [
          "Users"
        ],
       
        "description": "Deletes a User",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/variants": {
      "get": {
        "summary": "Return a list of Variants",
        "tags": [
          "Variants"
        ],
       
        "description": "Returns a list of Variants",
        "operationId": "variants-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,tax_category,images,digitals",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[product_id_eq]",
            "in": "query",
            "description": "",
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sku_i_cont]",
            "in": "query",
            "description": "",
            "example": "SKU123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/variants/{id}": {
      "get": {
        "summary": "Return a Variant",
        "tags": [
          "Variants"
        ],
       
        "description": "Returns a Variant",
        "operationId": "show-variant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "product,tax_category,images,digitals",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Variant",
        "tags": [
          "Variants"
        ],
       
        "description": "Deletes a Variant",
        "operationId": "delete-variant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/webhooks/events": {
      "get": {
        "summary": "Return a list of Webhook Events",
        "tags": [
          "Webhook Events"
        ],
       
        "description": "Returns a list of Webhook Events",
        "operationId": "webhook-events-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "subscriber",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_eq]",
            "in": "query",
            "description": "",
            "example": "order.canceled",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[request_errors_cont]",
            "in": "query",
            "description": "",
            "example": "google",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[response_code_eq]",
            "in": "query",
            "description": "",
            "example": "200",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[success_eq]",
            "in": "query",
            "description": "",
            "example": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[url_cont]",
            "in": "query",
            "description": "",
            "example": "mysite",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/webhooks/subscribers": {
      "get": {
        "summary": "Return a list of Webhook Subscribers",
        "tags": [
          "Webhook Subscribers"
        ],
       
        "description": "Returns a list of Webhook Subscribers",
        "operationId": "webhook-subscribers-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[active_eq]",
            "in": "query",
            "description": "",
            "example": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[url_cont]",
            "in": "query",
            "description": "",
            "example": "mysite",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Webhook Subscriber",
        "tags": [
          "Webhook Subscribers"
        ],
       
        "description": "Creates a Webhook Subscriber",
        "operationId": "create-webhook-subscriber",
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_webhook_subscriber_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/webhooks/subscribers/{id}": {
      "get": {
        "summary": "Return a Webhook Subscriber",
        "tags": [
          "Webhook Subscribers"
        ],
       
        "description": "Returns a Webhook Subscriber",
        "operationId": "show-webhook-subscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Webhook Subscriber",
        "tags": [
          "Webhook Subscribers"
        ],
       
        "description": "Updates a Webhook Subscriber",
        "operationId": "update-webhook-subscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_webhook_subscriber_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Webhook Subscriber",
        "tags": [
          "Webhook Subscribers"
        ],
       
        "description": "Deletes a Webhook Subscriber",
        "operationId": "delete-webhook-subscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/wished_items": {
      "get": {
        "summary": "Return a list of Wished Items",
        "tags": [
          "Wished Items"
        ],
       
        "description": "Returns a list of Wished Items",
        "operationId": "wished-items-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Wished Item",
        "tags": [
          "Wished Items"
        ],
       
        "description": "Creates a Wished Item",
        "operationId": "create-wished-item",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_wished_item_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/wished_items/{id}": {
      "get": {
        "summary": "Return a Wished Item",
        "tags": [
          "Wished Items"
        ],
       
        "description": "Returns a Wished Item",
        "operationId": "show-wished-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Wished Item",
        "tags": [
          "Wished Items"
        ],
       
        "description": "Updates a Wished Item",
        "operationId": "update-wished-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "variant",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_wished_item_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Wished Item",
        "tags": [
          "Wished Items"
        ],
       
        "description": "Deletes a Wished Item",
        "operationId": "delete-wished-item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/wishlists": {
      "get": {
        "summary": "Return a list of Wishlists",
        "tags": [
          "Wishlists"
        ],
       
        "description": "Returns a list of Wishlists",
        "operationId": "wishlists-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "wished_items",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name_cont]",
            "in": "query",
            "description": "",
            "example": "Birthday",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Wishlist",
        "tags": [
          "Wishlists"
        ],
       
        "description": "Creates a Wishlist",
        "operationId": "create-wishlist",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "wished_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_wishlist_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/wishlists/{id}": {
      "get": {
        "summary": "Return a Wishlist",
        "tags": [
          "Wishlists"
        ],
       
        "description": "Returns a Wishlist",
        "operationId": "show-wishlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "wished_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Wishlist",
        "tags": [
          "Wishlists"
        ],
       
        "description": "Updates a Wishlist",
        "operationId": "update-wishlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "wished_items",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_wishlist_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Wishlist",
        "tags": [
          "Wishlists"
        ],
       
        "description": "Deletes a Wishlist",
        "operationId": "delete-wishlist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/zones": {
      "get": {
        "summary": "Return a list of Zones",
        "tags": [
          "Zones"
        ],
       
        "description": "Returns a list of Zones",
        "operationId": "zones-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "example": 50,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone_members",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description_eq]",
            "in": "query",
            "description": "",
            "example": "The zone containing all EU countries",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Records returned",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resources_list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Zone",
        "tags": [
          "Zones"
        ],
       
        "description": "Creates a Zone",
        "operationId": "create-zone",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone_members",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Record created",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_zone_params"
              }
            }
          }
        }
      }
    },
    "/api/v2/platform/zones/{id}": {
      "get": {
        "summary": "Return a Zone",
        "tags": [
          "Zones"
        ],
       
        "description": "Returns a Zone",
        "operationId": "show-zone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone_members",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Zone",
        "tags": [
          "Zones"
        ],
       
        "description": "Updates a Zone",
        "operationId": "update-zone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Select which associated resources you would like to fetch, see: <a href=\"https://jsonapi.org/format/#fetching-includes\">https://jsonapi.org/format/#fetching-includes</a>",
            "example": "zone_members",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record updated",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resource"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_errors"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_zone_params"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Zone",
        "tags": [
          "Zones"
        ],
       
        "description": "Deletes a Zone",
        "operationId": "delete-zone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Authentication Failed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/storefront/account": {
      "get": {
        "description": "Returns the current user details.",
        "summary": "Retrieve an Account",
        "tags": [
          "Account"
        ],
        "operationId": "account-information",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsUser"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/User"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
       
      },
      "post": {
        "description": "Creates a new account. This endpoint requires the [Spree Auth Devise](https://github.com/spree/spree_auth_devise) gem to be installed.",
        "summary": "Create an Account",
        "tags": [
          "Account"
        ],
        "operationId": "account-creation",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "john@snow.org"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "John"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Snow"
                      },
                      "selected_locale": {
                        "type": "string",
                        "example": "en"
                      },
                      "password": {
                        "type": "string",
                        "example": "spree123"
                      },
                      "password_confirmation": {
                        "type": "string",
                        "example": "spree123"
                      },
                      "public_metadata": {
                        "type": "object",
                        "example": {
                          "user_segment": "supplier"
                        },
                        "properties": {
                          "some_data": {
                            "type": "string"
                          }
                        },
                        "description": "The public metadata for this User"
                      },
                      "private_metadata": {
                        "type": "object",
                        "example": {
                          "has_abandoned_cart": false
                        },
                        "properties": {
                          "some_data": {
                            "type": "string"
                          }
                        },
                        "description": "The private metadata for this User"
                      }
                    }
                  }
                }
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/User"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        }
      },
      "patch": {
        "description": "Updates the users account details. This endpoint requires the [Spree Auth Devise](https://github.com/spree/spree_auth_devise) gem to be installed.",
        "summary": "Update an Account",
        "tags": [
          "Account"
        ],
        "operationId": "account-updates",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "john@snow.org"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "John"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Snow"
                      },
                      "selected_locale": {
                        "type": "string",
                        "example": "fr"
                      },
                      "bill_address_id": {
                        "type": "string",
                        "example": "1"
                      },
                      "ship_address_id": {
                        "type": "string",
                        "example": "1"
                      },
                      "password": {
                        "type": "string",
                        "example": "spree123"
                      },
                      "password_confirmation": {
                        "type": "string",
                        "example": "spree123"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/User"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        }
       
      }
    },
    "/api/v2/storefront/account/addresses": {
      "get": {
        "description": "Returns a list of addresses for the current user.",
        "summary": "List all Addresses",
        "operationId": "addresses-list-account",
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressList"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
       
        "parameters": [
          {
            "$ref": "#/components/parameters/SparseFieldsAddress"
          }
        ],
        "tags": [
          "Account / Address"
        ]
      },
      "post": {
        "description": "Creates a new address for the current user.",
        "summary": "Create an Address",
        "tags": [
          "Account / Address"
        ],
        "operationId": "create-address-platform",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Address"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
       
        "parameters": [
          {
            "$ref": "#/components/parameters/SparseFieldsAddress"
          }
        ]
      }
    },
    "/api/v2/storefront/account/addresses/{id}": {
      "delete": {
        "description": "This endpoint removes the specified address for the current user. It uses a soft delete to retain address information for pre-existing orders.",
        "operationId": "remove-address",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the specified `address`."
          }
        ],
        "responses": {
          "204": {
            "description": "204 Success No Content Returned - Requested Address has been removed from the User Account"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       
        "summary": "Remove an Address",
        "tags": [
          "Account / Address"
        ]
      },
      "patch": {
        "description": "Updates the specified address for the current user.",
        "summary": "Update an Address",
        "operationId": "update-address-storefront",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the specified `address`."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/AddressPayload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Address"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
       
        "tags": [
          "Account / Address"
        ]
      }
    },
    "/api/v2/storefront/account/credit_cards": {
      "get": {
        "description": "Returns a list of credit cards for the current user.",
        "summary": "List all Credit Cards",
        "operationId": "credit-cards-list",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreditCardList"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
       
        "parameters": [
          {
            "in": "query",
            "name": "filter[payment_method_id]",
            "schema": {
              "type": "string"
            },
            "example": "2",
            "description": "Filter based on payment method ID"
          },
          {
            "$ref": "#/components/parameters/CreditCardIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCreditCard"
          }
        ],
        "tags": [
          "Account / Credit Cards"
        ]
      }
    },
    "/api/v2/storefront/account/credit_cards/{id}": {
      "delete": {
        "description": "Removes a specified credit card for the current user with a soft delete to retain payment information for any pre-existing orders.",
        "operationId": "remove-credit-card",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the `credit_card` you wish to remove."
          }
        ],
        "responses": {
          "204": {
            "description": "204 Success No Content Returned - Requested Credit Card has been removed from the User Account"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       
        "summary": "Remove a Credit Card",
        "tags": [
          "Account / Credit Cards"
        ]
      }
    },
    "/api/v2/storefront/account/credit_cards/default": {
      "get": {
        "description": "Returns the current user's default credit card.",
        "summary": "Retrieve the default Credit Card",
        "operationId": "default-credit-card",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreditCard"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CreditCardIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCreditCard"
          }
        ],
       
        "tags": [
          "Account / Credit Cards"
        ]
      }
    },
    "/api/v2/storefront/account/orders": {
      "get": {
        "description": "Returns all completed orders placed by the current user in the current store.",
        "summary": "List all Orders",
        "operationId": "completed-orders",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CartList"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          }
        ],
       
        "tags": [
          "Account / Orders"
        ]
      }
    },
    "/api/v2/storefront/account/orders/{order_number}": {
      "get": {
        "description": "Returns a completed order for the current user within the scope of the current store.",
        "summary": "Retrieve an Order",
        "operationId": "completed-user-order",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderParam"
          },
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
       
        "tags": [
          "Account / Orders"
        ]
      }
    },
    "/api/v2/storefront/order_status/{order_number}": {
      "get": {
        "description": "Returns completed order information.\n\nThis endpoint is useful when fetching orders placed by a guest user, allowing customers without an account to check the status of their order: (shipment/payment/processing) etc.\n\nPass the cart `token` value as the `X-Spree-Order-Token` for authorization, and the corresponding cart `number` in the URI **{order_number}** to successfully retrieve an order.",
        "summary": "Retrieve an Order Status",
        "operationId": "order-status",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          },
          {
            "$ref": "#/components/parameters/OrderParam"
          },
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "order_number",
            "in": "path",
            "required": true,
            "description": "The ID of the `credit_card` you wish to remove."
          }
        ],
       
        "tags": [
          "Order Status"
        ]
      }
    },
    "/api/v2/storefront/cart": {
      "post": {
        "description": "Creates a new cart.\n\n**Please be aware**; The `token` value found in the response body is used to authorize all future operations on this cart through the Auth API Key `X-Spree-Order-Token`.",
        "tags": [
          "Cart"
        ],
        "operationId": "create-cart",
        "responses": {
          "201": {
            "$ref": "#/components/responses/Cart"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "example": {
                  "public_metadata": {
                    "total_weight": 3250
                  },
                  "private_metadata": {
                    "had_same_cart_items": true
                  }
                },
                "properties": {
                  "public_metadata": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    },
                    "description": "The public metadata for the cart."
                  },
                  "private_metadata": {
                    "type": "object",
                    "properties": {
                      "some_data": {
                        "type": "string"
                      }
                    },
                    "description": "The private metadata for the cart."
                  }
                }
              }
            }
          }
        },
        "summary": "Create a Cart"
      },
      "delete": {
        "description": "Deletes a specified cart.\n\nWhen this endpoint is successfully executed, all shipments are cancelled, payments are voided, then line items, shipments & payments are all deleted.",
        "tags": [
          "Cart"
        ],
        "operationId": "deletes-cart",
        "responses": {
          "204": {
            "description": "204 Success No Content Returned - Current Cart has been removed."
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "summary": "Delete a Cart"
      },
      "get": {
        "description": "Returns the cart for the current user.",
        "tags": [
          "Cart"
        ],
        "operationId": "get-cart",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          },
          {
            "$ref": "#/components/parameters/CartCurrencyParam"
          }
        ],
        "summary": "Retrieve a Cart"
      }
    },
    "/api/v2/storefront/cart/add_item": {
      "post": {
        "description": "Adds a variant to the current cart by creating a line item. Each line item represents a specified variant and the desired quantity.",
        "operationId": "add-item",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "example": {
                  "variant_id": "1",
                  "quantity": 5,
                  "public_metadata": {
                    "first_item_order": true
                  },
                  "private_metadata": {
                    "recommended_by_us": false
                  }
                },
                "properties": {
                  "variant_id": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  },
                  "public_metadata": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    },
                    "description": "The public metadata for the added item."
                  },
                  "private_metadata": {
                    "type": "object",
                    "properties": {
                      "some_data": {
                        "type": "string"
                      }
                    },
                    "description": "The private metadata for the added item."
                  },
                  "options": {
                    "type": "object",
                    "properties": {
                      "some_data": {
                        "type": "string"
                      }
                    },
                    "description": "Additional custom options. Activate these by adding: `Spree::PermittedAttributes.line_item_attributes << :foo` in `config/initializers/spree.rb`"
                  }
                }
              }
            }
          },
          "description": "Additional parameters can be passed in the **options** hash. Each custom parameter must be registered in `config/initializers/spree.rb`, eg.\n\n```ruby\n  Spree::PermittedAttributes.line_item_attributes << :foo\n```"
        },
        "summary": "Add an Item to Cart",
        "tags": [
          "Cart / Line Items"
        ]
      }
    },
    "/api/v2/storefront/cart/set_quantity": {
      "patch": {
        "description": "Sets the quantity of a specified line item.",
        "operationId": "set-quantity",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "line_item_id": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                },
                "example": {
                  "line_item_id": "1",
                  "quantity": 5
                }
              }
            }
          },
          "description": "The quantity has to be a positive integer greater than 0."
        },
        "summary": "Set Line Item Quantity",
        "tags": [
          "Cart / Line Items"
        ]
      }
    },
    "/api/v2/storefront/cart/remove_line_item/{id}": {
      "delete": {
        "description": "Removes a line item from the cart by deleting the line item.\n\nAfter deleting the line item, the system will re-calculate taxes, promotions, shipments etc.",
        "operationId": "remove-line-item",
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          },
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the `line_item` you wish to remove."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "summary": "Remove a Line Item",
        "tags": [
          "Cart / Line Items"
        ]
      }
    },
    "/api/v2/storefront/cart/empty": {
      "patch": {
        "description": "This endpoint removed all line items from the cart. Inventory that was previously taken by this order will be re-stocked.",
        "operationId": "empty-cart",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Empty the Cart",
        "tags": [
          "Cart / Other"
        ]
      }
    },
    "/api/v2/storefront/cart/apply_coupon_code": {
      "patch": {
        "description": "Applies a coupon code to the current cart.",
        "operationId": "apply-coupon-code",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "coupon_code": {
                    "type": "string",
                    "example": "DISCOUNT10"
                  }
                }
              }
            }
          }
        },
        "summary": "Apply a Coupon Code",
        "tags": [
          "Cart / Coupons"
        ]
      }
    },
    "/api/v2/storefront/cart/remove_coupon_code/{coupon_code}": {
      "delete": {
        "description": "Removes a specified coupon code from the current cart.",
        "operationId": "remove-coupon-code",
        "parameters": [
          {
            "name": "coupon_code",
            "in": "path",
            "required": true,
            "description": "Specify the coupon code for removal.",
            "schema": {
              "type": "string"
            },
            "example": "DISCOUNT10"
          },
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "summary": "Remove a Coupon",
        "tags": [
          "Cart / Coupons"
        ]
      }
    },
    "/api/v2/storefront/cart/remove_coupon_code": {
      "delete": {
        "description": "Removes all coupons that have been applied to the current cart.",
        "operationId": "remove-all-coupon-codes",
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "summary": "Remove all Coupons",
        "tags": [
          "Cart / Coupons"
        ]
      }
    },
    "/api/v2/storefront/cart/estimate_shipping_rates": {
      "get": {
        "description": "Returns a list of shipping rates for the current cart. The rates given are only estimates and can vary from the final shipping rates.",
        "operationId": "estimate-shipping-rates",
        "parameters": [
          {
            "name": "country_iso",
            "in": "query",
            "description": "Pass country ISO or ISO3 symbol to get estimations for this destination. If no code is passed we'll try to use Cart shipping address country or the default Country for the current Store.",
            "schema": {
              "type": "string",
              "example": "USA"
            },
            "example": "USA",
            "required": true
          },
          {
            "$ref": "#/components/parameters/SparseFieldsShippingRate"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EstimatedShippingRates"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "summary": "List Estimated Shipping Rates",
        "tags": [
          "Cart / Other"
        ]
      }
    },
    "/api/v2/storefront/cart/associate": {
      "patch": {
        "description": "Associates a guest cart with the currently signed in user.",
        "operationId": "associate-cart",
        "parameters": [
          {
            "name": "guest_order_token",
            "in": "query",
            "description": "Token of the guest cart to be associated with user.",
            "schema": {
              "type": "string",
              "example": "bd7SHdOAQqTsQHsjnhoWIw1633364692479"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       
        "summary": "Associate a Cart with a User",
        "tags": [
          "Cart / Other"
        ]
      }
    },
    "/api/v2/storefront/cart/change_currency": {
      "patch": {
        "description": "Changes the cart currency and recalculates the cart values.",
        "operationId": "change-currency",
        "parameters": [
          {
            "name": "new_currency",
            "in": "query",
            "description": "The currency to change the cart to.",
            "schema": {
              "type": "string",
              "example": "USD"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       
        "summary": "Change Cart Currency",
        "tags": [
          "Cart / Other"
        ]
      }
    },
    "/api/v2/storefront/checkout": {
      "patch": {
        "description": "The Update Checkout endpoint allows you to manage the typical stages of an e-commerce checkout system.",
        "tags": [
          "Checkout"
        ],
        "operationId": "update-checkout",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          }
        ],
        "summary": "Update Checkout",
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "example": "john@snow.org"
                      },
                      "bill_address_attributes": {
                        "$ref": "#/components/schemas/AddressPayload"
                      },
                      "ship_address_attributes": {
                        "$ref": "#/components/schemas/AddressPayload"
                      },
                      "shipments_attributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "3",
                              "description": "The Shipment `id`"
                            },
                            "selected_shipping_rate_id": {
                              "type": "string",
                              "example": "10",
                              "description": "The Shipping Rate `id`"
                            }
                          },
                          "required": [
                            "id",
                            "selected_shipping_rate_id"
                          ]
                        }
                      },
                      "payments_attributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "payment_method_id": {
                              "type": "string",
                              "example": "1",
                              "description": "The `id` of the Payment Method"
                            },
                            "source_attributes": {
                              "type": "object",
                              "properties": {
                                "gateway_payment_profile_id": {
                                  "type": "string"
                                },
                                "month": {
                                  "type": "number"
                                },
                                "year": {
                                  "type": "number"
                                },
                                "cc_type": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "required": [
                            "payment_method_id",
                            "source_attributes"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "##### Add Customer Details\n\nAdding customer details is achieved by passing the customer-related attributes shown in the corresponding request body example.\n\n##### Add Shipping Rates\n\nTo add shipping rates, you will need a shipment associated with the checkout. If you do not have any shipments follow the steps below:\n\n1. First, ensure your cart has items added via the **Add an Item to Cart** endpoint.\n2. Next, ensure the checkout has a shipping address set, you can set this by running the *Add Customer Details* example above.\n3. Next run the **Advance Checkout** endpoint, this will create shipments for the items in the cart and users shipping destination.\n\nUse the **List Shipping Rates** endpoint to find the shipments and shipping rates available for this checkout. Note the shipment `id` and shipping_rate `id`; use these values to populate your request body.\n\n##### Add a Payment\n\nTo add a payment method, you must find the available payment methods by running the **List Payment Methods** endpoint, each payment method has its own set of source attribute requirements. In the example shown, we have used the source attributes for a card payment.\n\nPass the `payment_method_id` and `source_attribute` hash containing the required attributes for the selected payment method."
        }
      }
    },
    "/api/v2/storefront/checkout/next": {
      "patch": {
        "description": "Goes to the next checkout step.",
        "operationId": "checkout-next",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Next Checkout Step",
        "tags": [
          "Checkout / State"
        ]
      }
    },
    "/api/v2/storefront/checkout/advance": {
      "patch": {
        "description": "Advances the checkout to the furthest checkout step validation allows, up until the **completed** step.",
        "operationId": "advance-checkout",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Advance Checkout",
        "tags": [
          "Checkout / State"
        ]
      }
    },
    "/api/v2/storefront/checkout/complete": {
      "patch": {
        "description": "Completes the checkout by marking the order as complete.\n\n**Please be aware**; Once a checkout is marked as `complete` it is considered a completed order, the Cart and Checkout endpoints will no longer access a completed order, and a new cart will need to be created.\n\nIf you want to access a completed order you will need to use the **Account / Orders** or **Order Status** endpoints.",
        "operationId": "complete-checkout",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          }
        ],
        "summary": "Complete Checkout",
        "tags": [
          "Checkout / State"
        ]
      }
    },
    "/api/v2/storefront/checkout/select_shipping_method": {
      "patch": {
        "description": "Selects shipping method for Shipment(s).\n\nTo generate shipments you first need to fetch shipping rates via\n\n[Get Shipping Rates](https://api.spreecommerce.org/docs/api-v2/b3A6MzE0Mjc2MQ-list-shipping-rates) endpoint",
        "operationId": "select-shipping-method",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shipping_method_id": {
                    "type": "string",
                    "description": "ID of the selected Shipping Method"
                  },
                  "shipment_id": {
                    "type": "string",
                    "description": "ID of the selected Shipment. If not supplied it will try to set selected shipping method for all shipments"
                  }
                },
                "required": [
                  "shipping_method_id"
                ]
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Selects shipping method for shipment(s)",
        "tags": [
          "Checkout / Shipments"
        ]
      }
    },
    "/api/v2/storefront/checkout/create_payment": {
      "post": {
        "description": "Creates new Payment for the current checkout.\n\nYou can either create new payment source (eg. a Credit Card) or use an existing (for signed in users only).\n\nNewly created payment source will be associated to the current signed in user.\n\nSystem will automatically invalidate previous (non-finalized) payments (excluding store credit / gift card payments).\n\n[More details on payment system](https://dev-docs.spreecommerce.org/internals/payments)",
        "operationId": "create-payment",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method_id": {
                    "type": "string",
                    "description": "ID of the selected Payment Method"
                  },
                  "source_id": {
                    "type": "string",
                    "description": "ID of the selected Payment Source (eg. Credit Card, only for signed in users)"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Amount for the newly created payment, when left blank will use the entire Order Total (reduced by used Store Credits / Gift Cards)"
                  },
                  "source_attributes": {
                    "type": "object",
                    "properties": {
                      "gateway_payment_profile_id": {
                        "type": "string",
                        "description": "Payment source authorization token, more details for [Stripe implementation](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)"
                      },
                      "cc_type": {
                        "type": "string",
                        "enum": [
                          "visa",
                          "mastercard",
                          "amex"
                        ]
                      },
                      "last_digits": {
                        "type": "string",
                        "description": "Last 4 digits of CC number"
                      },
                      "month": {
                        "type": "number",
                        "description": "Expiration date month"
                      },
                      "year": {
                        "type": "number",
                        "description": "Expiration date year"
                      },
                      "name": {
                        "type": "string",
                        "description": "Card holder name"
                      }
                    },
                    "required": [
                      "gateway_payment_profile_id",
                      "name"
                    ]
                  }
                },
                "required": [
                  "payment_method_id"
                ]
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Create new Payment",
        "tags": [
          "Checkout / Payments"
        ]
      }
    },
    "/api/v2/storefront/checkout/add_store_credit": {
      "post": {
        "description": "The Add Store Credit endpoint takes the users existing store credit from their account and adds a set amount of this store credit to the current cart.\n\nIn essence, by adding the user's store credit to a cart, the user's store credit is being spent.",
        "operationId": "add-store-credit",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "in": "query",
            "name": "amount",
            "description": "Amount of Store Credit to use. As much as possible Store Credit will be applied if no amount is passed.",
            "schema": {
              "type": "string"
            },
            "example": "100"
          },
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Add Store Credit",
        "tags": [
          "Checkout / Store Credit"
        ]
      }
    },
    "/api/v2/storefront/checkout/remove_store_credit": {
      "post": {
        "description": "Removes store credit from the cart if any had previously been applied.",
        "operationId": "remove-store-credit",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Cart"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       

        "parameters": [
          {
            "$ref": "#/components/parameters/CartIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCart"
          }
        ],
        "summary": "Remove Store Credit",
        "tags": [
          "Checkout / Store Credit"
        ]
      }
    },
    "/api/v2/storefront/checkout/payment_methods": {
      "get": {
        "description": "Returns a list of available payment methods for this checkout.",
        "tags": [
          "Checkout / Payments"
        ],
        "operationId": "payment-methods",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentMethodList"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "summary": "List Payment Methods"
      }
    },
    "/api/v2/storefront/checkout/shipping_rates": {
      "get": {
        "description": "Returns a list of available shipping rates for the checkout.\n\nShipping rates are grouped against shipments. Each checkout can have multiple shipments. Some products are in stock and will be shipped immediately, while others might be back-ordered and sent later.",
        "tags": [
          "Checkout / Shipments"
        ],
        "operationId": "shipping-rates",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Shipment"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
       

        "summary": "List Shipping Rates"
      }
    },
    "/api/v2/storefront/products": {
      "get": {
        "description": "Returns a list of products for the current Store.",
        "tags": [
          "Products"
        ],
        "operationId": "products-list-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterByIds"
          },
          {
            "$ref": "#/components/parameters/FilterBySKUs"
          },
          {
            "in": "query",
            "name": "filter[price]",
            "schema": {
              "type": "string"
            },
            "example": "10,100",
            "description": "Filter Products based on price (minimum, maximum range)"
          },
          {
            "in": "query",
            "name": "filter[taxons]",
            "schema": {
              "type": "string"
            },
            "example": "1,2,3,4,5,6,7,8,9,10,11",
            "description": "Filter Products based on taxons (IDs of categories, brands, etc)"
          },
          {
            "in": "query",
            "name": "filter[name]",
            "schema": {
              "type": "string"
            },
            "example": "rails",
            "description": "Find Products with matching name (supports wild-card, partial-word match search)"
          },
          {
            "in": "query",
            "name": "filter[options][tshirt-color]",
            "schema": {
              "type": "string"
            },
            "example": "Red",
            "description": "Find Products with Variants that have the specified option (eg. color, size) and value (eg. red, XS)"
          },
          {
            "in": "query",
            "name": "filter[properties][brand-name]",
            "schema": {
              "type": "string"
            },
            "example": "alpha",
            "description": "Find Products with Property Brand Name with value Alpha"
          },
          {
            "in": "query",
            "name": "filter[show_deleted]",
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "Returns also deleted products"
          },
          {
            "in": "query",
            "name": "filter[show_discontinued]",
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "Returns also discontinued products"
          },
          {
            "in": "query",
            "name": "filter[in_stock]",
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "Returns only in stock products"
          },
          {
            "in": "query",
            "name": "filter[backorderable]",
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "Returns only backorderable products"
          },
          {
            "in": "query",
            "name": "filter[purchasable]",
            "schema": {
              "type": "boolean"
            },
            "example": true,
            "description": "Returns only in stock or backorderable products"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "example": "-updated_at,price,-name,created_at,-available_on,sku",
            "description": "Sort products based on: <ul>\n  <li>name (ascending/descending)</li>\n  <li>price (ascending/descending)</li>\n  <li>available_on (ascending/descending)</li>\n  <li>created_at (ascending/descending)</li>\n  <li>updated_at (ascending/descending)</li>\n  <li>sku (ascending/descending)</li>\n</ul> Use <q>-</q> sign to set descending sort, eg. <q>-updated_at</q>"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          },
          {
            "$ref": "#/components/parameters/ProductIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsProduct"
          },
          {
            "$ref": "#/components/parameters/ProductImageTransformationSizeParam"
          },
          {
            "$ref": "#/components/parameters/ProductImageTransformationQualityParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductList"
          }
        },
        "summary": "List all Products"
      }
    },
    "/api/v2/storefront/products/{product_slug}": {
      "get": {
        "description": "Returns Product details. You can use product permalink:\n\n```\nGET /api/v2/storefront/products/knitted-high-neck-sweater\n```\n\nOr Product ID:\n\n```\nGET /api/v2/storefront/products/21\n```\n\n**Note** API will attempt a permalink lookup before an ID lookup.",
        "tags": [
          "Products"
        ],
        "operationId": "show-product-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/ProductSlug"
          },
          {
            "$ref": "#/components/parameters/ProductIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsProduct"
          },
          {
            "$ref": "#/components/parameters/ProductImageTransformationSizeParam"
          },
          {
            "$ref": "#/components/parameters/ProductImageTransformationQualityParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Product"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Retrieve a Product"
      }
    },
    "/api/v2/storefront/store": {
      "get": {
        "summary": "Return the current Store",
        "description": "Returns the current Store. [Read more about Stores](https://dev-docs.spreecommerce.org/internals/stores)",
        "tags": [
          "Stores"
        ],
        "operationId": "show-current-store",
        "parameters": [
          {
            "$ref": "#/components/parameters/StoreIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsStore"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Store"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
       
      }
    },
    "/api/v2/storefront/taxons": {
      "get": {
        "description": "Returns a list of Taxons. [Read more about Taxons](https://dev-docs.spreecommerce.org/internals/products#taxons-and-taxonomies)",
        "tags": [
          "Taxons"
        ],
        "operationId": "taxons-list-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterByIds"
          },
          {
            "$ref": "#/components/parameters/FilterByName"
          },
          {
            "in": "query",
            "name": "filter[parent_id]",
            "schema": {
              "type": "string"
            },
            "example": "1",
            "description": "Fetch children nodes of specified Taxon"
          },
          {
            "in": "query",
            "name": "filter[parent_permalink]",
            "schema": {
              "type": "string"
            },
            "example": "clothes",
            "description": "Fetch children nodes of specified Taxon permalink"
          },
          {
            "in": "query",
            "name": "filter[taxonomy_id]",
            "schema": {
              "type": "string"
            },
            "example": "1",
            "description": "Fetch Taxons in a specified Taxonomy"
          },
          {
            "in": "query",
            "name": "filter[roots]",
            "schema": {
              "type": "boolean"
            },
            "example": false,
            "description": "Fetch only root Taxons (Taxonomies)"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          },
          {
            "$ref": "#/components/parameters/TaxonIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsTaxon"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxonList"
          }
        },
        "summary": "List all Taxons"
      }
    },
    "/api/v2/storefront/taxons/{taxon_permalink}": {
      "get": {
        "description": "Returns the details of a specified taxon.",
        "tags": [
          "Taxons"
        ],
        "operationId": "show-taxon-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/TaxonPermalink"
          },
          {
            "$ref": "#/components/parameters/TaxonIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsTaxon"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Taxon"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Retrieve a Taxon"
      }
    },
    "/api/v2/storefront/countries": {
      "get": {
        "description": "Returns a list of all countries.",
        "tags": [
          "Countries"
        ],
        "operationId": "countries-list-storefront",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CountryList"
          }
        },
        "summary": "List all Countries"
      }
    },
    "/api/v2/storefront/countries/{iso}": {
      "get": {
        "description": "Returns the details of a specific country.",
        "tags": [
          "Countries"
        ],
        "operationId": "show-country-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/IsoOrIso3"
          },
          {
            "$ref": "#/components/parameters/CountryIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCountry"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Country"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Retrieve a Country"
      }
    },
    "/api/v2/storefront/countries/default": {
      "get": {
        "description": "Returns the default country for the current store. By default this will be the US.",
        "tags": [
          "Countries"
        ],
        "operationId": "default-country",
        "parameters": [
          {
            "$ref": "#/components/parameters/CountryIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsCountry"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Country"
          }
        },
        "summary": "Get Default Country"
      }
    },
    "/api/v2/storefront/cms_pages": {
      "get": {
        "description": "Returns a list of all CMS Pages available in the current store.",
        "tags": [
          "CMS Pages"
        ],
        "operationId": "get-cms-pages",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterByType"
          },
          {
            "$ref": "#/components/parameters/FilterByTitle"
          },
          {
            "$ref": "#/components/parameters/CmsPageIncludeParam"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CmsPageList"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "List all CMS Pages"
      }
    },
    "/api/v2/storefront/cms_pages/{cms_page_slug}": {
      "get": {
        "description": "To return a single CMS Page you can use the CMS Page slug:\n\n```\nGET /api/v2/storefront/cms_pages/about-us\n```\n\nor CMS Page ID:\n\n```\nGET /api/v2/storefront/cms_pages/37\n```\n\n**Note:** API will attempt a Slug lookup before an ID lookup.",
        "tags": [
          "CMS Pages"
        ],
        "operationId": "get-cms-page",
        "parameters": [
          {
            "$ref": "#/components/parameters/CmsPageSlug"
          },
          {
            "$ref": "#/components/parameters/CmsPageIncludeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CmsPage"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Retrieve a CMS Page"
      }
    },
    "/api/v2/storefront/menus": {
      "get": {
        "description": "Returns a list of all menus available in the current store.",
        "tags": [
          "Menus"
        ],
        "operationId": "get-menus",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterByLocation"
          },
          {
            "$ref": "#/components/parameters/MenuIncludeParam"
          },
          {
            "$ref": "#/components/parameters/LocaleParam"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MenuList"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "List all Menus"
      }
    },
    "/api/v2/storefront/menus/{id}": {
      "get": {
        "description": "Returns the dertails of a specified menu.",
        "tags": [
          "Menus"
        ],
        "operationId": "get-menu",
        "parameters": [
          {
            "$ref": "#/components/parameters/MenuIncludeParam"
          },
          {
            "schema": {
              "type": "string",
              "example": "1"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the `menu` you wish to retrieve."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Menu"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          }
        },
        "summary": "Retrieve a  Menu"
      }
    },
    "/api/v2/storefront/wishlists": {
      "get": {
        "description": "Returns all wishlists available to the current user, in the current store.",
        "summary": "List all Wishlists",
        "tags": [
          "Wishlists"
        ],
        "operationId": "list-wishlists-for-current-user",
        "parameters": [
          {
            "$ref": "#/components/parameters/WishlistIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsWishlist"
          },
          {
            "$ref": "#/components/parameters/PerPageParam"
          },
          {
            "$ref": "#/components/parameters/WishlistIsVariantIncludedParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WishlistList"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
       
      },
      "post": {
        "description": "Creates a new wishlist for the current user in the current store.",
        "summary": "Create a Wishlist",
        "tags": [
          "Wishlists"
        ],
        "operationId": "create-wishlist-storefront",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Wishlist"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The Wishlist name."
                  },
                  "is_private": {
                    "type": "boolean",
                    "description": "Set the Wishlist to public or private. Defaults to true (private)."
                  },
                  "is_default": {
                    "type": "boolean",
                    "description": "Whether the wishlist is set to the users default wishlist for the current store. Defaults to false."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SparseFieldsWishlist"
          }
        ]
      }
    },
    "/api/v2/storefront/wishlists/{token}": {
      "get": {
        "description": "Retrieves a wishlist using the wishlist token.\n\nIf the wishlist is publicly viewable, the endpoint will return the requested wishlist regardless of the user. If the wishlist is private, only the wishlist owner can access the wishlist.",
        "summary": "Retrieve a Wishlist",
        "tags": [
          "Wishlists"
        ],
        "operationId": "get-wishlist-details",
        "parameters": [
          {
            "$ref": "#/components/parameters/Token"
          },
          {
            "$ref": "#/components/parameters/WishlistIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsWishlist"
          },
          {
            "$ref": "#/components/parameters/WishlistIsVariantIncludedParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Wishlist"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
      },
      "patch": {
        "description": "Updates the specific Wishlist by setting the values passed in the request body. Any parameters not provided will be left unchanged.",
        "summary": "Update a Wishlist",
        "tags": [
          "Wishlists"
        ],
        "operationId": "update-wishlist-storefront",
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "wishlist": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Change the wishlist name."
                      },
                      "is_private": {
                        "type": "boolean",
                        "description": "Set the wishlist to public or private."
                      },
                      "is_default": {
                        "type": "boolean",
                        "description": "Make this wishlist the default wishlist."
                      }
                    }
                  }
                }
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/Token"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsWishlist"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Wishlist"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        }
       
      },
      "delete": {
        "description": "This operation deletes the wishlist identified in the URI `token`.",
        "summary": "Delete a Wishlist",
        "tags": [
          "Wishlists"
        ],
        "operationId": "delete-wishlist-storefront",
        "parameters": [
          {
            "$ref": "#/components/parameters/Token"
          }
        ],
        "responses": {
          "204": {
            "description": "204 Success - No Content"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
       
      }
    },
    "/api/v2/storefront/wishlists/default": {
      "get": {
        "description": "Returns the default wishlist for the current user, in the current store. If the user does not have a default wishlist in the current store one will be created.",
        "summary": "Retrieve the default Wishlist",
        "tags": [
          "Wishlists"
        ],
        "operationId": "get-default-wishlist",
        "parameters": [
          {
            "$ref": "#/components/parameters/WishlistIncludeParam"
          },
          {
            "$ref": "#/components/parameters/SparseFieldsWishlist"
          },
          {
            "$ref": "#/components/parameters/WishlistIsVariantIncludedParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Wishlist"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        }
       
      }
    },
    "/api/v2/storefront/wishlists/{token}/add_item": {
      "post": {
        "summary": "Add Item to Wishlist",
        "description": "The Add Item to Wishlist endpoint adds a variant to an existing wishlist by creating a new `wished_item`. A wished item in a wishlist is comparable to a line item in a cart.\n\nEach wished item references a single variant, holds the desired quantity and returns price information determined by the variant price in current currency, and desired quantity.",
        "operationId": "add-item-to-wishlist",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variant_id": {
                    "type": "string",
                    "description": "The variant ID that is to be added to the wishlist."
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Set a quantity greater than 0, or omit the quantity param if your wishlist does not support quantities."
                  }
                },
                "required": [
                  "variant_id"
                ]
              }
            }
          },
          "description": "Passing a quantity value is optional for those wishlist systems that do not support quantities. In this scenario, the returned quantity value will always be `1`, allowing the add-to-cart and pricing to reflect the single representation of the wished item accurately.\n\nIf the wishlist system you are building allows for setting quantity, add the quantity attribute to the request body with an integer value greater than zero."
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WishedItem"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       
        "tags": [
          "Wishlists / Wished Items"
        ]
      }
    },
    "/api/v2/storefront/wishlists/{token}/set_item_quantity/{item_id}": {
      "patch": {
        "description": "This endpoint sets the wished item quantity.",
        "summary": "Set Wished Item Quantity",
        "operationId": "update-wished-variant-quantity",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "token",
            "in": "path",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "item_id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "number",
                    "description": "Set the quantity value to an integer greater than 0"
                  }
                },
                "required": [
                  "quantity"
                ]
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WishedItem"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/422UnprocessableEntity"
          }
        },
       
        "tags": [
          "Wishlists / Wished Items"
        ]
      }
    },
    "/api/v2/storefront/wishlists/{token}/remove_item/{item_id}": {
      "delete": {
        "description": "Removes a wished item from a wishlist.",
        "summary": "Delete Item from Wishlist",
        "operationId": "delete-wished-variant-from-wishlist",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "token",
            "in": "path",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "item_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WishedItem"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
       
        "tags": [
          "Wishlists / Wished Items"
        ]
      }
    },
    "/api/v2/storefront/digitals/{token}": {
      "get": {
        "summary": "Download a Digital Asset",
        "tags": [
          "Digital Downloads"
        ],
        "responses": {
          "200": {
            "description": "200 Success - Returns the digital asset.",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "image/gif": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "image/svg+xml": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "image/bmp": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "image/tiff": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "image/png": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "video/mpeg": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "application/gzip": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "application/pdf": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "font/woff": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "font/woff2": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "font/otf": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "font/ttf": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          }
        },
        "operationId": "get-digitals",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "4WaA5vjMbnivskav2rMPGKzt"
            },
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Use the token from the digital link."
          }
        ],
        "description": "This endpoint allows you to download a digital item using the unique digital_link token.\n\nThe digital_link token value can be found by including `line_items.digital_links` in a completed order lookup.\n\nUse the **Retrieve an Order Status** endpoint found under the Order Status tab, or the **Retrieve an Order** endpoint found under the Account / Orders tab to perform a completed order lookup.\n\nDepending on the store that the item was purchased in, downloads may be restricted to a set number of days since the purchase was made. Additionally, the number of times a download link can be used may be restricted.\n\nIf you are not authorized to perform the download due to the download limit restrictions mentioned above, a 403 response will be returned."
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer"
      },
      "orderToken": {
        "type": "apiKey",
        "in": "header",
        "description": "Order token to authorize Cart and Checkout requests.\nUseful for guest checouts when you don't have the user token (bearerAuth)\n\nYou can obtain it from the [/cart](index.yaml/paths/~1cart/post) endpoint - it's part of the response (value of the `token` attribute).",
        "name": "X-Spree-Order-Token"
      }
    },
    "schemas": {
      "Address": {
        "type": "object",
        "title": "Address",
        "description": "The Address model holds the customer details, such as name, address, and phone number.",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "address"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "firstname": {
                "type": "string",
                "example": "John"
              },
              "lastname": {
                "type": "string",
                "example": "Doe"
              },
              "address1": {
                "type": "string",
                "example": "1600 Amphitheatre Pkwy"
              },
              "address2": {
                "type": "string",
                "example": "Suite 1",
                "nullable": true
              },
              "city": {
                "type": "string",
                "example": "Mountain View"
              },
              "zipcode": {
                "type": "string",
                "example": "94043"
              },
              "phone": {
                "type": "string",
                "example": "(+1) 123 456 789",
                "nullable": true
              },
              "state_name": {
                "type": "string",
                "example": "California"
              },
              "state_code": {
                "type": "string",
                "example": "CA",
                "description": "State abbreviation",
                "nullable": true
              },
              "country_name": {
                "type": "string",
                "example": "United States of America"
              },
              "country_iso3": {
                "type": "string",
                "example": "USA",
                "description": "Country ISO3 code"
              },
              "company": {
                "type": "string",
                "example": "Google Inc.",
                "description": "Company name",
                "nullable": true
              },
              "label": {
                "type": "string",
                "description": "The internal name for this address (Work, Home)",
                "example": "Home",
                "nullable": true
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "x-internal": false
      },
      "AddressPayload": {
        "example": {
          "firstname": "John",
          "lastname": "Snow",
          "address1": "7735 Old Georgetown Road",
          "address2": "2nd Floor",
          "city": "Bethesda",
          "phone": "3014445002",
          "zipcode": "20814",
          "state_name": "MD",
          "country_iso": "US"
        },
        "type": "object",
        "x-internal": false,
        "title": "",
        "description": "",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "address1": {
            "type": "string",
            "description": "Street address"
          },
          "address2": {
            "type": "string",
            "description": "Additional address information, floor no etc"
          },
          "city": {
            "type": "string",
            "description": "City, town"
          },
          "phone": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "description": "Valid zipcode, will be validated against the selected Country"
          },
          "state_name": {
            "type": "string",
            "description": "State/region/province 2 letter abbreviation"
          },
          "country_iso": {
            "type": "string",
            "description": "Country ISO (2-chars) or ISO3 (3-chars) code. [List of all codes](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)"
          },
          "company": {
            "type": "string",
            "example": "Paper Street Soap Co.",
            "description": "Company name"
          },
          "label": {
            "type": "string",
            "example": "Work",
            "description": "The internal name for this address (Work, Home)"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "address1",
          "city",
          "country_iso"
        ]
      },
      "Cart": {
        "description": "The Cart provides a central place to collect information about an order, including line items, adjustments, payments, addresses, and shipments. [Read more in Spree docs](https://dev-docs.spreecommerce.org/internals/orders)",
        "type": "object",
        "title": "Cart",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "cart"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "example": "R123456789",
                "description": "Used as the **{order_number}** value in the URI to identify a completed order."
              },
              "token": {
                "type": "string",
                "example": "eL0nVxe1Aum-Qr9-UkryPA1633360128076",
                "description": "Used for authorizing actions through the `X-Spree-Order-Token` API Key."
              },
              "item_total": {
                "type": "string",
                "example": "19.99"
              },
              "total": {
                "type": "string",
                "example": "29.99"
              },
              "ship_total": {
                "type": "string",
                "example": "0.0"
              },
              "adjustment_total": {
                "type": "string",
                "example": "10.0"
              },
              "created_at": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "updated_at": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "completed_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "included_tax_total": {
                "type": "string",
                "example": "5.00"
              },
              "additional_tax_total": {
                "type": "string",
                "example": "5.0"
              },
              "display_additional_tax_total": {
                "type": "string",
                "example": "$5.00"
              },
              "tax_total": {
                "type": "string",
                "example": "10.0"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "state": {
                "type": "string",
                "example": "cart",
                "enum": [
                  "cart",
                  "address",
                  "delivery",
                  "payment",
                  "confirm",
                  "complete"
                ],
                "description": "State of the Cart in the Checkout flow. Please see <a href=\"https://dev-docs.spreecommerce.org/internals/orders#the-order-state-machine\">\n  The Order State machine\n</a> for a full list with description."
              },
              "email": {
                "type": "string",
                "example": "spree@example.com",
                "nullable": true
              },
              "display_item_total": {
                "type": "string",
                "example": "$19.99"
              },
              "display_ship_total": {
                "type": "string",
                "example": "$19.99"
              },
              "display_adjustment_total": {
                "type": "string",
                "example": "$10.00"
              },
              "display_included_tax_total": {
                "type": "string",
                "example": "$5.00"
              },
              "promo_total": {
                "type": "string",
                "example": "-10.0"
              },
              "display_promo_total": {
                "type": "string",
                "example": "-$10.00"
              },
              "item_count": {
                "type": "number",
                "description": "Total quantity number of all items added to the Cart",
                "example": 2,
                "minimum": 0
              },
              "special_instructions": {
                "type": "string",
                "example": "Please wrap it as a gift",
                "description": "Message added by the Customer",
                "nullable": true
              },
              "display_total": {
                "type": "string",
                "example": "$29.99"
              },
              "pre_tax_item_amount": {
                "type": "string",
                "example": "17.00"
              },
              "display_pre_tax_item_amount": {
                "type": "string",
                "example": "$17.00"
              },
              "pre_tax_total": {
                "type": "string",
                "example": "20.00"
              },
              "display_tax_total": {
                "type": "string",
                "example": "$10.00"
              },
              "display_pre_tax_total": {
                "type": "string",
                "example": "$20.00"
              },
              "shipment_state": {
                "type": "string",
                "enum": [
                  "pending",
                  "backorder",
                  "canceled",
                  "partial",
                  "ready",
                  "shipped"
                ],
                "description": "Overall state of the Shipments. Please see <a href=\"https://dev-docs.spreecommerce.org/internals/orders#order-shipment-states-1\">\n  Order Shipments states\n</a> for a full list with description.",
                "nullable": true
              },
              "payment_state": {
                "type": "string",
                "enum": [
                  "balance_due",
                  "credit_owed",
                  "failed",
                  "paid",
                  "void"
                ],
                "description": "Overall state of the Payments. Please see <a href=\"https://dev-docs.spreecommerce.org/internals/orders#order-payment-states\">\n  Order Payments states\n</a> for a full list with description.",
                "nullable": true
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "line_items": {
                "type": "object",
                "description": "",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "variants": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "promotions": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "payments": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "shipments": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "user": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "billing_address": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "shipping_address": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "CartIncludes": {
        "x-internal": false,
        "title": "Cart Includes",
        "anyOf": [
          {
            "$ref": "#/components/schemas/LineItem"
          },
          {
            "$ref": "#/components/schemas/Promotion"
          },
          {
            "$ref": "#/components/schemas/Variant"
          },
          {
            "$ref": "#/components/schemas/Payment"
          },
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "$ref": "#/components/schemas/Shipment"
          },
          {
            "$ref": "#/components/schemas/DigitalLink"
          },
          {
            "$ref": "#/components/schemas/Product"
          }
        ],
        "description": ""
      },
      "CmsPage": {
        "type": "object",
        "title": "CMS Page",
        "description": "The CMS Page model contains page data for Standard pages, Feature Pages and Homepages.",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "5"
          },
          "type": {
            "type": "string",
            "default": "cms_page"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "About Us"
              },
              "content": {
                "type": "string",
                "example": "<p>This is our about us page, it contains <b>all</b> information about our store.",
                "nullable": true
              },
              "locale": {
                "type": "string",
                "example": "en"
              },
              "meta_description": {
                "type": "string",
                "example": "Learn about our store here on the about us page.",
                "nullable": true
              },
              "meta_title": {
                "type": "string",
                "example": "About Our Store - Shop Today",
                "nullable": true
              },
              "slug": {
                "type": "string",
                "example": "about-us",
                "nullable": true
              },
              "type": {
                "type": "string",
                "example": "Spree::Cms::Pages::StandardPage"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "cms_sections": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "CmsPageIncludes": {
        "x-internal": false,
        "title": "CMS Page Includes",
        "allOf": [
          {
            "$ref": "#/components/schemas/CmsSection"
          }
        ],
        "description": "Hello!"
      },
      "CmsSection": {
        "type": "object",
        "title": "CMS Section",
        "description": "The CMS Section model represents a single section belonging to a CMS Page. CMS Sections can link to other resources through the `linked_resource`.",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1",
            "description": ""
          },
          "type": {
            "type": "string",
            "description": "",
            "default": "cms_section"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Main Hero"
              },
              "content": {
                "type": "string"
              },
              "settings": {
                "type": "string"
              },
              "link": {
                "type": "string",
                "example": "/t/categories/summer-collection",
                "nullable": true
              },
              "fit": {
                "type": "string",
                "example": "Screen"
              },
              "type": {
                "type": "string",
                "example": "Spree::Cms::Sections::HeroImage"
              },
              "position": {
                "type": "integer",
                "example": 1
              },
              "image_one_sm": {
                "type": "string",
                "example": "/rails/active_storage/representations/redirect/eyJfc--jhusbxnd/main_hero.jpg",
                "nullable": true
              },
              "image_one_md": {
                "type": "string",
                "example": "/rails/active_storage/representations/redirect/eyJfc--eldkxjen/main_hero.jpg",
                "nullable": true
              },
              "image_one_lg": {
                "type": "string",
                "example": "/rails/active_storage/representations/redirect/eyJfc--uzggzusx/main_hero.jpg",
                "nullable": true
              },
              "image_one_xl": {
                "type": "string",
                "example": "/rails/active_storage/representations/redirect/eyJfc--lxpshbbc/main_hero.jpg",
                "nullable": true
              },
              "image_two_sm": {
                "type": "string",
                "nullable": true
              },
              "image_two_md": {
                "type": "string",
                "nullable": true
              },
              "image_two_lg": {
                "type": "string",
                "nullable": true
              },
              "image_two_xl": {
                "type": "string",
                "nullable": true
              },
              "image_three_sm": {
                "type": "string",
                "nullable": true
              },
              "image_three_md": {
                "type": "string",
                "nullable": true
              },
              "image_three_lg": {
                "type": "string",
                "nullable": true
              },
              "image_three_xl": {
                "type": "string",
                "nullable": true
              },
              "is_full_screen": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "linked_resource": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "Country": {
        "title": "Country",
        "description": "Countries within Spree are used as a container for states. Countries can be zone members, and also link to an address. The difference between one country and another on an address record can determine which tax rates and shipping methods are used for the order.[Read more about Countries in Spree](https://dev-docs.spreecommerce.org/internals/addresses#countries)",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "country"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "iso": {
                "type": "string",
                "example": "US"
              },
              "iso3": {
                "type": "string",
                "example": "USA"
              },
              "iso_name": {
                "type": "string",
                "example": "UNITED STATES"
              },
              "name": {
                "type": "string",
                "example": "United States"
              },
              "states_required": {
                "type": "boolean"
              },
              "zipcode_required": {
                "type": "boolean"
              },
              "default": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "states": {
                "type": "object",
                "description": "States associated with this Country",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/State"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "CountryIncludes": {
        "x-internal": false,
        "title": "Country Includes",
        "schema": {
          "type": "object",
          "description": "States within Spree are used to scope address data slightly more than country. States are useful for tax purposes, as different states in a country may impose different tax rates on different products. In addition to this, different states may cause different tax rates and shipping methods to be used for an order, similar to how countries affect it also.",
          "title": "State",
          "properties": {
            "abbr": {
              "type": "string",
              "example": "NY",
              "description": "State abbreviation"
            },
            "name": {
              "type": "string",
              "example": "New York",
              "description": "State name"
            }
          }
        }
      },
      "CreditCard": {
        "title": "Credit Card",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "example": "credit_card",
            "default": "credit_card"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "cc_type": {
                "type": "string",
                "enum": [
                  "visa",
                  "mastercard",
                  "amex"
                ],
                "example": "visa"
              },
              "last_digits": {
                "type": "string",
                "example": "1111",
                "description": "Last 4 digits of CC number"
              },
              "month": {
                "type": "number",
                "description": "Expiration date month",
                "example": 12
              },
              "year": {
                "type": "number",
                "example": 2026,
                "description": "Expiration date year"
              },
              "name": {
                "type": "string",
                "example": "John Doe",
                "description": "Card holder name"
              },
              "default": {
                "type": "boolean",
                "example": true,
                "description": "Defines if this is the default CC for a signed in user"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "payment_method": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "CreditCardIncludes": {
        "x-internal": false,
        "title": "Credit Card Includes",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethod"
          }
        ]
      },
      "Error": {
        "x-internal": false,
        "title": "Error",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "Icon": {
        "type": "object",
        "description": "The Icon object contains a url attribute pointing to an Active Storage asset. ",
        "title": "Icon",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "icon"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "image"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "position": {
                "type": "integer",
                "description": "Sort order of images set in the Admin Panel",
                "example": 0,
                "minimum": 0
              },
              "styles": {
                "type": "array",
                "description": "An array of pre-scaled image styles",
                "items": {
                  "$ref": "#/components/schemas/ImageStyle"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "title": "Image",
        "x-internal": false
      },
      "ImageStyle": {
        "x-internal": false,
        "title": "Image Style",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "http://localhost:4000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaEpJbWQyWVhKcFlXNTBjeTltWm1sMmRURlNORFpZWjJaSFpYUkdZMjk2WWsxM1RHWXZNVGs1T1RCak5XVmlNamN4TlRnd1pqVTBabUpqTWpCbFkyVXhZMlZpTTJFd05ERTJZemMzT0dKaE5tSTFNREkyT0dKaFpqa3paV1JtWTJWaE16aGxaQVk2QmtWVSIsImV4cCI6IjIwMTgtMDYtMjRUMTM6NTk6NTguOTY5WiIsInB1ciI6ImJsb2Jfa2V5In19--5e9ff358dc747f73754e332678c5762114ac6f3f/ror_jr_spaghetti.jpeg?content_type=image%2Fjpeg&disposition=inline%3B+filename%3D%22ror_jr_spaghetti.jpeg%22%3B+filename%2A%3DUTF-8%27%27ror_jr_spaghetti.jpeg",
            "description": "Absolute URL of the uploaded image in selected style (width/height)"
          },
          "width": {
            "type": "integer",
            "example": 1920,
            "description": "Actual width of image"
          },
          "height": {
            "type": "integer",
            "example": 1080,
            "description": "Actual height of image"
          }
        }
      },
      "ListLinks": {
        "x-internal": false,
        "type": "object",
        "title": "Pagination Links",
        "properties": {
          "self": {
            "type": "string",
            "description": "URL to the current page of the listing"
          },
          "next": {
            "type": "string",
            "description": "URL to the next page of the listing"
          },
          "prev": {
            "type": "string",
            "description": "URL to the previous page of the listing"
          },
          "last": {
            "type": "string",
            "description": "URL to the last page of the listing"
          },
          "first": {
            "type": "string",
            "description": "URL to the first page of the listing"
          }
        }
      },
      "ListMeta": {
        "type": "object",
        "x-internal": false,
        "title": "Pagination Meta",
        "properties": {
          "count": {
            "type": "number",
            "example": 7,
            "description": "Number of items on the current listing"
          },
          "total_count": {
            "type": "number",
            "example": 145,
            "description": "Number of all items matching the criteria"
          },
          "total_pages": {
            "type": "number",
            "example": 10,
            "description": "Number of all pages containing items matching the criteria"
          }
        }
      },
      "LineItem": {
        "title": "Line Item",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "line_item"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Sample product"
              },
              "quantity": {
                "type": "integer",
                "example": 1
              },
              "slug": {
                "type": "string",
                "example": "sample-product"
              },
              "options_text": {
                "type": "string",
                "example": "Size: small, Color: red"
              },
              "price": {
                "type": "string",
                "example": "125.0",
                "description": "Price of Product per quantity"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "display_price": {
                "type": "string",
                "example": "$125.00",
                "description": "Price of Product per quantity"
              },
              "total": {
                "type": "string",
                "example": "250.0",
                "description": "Total price of Line Item including adjastments, promotions and taxes"
              },
              "display_total": {
                "type": "string",
                "example": "$250.00",
                "description": "Total price of Line Item including adjastments, promotions and taxes"
              },
              "adjustment_total": {
                "type": "string",
                "example": "10.0",
                "description": "TBD"
              },
              "display_adjustment_total": {
                "type": "string",
                "example": "$10.00",
                "description": "TBD"
              },
              "additional_tax_total": {
                "type": "string",
                "example": "5.0"
              },
              "display_additional_tax_total": {
                "type": "string",
                "example": "$5.00"
              },
              "discounted_amount": {
                "type": "string",
                "example": "125.0"
              },
              "display_discounted_amount": {
                "type": "string",
                "example": "$125.00"
              },
              "pre_tax_amount": {
                "type": "string",
                "example": "125.0"
              },
              "display_pre_tax_amount": {
                "type": "string",
                "example": "$125.00"
              },
              "promo_total": {
                "type": "string",
                "example": "-5.0"
              },
              "display_promo_total": {
                "type": "string"
              },
              "included_tax_total": {
                "type": "string",
                "example": "0.0",
                "description": "Taxes included in the price, eg. VAT"
              },
              "display_inluded_tax_total": {
                "type": "string",
                "example": "$0.00"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "recommended_by_us": true
                },
                "description": "The public metadata for the Line Item."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "variant": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "digital_links": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ],
        "description": ""
      },
      "Menu": {
        "type": "object",
        "title": "Menu",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "2"
          },
          "type": {
            "type": "string",
            "default": "menu"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Footer Menu (English)"
              },
              "location": {
                "type": "string",
                "enum": [
                  "footer",
                  "header"
                ]
              },
              "locale": {
                "type": "string",
                "example": "en"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "menu_items": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Relation"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "MenuItem": {
        "title": "Menu Item",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "menu_item"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Mens Shorts"
              },
              "subtitle": {
                "type": "string",
                "example": "Buy Mens Shorts",
                "nullable": true
              },
              "destination": {
                "type": "string",
                "example": "/t/categories/mens/shorts",
                "nullable": true
              },
              "new_window": {
                "type": "boolean"
              },
              "item_type": {
                "type": "string",
                "example": "Link"
              },
              "code": {
                "type": "string",
                "example": "promo",
                "nullable": true
              },
              "lft": {
                "type": "integer"
              },
              "rgt": {
                "type": "integer"
              },
              "depth": {
                "type": "integer"
              },
              "link": {
                "type": "string",
                "nullable": true
              },
              "is_container": {
                "type": "boolean"
              },
              "is_root": {
                "type": "boolean"
              },
              "is_child": {
                "type": "boolean"
              },
              "is_leaf": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "parent": {
                "type": "object",
                "description": "Parent node",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "children": {
                "type": "object",
                "description": "List of child nodes",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "menu": {
                "type": "object",
                "description": "Menu associated with this Menu Item",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "icon": {
                "type": "object",
                "description": "Icon associated with Menu Item",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "linked_resource": {
                "type": "object",
                "description": "Linked Resource associated with this Menu Item",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "MenuIncludes": {
        "x-internal": false,
        "title": "Menu Includes",
        "anyOf": [
          {
            "$ref": "#/components/schemas/MenuItem"
          },
          {
            "$ref": "#/components/schemas/Taxon"
          },
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "$ref": "#/components/schemas/CmsPage"
          },
          {
            "$ref": "#/components/schemas/Icon"
          }
        ]
      },
      "OptionType": {
        "title": "Option Type",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "option_type"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "color"
              },
              "presentation": {
                "type": "string",
                "example": "Color"
              },
              "position": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "description": "",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "default": "payment"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "default": "200.57"
              },
              "response_code": {
                "type": "integer",
                "default": 192
              },
              "number": {
                "type": "string",
                "default": "PV7B4YH0"
              },
              "cvv_response_code": {
                "type": "integer",
                "default": 200
              },
              "cvv_response_message": {
                "type": "string",
                "default": "authorized"
              },
              "payment_method_id": {
                "type": "integer",
                "default": 1
              },
              "payment_method_name": {
                "type": "string",
                "default": "Credit Card"
              },
              "state": {
                "type": "string",
                "default": "paid"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "source": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "payment_method": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "PaymentMethod": {
        "title": "Payment Method",
        "description": "",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "payment_method"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "Spree::Gateway::StripeGateway"
              },
              "name": {
                "type": "string",
                "example": "Stripe"
              },
              "description": {
                "type": "string",
                "example": "Stripe Payments",
                "nullable": true
              },
              "preferences": {
                "type": "object",
                "example": {
                  "amount": 0,
                  "currency": "USD"
                },
                "properties": {
                  "amount": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "Product": {
        "type": "object",
        "title": "Product",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "product"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Example product"
              },
              "description": {
                "type": "string",
                "example": "Example description",
                "nullable": true
              },
              "available_on": {
                "type": "string",
                "example": "2012-10-17T03:43:57Z",
                "nullable": true
              },
              "slug": {
                "type": "string",
                "example": "example-product"
              },
              "price": {
                "type": "string",
                "example": "15.99",
                "nullable": true
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "display_price": {
                "type": "string",
                "example": "$15.99",
                "nullable": true
              },
              "purchasable": {
                "type": "boolean",
                "description": "Indicates if any of Variants are in stock or backorderable"
              },
              "in_stock": {
                "type": "boolean",
                "description": "Indicates if any of Variants are in stock"
              },
              "backorderable": {
                "type": "boolean",
                "description": "Indicates if any of Variants are backeorderable"
              },
              "meta_description": {
                "type": "string",
                "example": "Example product",
                "nullable": true
              },
              "meta_keywords": {
                "type": "string",
                "example": "example, product",
                "nullable": true
              },
              "updated_at": {
                "$ref": "#/components/schemas/Timestamp"
              },
              "sku": {
                "type": "string",
                "example": "9238-WS"
              },
              "available": {
                "type": "boolean"
              },
              "compare_at_price": {
                "type": "string",
                "example": "49.99",
                "nullable": true
              },
              "display_compare_at_price": {
                "type": "string",
                "example": "$49.99",
                "nullable": true
              },
              "localized_slugs": {
                "type": "object",
                "description": "Provides product's slugs in other locales"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "variants": {
                "type": "object",
                "description": "List of Product Variants, excluding Master Variant",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "option_types": {
                "type": "object",
                "description": "List of Product Option Types",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "product_properties": {
                "type": "object",
                "description": "List of Product Properties",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "taxons": {
                "type": "object",
                "description": "List of Taxons associated with this Product",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "images": {
                "type": "object",
                "description": "List of Images associated with this Product",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "default_variant": {
                "type": "object",
                "description": "The default Variant for this product",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "primary_variant": {
                "type": "object",
                "description": "The Primary Variant for this product",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "ProductIncludes": {
        "x-internal": false,
        "title": "Product Includes",
        "anyOf": [
          {
            "$ref": "#/components/schemas/OptionType"
          },
          {
            "$ref": "#/components/schemas/ProductProperty"
          },
          {
            "$ref": "#/components/schemas/Variant"
          },
          {
            "$ref": "#/components/schemas/Image"
          },
          {
            "$ref": "#/components/schemas/Taxon"
          }
        ]
      },
      "StoreIncludes": {
        "x-internal": false,
        "title": "Store Includes",
        "anyOf": [
          {
            "$ref": "#/components/schemas/Country"
          },
          {
            "$ref": "#/components/schemas/Menu"
          },
          {
            "$ref": "#/components/schemas/CmsPage"
          }
        ]
      },
      "ProductProperty": {
        "title": "Product Property",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "product_property"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "example": "Wilson"
              },
              "filter_param": {
                "type": "string",
                "example": "wilson"
              },
              "name": {
                "type": "string",
                "example": "manufacturer"
              },
              "description": {
                "type": "string",
                "example": "Manufacturer"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "x-internal": false
      },
      "Promotion": {
        "type": "object",
        "title": "Promotion",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "promotion"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "10% Discount"
              },
              "description": {
                "type": "string",
                "example": "Super discount for you"
              },
              "amount": {
                "type": "string",
                "example": "-10.0"
              },
              "display_amount": {
                "type": "string",
                "example": "-$10.00"
              },
              "code": {
                "type": "string",
                "example": "BLK-FRI"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "x-internal": false
      },
      "Relation": {
        "type": "object",
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "x-internal": false,
        "description": ""
      },
      "State": {
        "type": "object",
        "description": "States within Spree are used to scope address data slightly more than country. States are useful for tax purposes, as different states in a country may impose different tax rates on different products. In addition to this, different states may cause different tax rates and shipping methods to be used for an order, similar to how countries affect it also.",
        "title": "State",
        "properties": {
          "abbr": {
            "type": "string",
            "example": "NY",
            "description": "State abbreviation"
          },
          "name": {
            "type": "string",
            "example": "New York",
            "description": "State name"
          }
        },
        "x-internal": false
      },
      "Store": {
        "type": "object",
        "description": "Stores are the center of the Spree ecosystem. Each Spree installation can have multiple Stores. Each Store operates on a different domain or subdomain.",
        "title": "Store",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "store"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Spree Demo",
                "description": "Name of the Store"
              },
              "url": {
                "type": "string",
                "example": "spree-demo.com",
                "description": "Store Url"
              },
              "meta_description": {
                "type": "string",
                "example": "Luxury clothing store for men and women.",
                "description": "Meta description for SEO"
              },
              "meta_keywords": {
                "type": "string",
                "example": "luxury clothing men women",
                "description": "Meta keywords for SEO"
              },
              "seo_title": {
                "type": "string",
                "example": "Buy Luxury Clothing With Ease",
                "description": "The title for SEO"
              },
              "default_currency": {
                "type": "string",
                "example": "EUR",
                "description": "Default currency of the store"
              },
              "default": {
                "type": "boolean",
                "example": true,
                "description": "Indicates if the Store is the default one"
              },
              "supported_currencies": {
                "type": "string",
                "example": "EUR,USD,GBP",
                "description": "All currencies supported by store"
              },
              "facebook": {
                "type": "string",
                "example": "https://www.facebook.com/mystorename",
                "description": "URL of Facebook page"
              },
              "twitter": {
                "type": "string",
                "example": "https://twitter.com/mystorename",
                "description": "URL of Twitter page"
              },
              "instagram": {
                "type": "string",
                "example": "https://instagram.com/mystorename",
                "description": "URL of Instagram page"
              },
              "default_locale": {
                "type": "string",
                "example": "en",
                "description": "Default locale of the Store"
              },
              "supported_locales": {
                "type": "string",
                "example": "en,es,de",
                "description": "Supported locales of the Store"
              },
              "customer_support_email": {
                "type": "string",
                "example": "support@mystore.com",
                "description": "This email is visible to your Store visitors in the Footer section"
              },
              "description": {
                "type": "string",
                "example": "Mystore has been selling luxury clothing for more than 20 years and has 15 stores currently.",
                "description": "Description of the Store which is visible in the Footer"
              },
              "address": {
                "type": "string",
                "example": "813 Howard Street, Oswego NY 13126, USA",
                "description": "Address of the Store which is visible in the Footer"
              },
              "contact_phone": {
                "type": "string",
                "example": "+123456789",
                "description": "Contact phone number of the Store which is visible in the Footer"
              },
              "favicon_path": {
                "type": "string",
                "example": "/assets/favicon.ico"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "menus": {
                "type": "object",
                "description": "Menus",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "cms_pages": {
                "type": "object",
                "description": "CMS Pages",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "default_country": {
                "type": "object",
                "description": "Default Country of the Store",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "Shipment": {
        "type": "object",
        "title": "Shipment",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "shipment"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "example": "H121354",
                "description": "Unique Shipment identifier"
              },
              "free": {
                "type": "boolean",
                "description": "Indicates if the Shipping Rate is free, eg. when Free shipping promo applied to Cart"
              },
              "final_price": {
                "type": "string",
                "example": "10.0",
                "description": "Price to be presented for the Customer"
              },
              "display_final_price": {
                "type": "string",
                "example": "$10.00"
              },
              "tracking_url": {
                "type": "string",
                "example": "https://tools.usps.com/go/TrackConfirmAction?tRef=fullpage&tLc=2&text28777=&tLabels=4123412434%2C",
                "description": "Tracking URL to the service provider website",
                "nullable": true
              },
              "state": {
                "type": "string",
                "example": "shipped",
                "enum": [
                  "pending",
                  "ready",
                  "shipped",
                  "canceled"
                ],
                "description": "Status of the Shipment. For a list of all available statuses please refer: <a href=\"https://dev-docs.spreecommerce.org/internals/shipments\" target=\"_blank\" rel=\"noopener\">\n  Shipment section in Spree Guides\n</a>"
              },
              "shipped_at": {
                "type": "string",
                "format": "date-time",
                "example": "2021-01-02 13:42:12",
                "description": "Date when Shipment was being sent from the warehouse",
                "nullable": true
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "stock_location": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "shipping_rates": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Relation"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "ShipmentIncludes": {
        "x-internal": false,
        "title": "Shipment Includes",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingRate"
          },
          {
            "$ref": "#/components/schemas/StockLocation"
          }
        ]
      },
      "ShippingRate": {
        "type": "object",
        "title": "Shipping Rate",
        "description": "",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1",
            "nullable": true
          },
          "type": {
            "type": "string",
            "default": "shipping_rate"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "USPS Ground"
              },
              "selected": {
                "type": "boolean",
                "example": true
              },
              "cost": {
                "type": "string",
                "example": "10.0",
                "description": "Price of the service without discounts applied"
              },
              "tax_amount": {
                "type": "string",
                "example": "0.0",
                "description": "Eligible tax for service (if any)"
              },
              "shipping_method_id": {
                "type": "integer",
                "example": 1,
                "description": "ID of a Shipping Method. You will need this for the Checkout Update action"
              },
              "final_price": {
                "type": "string",
                "example": "10.0",
                "description": "Price to be presented for the Customer"
              },
              "display_cost": {
                "type": "string",
                "example": "$10.00"
              },
              "display_final_price": {
                "type": "string",
                "example": "$10.00"
              },
              "display_tax_amount": {
                "type": "string",
                "example": "$0.00"
              },
              "free": {
                "type": "boolean",
                "example": true,
                "description": "Indicates if the Shipping Rate is free, eg. when Free shipping promo applied to Cart"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "StockLocation": {
        "title": "Stock Location",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "stock_location"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Main Warehouse"
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "Taxon": {
        "title": "Taxon",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "taxon"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "T-shirts"
              },
              "pretty_name": {
                "type": "string",
                "example": "Clothes > T-shirts"
              },
              "permalink": {
                "type": "string",
                "example": "t-shirts"
              },
              "seo_title": {
                "type": "string",
                "example": "Clothes - T-shirts"
              },
              "meta_title": {
                "type": "string",
                "example": "T-shirts",
                "nullable": true
              },
              "meta_description": {
                "type": "string",
                "example": "A list of cool t-shirts ",
                "nullable": true
              },
              "meta_keywords": {
                "type": "string",
                "example": "t-shirts, cool",
                "nullable": true
              },
              "left": {
                "type": "integer",
                "example": 1
              },
              "right": {
                "type": "integer",
                "example": 2
              },
              "position": {
                "type": "integer",
                "example": 0
              },
              "depth": {
                "type": "integer",
                "example": 1,
                "nullable": true
              },
              "is_root": {
                "type": "boolean",
                "example": true,
                "description": "Indicates if the Taxon is the root node of this Taxonomy tree"
              },
              "is_child": {
                "type": "boolean",
                "example": true,
                "description": "Returns true is this is a child node of this Taxonomy tree"
              },
              "is_leaf": {
                "type": "boolean",
                "example": false,
                "description": "Returns true if this is the end of a branch of this Taxonomy tree"
              },
              "updated_at": {
                "type": "string",
                "example": "2018-06-18T10:57:29.704Z"
              },
              "localized_slugs": {
                "type": "object",
                "description": "Provides taxon's slugs in other locales"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "parent": {
                "type": "object",
                "description": "Parent node",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "children": {
                "type": "object",
                "description": "List of child nodes",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "taxonomy": {
                "type": "object",
                "description": "Taxonomy associated with this Taxon",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "image": {
                "type": "object",
                "description": "Image associated with Taxon",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "products": {
                "type": "object",
                "description": "List of active and available Products associated with this Taxon",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "TaxonImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "taxon_image"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "position": {
                "type": "integer",
                "example": 0,
                "description": "Sort order of images set in the Admin Panel"
              },
              "styles": {
                "type": "array",
                "description": "An array of pre-scaled image styles",
                "items": {
                  "$ref": "#/components/schemas/ImageStyle"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "title": "Taxon Image",
        "x-internal": false
      },
      "TaxonIncludes": {
        "x-internal": false,
        "title": "Taxon Includes",
        "anyOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "$ref": "#/components/schemas/TaxonImage"
          },
          {
            "$ref": "#/components/schemas/Taxonomy"
          }
        ]
      },
      "Taxonomy": {
        "type": "object",
        "title": "Taxonomy",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "taxonomy"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Categories"
              },
              "position": {
                "type": "integer",
                "example": 0
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ]
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time",
        "example": "2020-02-16T07:14:54.617Z",
        "x-internal": false,
        "title": "Time Stamp"
      },
      "User": {
        "type": "object",
        "title": "User",
        "description": " ",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "user"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "spree@example.com"
              },
              "first_name": {
                "type": "string",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "example": "Doe"
              },
              "selected_locale": {
                "type": "string",
                "example": "fr"
              },
              "store_credits": {
                "type": "number",
                "example": 150.75
              },
              "completed_orders": {
                "type": "number",
                "example": 3,
                "description": "Number of placed Orders by this User"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "user_segment": "supplier"
                },
                "description": "The public metadata for this User"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "default_billing_address": {
                "type": "object",
                "description": "Default billing address associated with this Account",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "default_shipping_address": {
                "type": "object",
                "description": "Default shipping address associated with this Account",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "Variant": {
        "title": "Variant",
        "description": "Variant records track the individual variants of a Product. Variants are of two types: master variants and normal variants.",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "variant"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "sku": {
                "type": "string",
                "example": "SKU-1001"
              },
              "price": {
                "type": "string",
                "example": "15.99"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "display_price": {
                "type": "string",
                "example": "$15.99"
              },
              "weight": {
                "type": "string",
                "example": "10",
                "nullable": true
              },
              "height": {
                "type": "string",
                "example": "10",
                "nullable": true
              },
              "width": {
                "type": "string",
                "example": "10",
                "nullable": true
              },
              "depth": {
                "type": "string",
                "example": "10",
                "nullable": true
              },
              "is_master": {
                "type": "boolean",
                "description": "Indicates if Variant is the master Variant"
              },
              "options_text": {
                "type": "string",
                "example": "Size: small, Color: red"
              },
              "purchasable": {
                "type": "boolean",
                "description": "Indicates if Variant is in stock or backorderable"
              },
              "in_stock": {
                "type": "boolean",
                "description": "Indicates if Variant is in stock"
              },
              "backorderable": {
                "type": "boolean"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              },
              "images": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              },
              "option_values": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Relation"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "WishedItem": {
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "default": "wished_item"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "integer"
              },
              "price": {
                "type": "string"
              },
              "total": {
                "type": "string"
              },
              "display_price": {
                "type": "string"
              },
              "display_total": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "variant": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "WishedItemIncludes": {
        "x-internal": false,
        "title": "Wished Item Includes",
        "allOf": [
          {
            "$ref": "#/components/schemas/Variant"
          }
        ]
      },
      "Wishlist": {
        "description": "",
        "type": "object",
        "title": "Wishlist",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "default": "wishlist"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "is_private": {
                "type": "boolean"
              },
              "is_default": {
                "type": "boolean"
              },
              "variant_included": {
                "type": "boolean",
                "description": "Returns `true` or `false` depending on the variant ID passed in through the `is_variant_included` query param."
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "wished_items": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Relation"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "id",
          "type",
          "attributes",
          "relationships"
        ]
      },
      "WishlistIncludes": {
        "x-internal": false,
        "title": "Wishlist Includes",
        "allOf": [
          {
            "$ref": "#/components/schemas/WishedItem"
          }
        ]
      },
      "DigitalLink": {
        "title": "Digital Link",
        "type": "object",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string",
            "default": "digital_link"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "Gn6srBmmR4KrWy73LRtrBKYw"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "line_item": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Relation"
                  }
                }
              }
            }
          }
        },
        "description": "Digital links are accessible in the order includes line_items.digital_links"
      },
      "Token": {
        
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "2480c16561d1391ea81ca5336b651e9a29f4524f6dee8c7f3f02a600159189c3"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer",
            "default": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "example": 7200,
            "description": "Time (in seconds) after which the access token will expire"
          },
          "refresh_token": {
            "type": "string",
            "example": "f5d78642252eeb3f3001f67b196ac21a27afc030462a54060b0ebbdae2b8dc9c"
          },
          "created_at": {
            "type": "integer",
            "example": 1539863418
          }
        },
        "required": [
          "access_token",
          "token_type",
          "expires_in",
          "refresh_token",
          "created_at"
        ],
        "x-internal": false
      },
      "CreateTokenBody": {
        "type": "object",
        
        "x-internal": false,
        "title": "Create a new token (grant_type: password)",
        "description": "",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "",
            "example": "password",
            "enum": [
              "password"
            ]
          },
          "username": {
            "type": "string",
            "description": "User email address",
            "example": "spree@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "spree123"
          }
        },
        "required": [
          "grant_type",
          "username",
          "password"
        ]
      },
      "ClientTokenBody": {
        "type": "object",
        
        "x-internal": false,
        "title": "Create a new token (grant_type: client_credentials)",
        "description": "",
        "properties": {
          "grant_type": {
            "type": "string",
            "example": "client_credentials",
            "enum": [
              "client_credentials"
            ]
          },
          "client_id": {
            "type": "string",
            "description": "Use the client id",
            "example": "27af95fd57a424e5d01aaf5eab"
          },
          "client_secret": {
            "type": "string",
            "example": "1324a8d5c0ca57daf384fae39f811a5144330143301'",
            "description": "Client secret key."
          }
        },
        "required": [
          "grant_type",
          "client_id",
          "client_secret"
        ]
      },
      "RefreshTokenBody": {
        "type": "object",
        
        "x-internal": false,
        "title": "Refresh an existing token (grant_type: refresh_token)",
        "description": "",
        "properties": {
          "grant_type": {
            "type": "string",
            "example": "refresh_token",
            "enum": [
              "refresh_token"
            ]
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token obtained from the create token response",
            "example": "27af95fd57a424e5d01aaf5eab1324a8d5c0ca57daf384fae39f811a5144330143301'"
          }
        },
        "required": [
          "grant_type",
          "refresh_token"
        ]
      },
      "create_address_params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "required": [
              "country_id",
              "address1",
              "city",
              "zipcode",
              "phone",
              "firstname",
              "lastname"
            ],
            "properties": {
              "country_id": {
                "type": "string",
                "example": "224"
              },
              "state_id": {
                "type": "string",
                "example": "516"
              },
              "state_name": {
                "type": "string",
                "example": "New York"
              },
              "address1": {
                "type": "string",
                "example": "5th ave"
              },
              "address2": {
                "type": "string",
                "example": "1st suite"
              },
              "city": {
                "type": "string",
                "example": "NY"
              },
              "zipcode": {
                "type": "string",
                "example": "10001"
              },
              "phone": {
                "type": "string",
                "example": "+1 123 456 789"
              },
              "alternative_phone": {
                "type": "string"
              },
              "firstname": {
                "type": "string",
                "example": "John"
              },
              "lastname": {
                "type": "string",
                "example": "Snow"
              },
              "label": {
                "type": "string",
                "example": "My home address"
              },
              "company": {
                "type": "string",
                "example": "Vendo Cloud Inc"
              },
              "user_id": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "distance_from_nearest_city_in_km": 10,
                  "location_type": "building"
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "close_to_shop": true
                }
              }
            }
          }
        },
        "required": [
          "address"
        ],
        "x-internal": false
      },
      "update_address_params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "properties": {
              "country_id": {
                "type": "string",
                "example": "224"
              },
              "state_id": {
                "type": "string",
                "example": "516"
              },
              "state_name": {
                "type": "string",
                "example": "New York"
              },
              "address1": {
                "type": "string",
                "example": "5th ave"
              },
              "address2": {
                "type": "string",
                "example": "1st suite"
              },
              "city": {
                "type": "string",
                "example": "NY"
              },
              "zipcode": {
                "type": "string",
                "example": "10001"
              },
              "phone": {
                "type": "string",
                "example": "+1 123 456 789"
              },
              "alternative_phone": {
                "type": "string"
              },
              "firstname": {
                "type": "string",
                "example": "John"
              },
              "lastname": {
                "type": "string",
                "example": "Snow"
              },
              "label": {
                "type": "string",
                "example": "My home address"
              },
              "company": {
                "type": "string",
                "example": "Vendo Cloud Inc"
              },
              "user_id": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "distance_from_city_in_km": 10,
                  "location_type": "building"
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "close_to_shop": true
                }
              }
            }
          }
        },
        "required": [
          "address"
        ],
        "x-internal": false
      },
      "create_adjustment_params": {
        "type": "object",
        "properties": {
          "adjustment": {
            "type": "object",
            "required": [
              "order_id",
              "label",
              "adjustable_id",
              "adjustable_type"
            ],
            "properties": {
              "order_id": {
                "type": "string"
              },
              "label": {
                "type": "string",
                "example": "Shipping costs"
              },
              "adjustable_id": {
                "type": "string"
              },
              "adjustable_type": {
                "type": "string",
                "example": "Spree::LineItem"
              },
              "source_id": {
                "type": "string"
              },
              "source_type": {
                "type": "string",
                "example": "Spree::TaxRate"
              },
              "amount": {
                "type": "number",
                "example": 10.9
              },
              "mandatory": {
                "type": "boolean"
              },
              "eligible": {
                "type": "boolean"
              },
              "state": {
                "type": "string",
                "example": "closed",
                "default": "open",
                "enum": [
                  "closed",
                  "open"
                ]
              },
              "included": {
                "type": "boolean",
                "example": true,
                "default": false
              }
            }
          }
        },
        "required": [
          "adjustment"
        ],
        "x-internal": false
      },
      "update_adjustment_params": {
        "type": "object",
        "properties": {
          "adjustment": {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string"
              },
              "label": {
                "type": "string",
                "example": "Shipping costs"
              },
              "adjustable_id": {
                "type": "string"
              },
              "adjustable_type": {
                "type": "string",
                "example": "Spree::LineItem"
              },
              "source_id": {
                "type": "string"
              },
              "source_type": {
                "type": "string",
                "example": "Spree::TaxRate"
              },
              "amount": {
                "type": "number",
                "example": 10.9
              },
              "mandatory": {
                "type": "boolean"
              },
              "eligible": {
                "type": "boolean"
              },
              "state": {
                "type": "string",
                "example": "closed",
                "default": "open",
                "enum": [
                  "closed",
                  "open"
                ]
              },
              "included": {
                "type": "boolean",
                "example": true,
                "default": false
              }
            }
          }
        },
        "required": [
          "adjustment"
        ],
        "x-internal": false
      },
      "create_classification_params": {
        "type": "object",
        "properties": {
          "classification": {
            "type": "object",
            "required": [
              "product_id",
              "taxon_id",
              "position"
            ],
            "properties": {
              "product_id": {
                "type": "string",
                "example": "1"
              },
              "taxon_id": {
                "type": "string",
                "example": "1"
              },
              "position": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "classification"
        ],
        "x-internal": false
      },
      "update_classification_params": {
        "type": "object",
        "properties": {
          "classification": {
            "type": "object",
            "properties": {
              "product_id": {
                "type": "string",
                "example": "1"
              },
              "taxon_id": {
                "type": "string",
                "example": "1"
              },
              "position": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "classification"
        ],
        "x-internal": false
      },
      "create_standard_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "required": [
              "title",
              "locale",
              "type"
            ],
            "properties": {
              "title": {
                "type": "string",
                "example": "About Us",
                "description": "Give your page a title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::StandardPage"
                ],
                "description": "Set the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Learn More About Super-Shop",
                "description": "Set the meta title for this page, this appears in the title bar of the browser."
              },
              "content": {
                "type": "string",
                "nullable": true,
                "example": "Lot's of text..",
                "description": "The text content of a standard page, this can be HTML from a rich text editor."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Learn more about us on this page here...",
                "description": "Set a meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "slug": {
                "type": "string",
                "nullable": true,
                "example": "about-us",
                "description": "Set a slug for this page."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "The language this page is written in."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Create a Standard Page",
        "x-internal": false
      },
      "create_homepage_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "required": [
              "title",
              "locale",
              "type"
            ],
            "properties": {
              "title": {
                "type": "string",
                "example": "Our Flash Homepage",
                "description": "Give your page a title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::Homepage"
                ],
                "description": "Set the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Visit Our Store - Great Deals",
                "description": "Set the meta title for this page, this appears in the title bar of the browser."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Discover great new products that we sell in this store...",
                "description": "Set a meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "The language this page is written in."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Create a Homepage",
        "x-internal": false
      },
      "create_feature_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "required": [
              "title",
              "locale",
              "type"
            ],
            "properties": {
              "title": {
                "type": "string",
                "example": "Featured Product",
                "description": "Give your page a title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::FeaturePage"
                ],
                "description": "Set the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Learn More About This Featured Product",
                "description": "Set the meta title for this page, this appears in the title bar of the browser."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Learn more about us this amazing product that we sell right here...",
                "description": "Set a meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "slug": {
                "type": "string",
                "nullable": true,
                "example": "about-us",
                "description": "Set a slug for this page."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "The language this page is written in."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Create a Feature Page",
        "x-internal": false
      },
      "update_standard_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "About Us",
                "description": "Update the page title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::StandardPage",
                  "Spree::Cms::Pages::Homepage",
                  "Spree::Cms::Pages::FeaturePage"
                ],
                "description": "Change the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Learn More About Super-Shop",
                "description": "Update the meta title for this page, this appears in the title bar of the browser."
              },
              "content": {
                "type": "string",
                "nullable": true,
                "example": "Lot's of text..",
                "description": "Update the text content of a standard page, this can be HTML from a rich text editor."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Learn more about us on this page here...",
                "description": "Update the meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "slug": {
                "type": "string",
                "nullable": true,
                "example": "about-us",
                "description": "Update the slug for this page."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "Update the language of this page."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Update a Standard Page",
        "x-internal": false
      },
      "update_homepage_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Our Flash Homepage",
                "description": "Update the page title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::StandardPage",
                  "Spree::Cms::Pages::Homepage",
                  "Spree::Cms::Pages::FeaturePage"
                ],
                "description": "Change the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Visit Our Store - Great Deals",
                "description": "Update the meta title for this page, this appears in the title bar of the browser."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Discover great new products that we sell in this store...",
                "description": "Update the meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "Update the language of this page."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Update a Homepage",
        "x-internal": false
      },
      "update_feature_cms_page_params": {
        "type": "object",
        "properties": {
          "cms_page": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Featured Product",
                "description": "Update the page title."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Pages::StandardPage",
                  "Spree::Cms::Pages::Homepage",
                  "Spree::Cms::Pages::FeaturePage"
                ],
                "description": "Change the type of page."
              },
              "meta_title": {
                "type": "string",
                "nullable": true,
                "example": "Learn More About This Featured Product",
                "description": "Update the meta title for this page, this appears in the title bar of the browser."
              },
              "meta_description": {
                "type": "string",
                "nullable": true,
                "example": "Learn more about us this amazing product that we sell right here...",
                "description": "Update the meta description, used for SEO and displayed in search results."
              },
              "visible": {
                "type": "boolean",
                "description": "This page is publicly visible when set to `true`."
              },
              "slug": {
                "type": "string",
                "nullable": true,
                "example": "about-us",
                "description": "Update the slug for this page."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "Update the language of this page."
              }
            }
          }
        },
        "required": [
          "cms_page"
        ],
        "title": "Update a Feature Page",
        "x-internal": false
      },
      "create_hero_image_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage"
                ],
                "example": "Spree::Cms::Sections::HeroImage",
                "description": "Set the section type."
              },
              "linked_resource_type": {
                "type": "string",
                "example": "Spree::Taxon",
                "nullable": true,
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Set the resource type that this section links to."
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Set the ID of the resource that you would like this section to link to."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "button_text": {
                "type": "string",
                "example": "Click Here",
                "description": "Set the text value of the button used in this section."
              },
              "title": {
                "type": "string",
                "example": "Shop Today",
                "description": "Create a title for the Hero Section."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create a Hero Image Section",
        "x-internal": false
      },
      "create_product_carousel_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::ProductCarousel"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Set the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Set the ID of the Taxon that you would like displayed as a Product Carousel."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create a Product Carousel Section",
        "x-internal": false
      },
      "create_side_by_side_images_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::SideBySideImages"
                ],
                "example": "Spree::Cms::Sections::SideBySideImages",
                "description": "Set the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "link_type_one": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Set the resource type that image one links to."
              },
              "link_type_two": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Set the resource type that image two links to."
              },
              "link_one": {
                "type": "string",
                "example": "men/shirts",
                "nullable": true,
                "description": "Set the slug or path that image two links to."
              },
              "link_two": {
                "type": "string",
                "example": "white-shirt",
                "nullable": true,
                "description": "Set the slug or path that image two links to."
              },
              "title_one": {
                "type": "string",
                "example": "Shop Men's Shirts",
                "nullable": true,
                "description": "Set the title used in image one."
              },
              "title_two": {
                "type": "string",
                "example": "Buy This Men's Shirt",
                "nullable": true,
                "description": "Set the title used in image two."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "subtitle_one": {
                "type": "string",
                "example": "Save 50% today",
                "nullable": true,
                "description": "Set the subtitle used in image one."
              },
              "subtitle_two": {
                "type": "string",
                "example": "Save 50% today",
                "nullable": true,
                "description": "Set the subtitle used in image two."
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_two]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create a Side-by-Side Image Section",
        "x-internal": false
      },
      "create_image_gallery_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::ImageGallery"
                ],
                "example": "Spree::Cms::Sections::ImageGallery",
                "description": "Set the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "link_type_one": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Set the resource type that image one links to."
              },
              "link_type_two": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Set the resource type that image two links to."
              },
              "link_type_three": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Set the resource type that image three links to."
              },
              "link_one": {
                "type": "string",
                "example": "men/shirts",
                "nullable": true,
                "description": "Set the slug or path that image two links to."
              },
              "link_two": {
                "type": "string",
                "example": "white-shirt",
                "nullable": true,
                "description": "Set the slug or path that image two links to."
              },
              "link_three": {
                "type": "string",
                "example": "red-shirt",
                "nullable": true,
                "description": "Set the slug or path that image three links to."
              },
              "title_one": {
                "type": "string",
                "example": "Shop Men's Shirts",
                "nullable": true,
                "description": "Set the title used in image one."
              },
              "title_two": {
                "type": "string",
                "example": "Buy This Men's Shirt",
                "nullable": true,
                "description": "Set the title used in image two."
              },
              "title_three": {
                "type": "string",
                "example": "Buy This Women's Skirt",
                "nullable": true,
                "description": "Set the title used in image three."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "layout_style": {
                "type": "string",
                "example": "Default",
                "enum": [
                  "Default",
                  "Reversed"
                ],
                "description": "This value is used by front end developers for styling the order the images appear."
              },
              "display_labels": {
                "type": "string",
                "example": "Show",
                "enum": [
                  "Show",
                  "Hide"
                ],
                "description": "This value is used by front end developers for showing and hiding the label on the images."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_two]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_three]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create an Image Gallery Section",
        "x-internal": false
      },
      "create_featured_article_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::FeaturedArticle"
                ],
                "example": "Spree::Cms::Sections::FeaturedArticle",
                "description": "Set the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "linked_resource_type": {
                "type": "string",
                "example": "Spree::Taxon",
                "nullable": true,
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Set the resource type that this section links to."
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Set the ID of the resource that you would like this section to link to."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "button_text": {
                "type": "string",
                "example": "Click Here",
                "description": "Set the text value of the button used in this section."
              },
              "title": {
                "type": "string",
                "example": "Shop Today",
                "description": "Create a title for the Section."
              },
              "subtitle": {
                "type": "string",
                "example": "Save Big!",
                "description": "Create a subtitle for the Section."
              },
              "rte_content": {
                "type": "string",
                "example": "Lots of text and content goes here.",
                "description": "Set the content, here, this can be rich text editor content."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create a Featured Article Section",
        "x-internal": false
      },
      "create_rich_text_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "required": [
              "name",
              "cms_page_id",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Give this section a name."
              },
              "cms_page_id": {
                "type": "string",
                "description": "Set the `cms_page` ID that this section belongs to."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::RichTextContent",
                "description": "Set the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "rte_content": {
                "type": "string",
                "example": "Lots of text and content goes here.",
                "description": "Set the content, here, this can be rich text editor content."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Create a Rich Text Section",
        "x-internal": false
      },
      "update_hero_image_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Update this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "linked_resource_type": {
                "type": "string",
                "example": "Spree::Taxon",
                "nullable": true,
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Update the resource type that this section links to."
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Set the ID of the resource that you would like this section to link to."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "button_text": {
                "type": "string",
                "example": "Click Here",
                "description": "Update the text value of the button used in this section."
              },
              "title": {
                "type": "string",
                "example": "Shop Today",
                "description": "Update the title for this section."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update a Hero Image Section",
        "x-internal": false
      },
      "update_product_carousel_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Change this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Update the ID of the Taxon that you would like displayed as a Product Carousel."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update a Product Carousel Section",
        "x-internal": false
      },
      "update_side_by_side_images_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Update this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "link_type_one": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Update the resource type that image one links to."
              },
              "link_type_two": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Update the resource type that image two links to."
              },
              "link_one": {
                "type": "string",
                "example": "men/shirts",
                "nullable": true,
                "description": "Update the slug or path that image two links to."
              },
              "link_two": {
                "type": "string",
                "example": "white-shirt",
                "nullable": true,
                "description": "Update the slug or path that image two links to."
              },
              "title_one": {
                "type": "string",
                "example": "Shop Men's Shirts",
                "nullable": true,
                "description": "Update the title used in image one."
              },
              "title_two": {
                "type": "string",
                "example": "Buy This Men's Shirt",
                "nullable": true,
                "description": "Update the title used in image two."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "subtitle_one": {
                "type": "string",
                "example": "Save 50% today",
                "nullable": true,
                "description": "Update the subtitle used in image one."
              },
              "subtitle_two": {
                "type": "string",
                "example": "Save 50% today",
                "nullable": true,
                "description": "Update the subtitle used in image two."
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_two]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update a Side-by-Side Image Section",
        "x-internal": false
      },
      "update_image_gallery_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Update this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "link_type_one": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Update the resource type that image one links to."
              },
              "link_type_two": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Update the resource type that image two links to."
              },
              "link_type_three": {
                "type": "string",
                "example": "Spree::Taxon",
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product"
                ],
                "description": "Update the resource type that image three links to."
              },
              "link_one": {
                "type": "string",
                "example": "men/shirts",
                "nullable": true,
                "description": "Update the slug or path that image two links to."
              },
              "link_two": {
                "type": "string",
                "example": "white-shirt",
                "nullable": true,
                "description": "Update the slug or path that image two links to."
              },
              "link_three": {
                "type": "string",
                "example": "red-shirt",
                "nullable": true,
                "description": "Update the slug or path that image three links to."
              },
              "title_one": {
                "type": "string",
                "example": "Shop Men's Shirts",
                "nullable": true,
                "description": "Update the title used in image one."
              },
              "title_two": {
                "type": "string",
                "example": "Buy This Men's Shirt",
                "nullable": true,
                "description": "Update the title used in image two."
              },
              "title_three": {
                "type": "string",
                "example": "Buy This Women's Skirt",
                "nullable": true,
                "description": "Update the title used in image three."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "layout_style": {
                "type": "string",
                "example": "Default",
                "enum": [
                  "Default",
                  "Reversed"
                ],
                "description": "This value is used by front end developers for styling the order the images appear."
              },
              "display_labels": {
                "type": "string",
                "example": "Show",
                "enum": [
                  "Show",
                  "Hide"
                ],
                "description": "This value is used by front end developers for showing and hiding the label on the images."
              },
              "cms_section[image_one]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_two]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              },
              "cms_section[image_three]": {
                "type": "string",
                "format": "binary",
                "description": "Use a `application/json` request to upload assets."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update an Image Gallery Section",
        "x-internal": false
      },
      "update_featured_article_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Update this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "linked_resource_type": {
                "type": "string",
                "example": "Spree::Taxon",
                "nullable": true,
                "enum": [
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Set the resource type that this section links to."
              },
              "linked_resource_id": {
                "type": "string",
                "example": "1",
                "nullable": true,
                "description": "Change the ID of the resource that you would like this section to link to."
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "gutters": {
                "type": "string",
                "example": "No Gutters",
                "enum": [
                  "Gutters",
                  "No Gutters"
                ],
                "description": "This value is used by front end developers for styling the section padding."
              },
              "button_text": {
                "type": "string",
                "example": "Click Here",
                "description": "Update the text value of the button used in this section."
              },
              "title": {
                "type": "string",
                "example": "Shop Today",
                "description": "Update the title for the Section."
              },
              "subtitle": {
                "type": "string",
                "example": "Save Big!",
                "description": "Update the subtitle for the Section."
              },
              "rte_content": {
                "type": "string",
                "example": "Lots of text and content goes here.",
                "description": "Update the content here, this can be rich text editor content."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update a Featured Article Section",
        "x-internal": false
      },
      "update_rich_text_cms_section_params": {
        "type": "object",
        "properties": {
          "cms_section": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Update this section name."
              },
              "type": {
                "type": "string",
                "enum": [
                  "Spree::Cms::Sections::HeroImage",
                  "Spree::Cms::Sections::FeaturedArticle",
                  "Spree::Cms::Sections::ProductCarousel",
                  "Spree::Cms::Sections::ImageGallery",
                  "Spree::Cms::Sections::SideBySideImages",
                  "Spree::Cms::Sections::RichTextContent"
                ],
                "example": "Spree::Cms::Sections::ProductCarousel",
                "description": "Change the section type."
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this section to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "fit": {
                "type": "string",
                "example": "Screen",
                "enum": [
                  "Screen",
                  "Container"
                ],
                "description": "This value is used by front end developers to set CSS classes for content that fits the screen edge-to-edge, or stays within the boundaries of the central container."
              },
              "rte_content": {
                "type": "string",
                "example": "Lots of text and content goes here.",
                "description": "Update the content, here, this can be rich text editor content."
              }
            }
          }
        },
        "required": [
          "cms_section"
        ],
        "title": "Update a Rich Text Section",
        "x-internal": false
      },
      "create_data_feed_params": {
        "type": "object",
        "properties": {
          "data_feed": {
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "First data feed"
              },
              "slug": {
                "type": "string",
                "example": "first-data-feed"
              },
              "type": {
                "type": "string",
                "example": "Spree::DataFeed::Google"
              },
              "active": {
                "type": "boolean"
              }
            }
          }
        },
        "x-internal": false
      },
      "update_data_feed_params": {
        "type": "object",
        "properties": {
          "data_feed": {
            "type": "object",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "First data feed"
              },
              "slug": {
                "type": "string",
                "example": "first-data-feed"
              },
              "type": {
                "type": "string",
                "example": "Spree::DataFeed::Google"
              },
              "active": {
                "type": "boolean"
              }
            }
          }
        },
        "x-internal": false
      },
      "create_digital_params": {
        "type": "object",
        "properties": {
          "digital[attachment]": {
            "type": "string",
            "format": "binary"
          },
          "digital[variant_id]": {
            "type": "string",
            "example": "123"
          }
        },
        "required": [
          "digital[attachment]",
          "digital[variant_id]"
        ],
        "x-internal": false
      },
      "update_digital_params": {
        "type": "object",
        "properties": {
          "digital[attachment]": {
            "type": "string",
            "format": "binary"
          },
          "digital[variant_id]": {
            "type": "string",
            "example": "123"
          }
        },
        "required": [
          "digital[attachment]",
          "digital[variant_id]"
        ],
        "x-internal": false
      },
      "create_digital_link_params": {
        "type": "object",
        "properties": {
          "digital_link": {
            "type": "object",
            "required": [
              "line_item_id",
              "digital_id"
            ],
            "properties": {
              "access_counter": {
                "type": "integer",
                "example": 0
              },
              "line_item_id": {
                "type": "string",
                "example": "1"
              },
              "digital_id": {
                "type": "string",
                "example": "1"
              }
            }
          }
        },
        "required": [
          "digital_link"
        ],
        "x-internal": false
      },
      "update_digital_link_params": {
        "type": "object",
        "properties": {
          "digital_link": {
            "type": "object",
            "properties": {
              "access_counter": {
                "type": "integer",
                "example": 0
              },
              "line_item_id": {
                "type": "string",
                "example": "1"
              },
              "digital_id": {
                "type": "string",
                "example": "1"
              }
            }
          }
        },
        "required": [
          "digital_link"
        ],
        "x-internal": false
      },
      "create_line_item_params": {
        "type": "object",
        "properties": {
          "line_item": {
            "type": "object",
            "required": [
              "order_id",
              "variant_id",
              "quantity"
            ],
            "properties": {
              "order_id": {
                "type": "string",
                "example": "1"
              },
              "variant_id": {
                "type": "string",
                "example": "1"
              },
              "quantity": {
                "type": "integer",
                "example": 2
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "line_item"
        ],
        "x-internal": false
      },
      "update_line_item_params": {
        "type": "object",
        "properties": {
          "line_item": {
            "type": "object",
            "properties": {
              "variant_id": {
                "type": "string",
                "example": "1"
              },
              "quantity": {
                "type": "integer",
                "example": 2
              }
            }
          }
        },
        "required": [
          "line_item"
        ],
        "x-internal": false
      },
      "create_menu_params": {
        "type": "object",
        "properties": {
          "menu": {
            "type": "object",
            "required": [
              "name",
              "location",
              "locale"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Main Menu",
                "description": "Give this Menu a name."
              },
              "location": {
                "type": "string",
                "enum": [
                  "header",
                  "footer"
                ],
                "description": "Set the location this menu appears in the website."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "Set the language of this menu."
              }
            }
          }
        },
        "required": [
          "menu"
        ],
        "x-internal": false
      },
      "update_menu_params": {
        "type": "object",
        "properties": {
          "menu": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Main Menu",
                "description": "Update this Menu name."
              },
              "location": {
                "type": "string",
                "enum": [
                  "header",
                  "footer"
                ],
                "description": "Update the location this menu appears in the website."
              },
              "locale": {
                "type": "string",
                "example": "en-US",
                "description": "Change the language of this menu."
              }
            }
          }
        },
        "required": [
          "menu"
        ],
        "x-internal": false
      },
      "create_menu_item_params": {
        "type": "object",
        "properties": {
          "menu_item": {
            "type": "object",
            "required": [
              "name",
              "menu_id"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "T-Shirts",
                "description": "The name of this Menu Item"
              },
              "code": {
                "type": "string",
                "nullable": true,
                "example": "MEN-TS",
                "description": "Give this Menu Item a code to identify this Menu Item from others. This is especially useful when using Container type Menu Items to group items."
              },
              "subtitle": {
                "type": "string",
                "nullable": true,
                "example": "Shop men's T-Shirts",
                "description": "Set an optional subtitle for the Menu Item, this is useful if your menu has promotional links that require more than just a link name."
              },
              "destination": {
                "type": "string",
                "nullable": true,
                "example": "https://getvendo.com",
                "description": "Used when the linked_resource_type is set to: URL"
              },
              "menu_id": {
                "type": "integer",
                "example": 1,
                "description": "Specify the ID of the Menu this item belongs to."
              },
              "new_window": {
                "type": "boolean",
                "description": "When set to `true` the link will be opened in a new tab or window."
              },
              "item_type": {
                "type": "string",
                "enum": [
                  "Link",
                  "Container"
                ],
                "description": "Links are standard links, where as Containers are used to group links."
              },
              "linked_resource_type": {
                "type": "string",
                "enum": [
                  "URL",
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Set the type of resource you want to link to, or set to: URL to use the destination field for an external link."
              },
              "linked_resource_id": {
                "type": "integer",
                "example": 1,
                "nullable": true,
                "description": "The ID of the resource you are linking to."
              }
            }
          }
        },
        "required": [
          "menu_item"
        ],
        "title": "Create a Menu Item",
        "x-internal": false
      },
      "update_menu_item_params": {
        "type": "object",
        "properties": {
          "menu_item": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "T-Shirts",
                "description": "Update the name of this Menu Item"
              },
              "code": {
                "type": "string",
                "nullable": true,
                "example": "MEN-TS",
                "description": "The Menu Item a code to identifies this Menu Item from others. This is especially useful when using Container type Menu Items to group items."
              },
              "subtitle": {
                "type": "string",
                "nullable": true,
                "example": "Shop men's T-Shirts",
                "description": "Set an optional subtitle for the Menu Item, this is useful if your menu has promotional links that require more than just a link name."
              },
              "destination": {
                "type": "string",
                "nullable": true,
                "example": "https://getvendo.com",
                "description": "Used when the linked_resource_type is set to: URL"
              },
              "menu_id": {
                "type": "integer",
                "example": 1,
                "description": "Specify the ID of the Menu this item belongs to."
              },
              "new_window": {
                "type": "boolean",
                "description": "When set to `true` the link will be opened in a new tab or window."
              },
              "item_type": {
                "type": "string",
                "enum": [
                  "Link",
                  "Container"
                ],
                "description": "Links are standard links, where as Containers are used to group links."
              },
              "linked_resource_type": {
                "type": "string",
                "enum": [
                  "URL",
                  "Spree::Taxon",
                  "Spree::Product",
                  "Spree::CmsPage"
                ],
                "description": "Change the type of resource you want to link to, or set to: URL to use the destination field for an external link."
              },
              "linked_resource_id": {
                "type": "integer",
                "example": 1,
                "nullable": true,
                "description": "The ID of the resource you are linking to."
              }
            }
          }
        },
        "required": [
          "menu_item"
        ],
        "title": "Update a Menu Item",
        "x-internal": false
      },
      "menu_item_reposition": {
        "type": "object",
        "properties": {
          "menu_item": {
            "type": "object",
            "required": [
              "new_parent_id",
              "new_position_idx"
            ],
            "properties": {
              "new_parent_id": {
                "type": "integer",
                "example": 1,
                "description": "The ID of the new target parent Menu Item."
              },
              "new_position_idx": {
                "type": "integer",
                "example": 1,
                "description": "The new index position of the Menu Item within its parent"
              }
            }
          }
        },
        "required": [
          "menu_item"
        ],
        "title": "Reposition a Menu Item",
        "x-internal": false
      },
      "create_option_type_params": {
        "type": "object",
        "properties": {
          "option_type": {
            "type": "object",
            "required": [
              "name",
              "presentation"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "color"
              },
              "presentation": {
                "type": "string",
                "example": "Color"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "option_type"
        ],
        "x-internal": false
      },
      "update_option_type_params": {
        "type": "object",
        "properties": {
          "option_type": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "color"
              },
              "presentation": {
                "type": "string",
                "example": "Color"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "option_type"
        ],
        "x-internal": false
      },
      "create_option_value_params": {
        "type": "object",
        "properties": {
          "option_value": {
            "type": "object",
            "required": [
              "name",
              "presentation"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "red"
              },
              "presentation": {
                "type": "string",
                "example": "Red"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "option_value"
        ],
        "x-internal": false
      },
      "update_option_value_params": {
        "type": "object",
        "properties": {
          "option_value": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "red"
              },
              "presentation": {
                "type": "string",
                "example": "Red"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "option_value"
        ],
        "x-internal": false
      },
      "create_order_params": {
        "type": "object",
        "properties": {
          "order": {
            "type": "object",
            "properties": {
              "item_total": {
                "type": "number",
                "example": 170.9
              },
              "total": {
                "type": "number",
                "example": 190.9
              },
              "state": {
                "type": "string",
                "example": "complete",
                "enum": [
                  "cart",
                  "address",
                  "delivery",
                  "payment",
                  "confirm",
                  "complete",
                  "canceled"
                ]
              },
              "adjustment_total": {
                "type": "number",
                "example": 20
              },
              "user_id": {
                "type": "string",
                "example": "1"
              },
              "completed_at": {
                "type": "string",
                "example": "2022-11-08 19:33:50 UTC"
              },
              "bill_address_id": {
                "type": "string",
                "example": "1"
              },
              "ship_address_id": {
                "type": "string",
                "example": "1"
              },
              "payment_total": {
                "type": "number",
                "example": 190.9
              },
              "shipment_state": {
                "type": "string",
                "example": "shipped",
                "enum": [
                  "backorder",
                  "canceled",
                  "partial",
                  "pending",
                  "ready",
                  "shipped"
                ]
              },
              "payment_state": {
                "type": "string",
                "example": "paid",
                "enum": [
                  "balance_due",
                  "credit_owed",
                  "failed",
                  "paid",
                  "void"
                ]
              },
              "email": {
                "type": "string",
                "example": "hi@getvendo.com"
              },
              "special_instructions": {
                "type": "string",
                "example": "I need it ASAP!"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "last_ip_address": {
                "type": "string",
                "example": "127.0.0.1"
              },
              "created_by_id": {
                "type": "string",
                "example": "1"
              },
              "shipment_total": {
                "type": "number",
                "example": 10
              },
              "additional_tax_total": {
                "type": "number",
                "example": 10
              },
              "promo_total": {
                "type": "number",
                "example": 0
              },
              "channel": {
                "type": "string",
                "example": "online"
              },
              "included_tax_total": {
                "type": "number",
                "example": 0
              },
              "item_count": {
                "type": "integer",
                "example": 2
              },
              "approver_id": {
                "type": "string"
              },
              "approved_at": {
                "type": "string",
                "example": "2022-11-08 19:33:50 UTC"
              },
              "confirmation_delivered": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "considered_risky": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "canceled_at": {
                "type": "string"
              },
              "canceler_id": {
                "type": "string"
              },
              "taxable_adjustment_total": {
                "type": "number",
                "example": 170.9
              },
              "non_taxable_adjustment_total": {
                "type": "number",
                "example": 10
              },
              "store_owner_notification_delivered": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "bill_address_attributes": {
                "$ref": "#/components/schemas/update_address_params"
              },
              "ship_address_attributes": {
                "$ref": "#/components/schemas/update_address_params"
              },
              "line_items_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/update_line_item_params"
                }
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "order"
        ],
        "x-internal": false
      },
      "update_order_params": {
        "type": "object",
        "properties": {
          "order": {
            "type": "object",
            "properties": {
              "item_total": {
                "type": "number",
                "example": 170.9
              },
              "total": {
                "type": "number",
                "example": 190.9
              },
              "state": {
                "type": "string",
                "example": "complete",
                "enum": [
                  "cart",
                  "address",
                  "delivery",
                  "payment",
                  "confirm",
                  "complete",
                  "canceled"
                ]
              },
              "adjustment_total": {
                "type": "number",
                "example": 20
              },
              "user_id": {
                "type": "string",
                "example": "1"
              },
              "completed_at": {
                "type": "string",
                "example": "2022-11-08 19:33:50 UTC"
              },
              "bill_address_id": {
                "type": "string",
                "example": "1"
              },
              "ship_address_id": {
                "type": "string",
                "example": "1"
              },
              "payment_total": {
                "type": "number",
                "example": 190.9
              },
              "shipment_state": {
                "type": "string",
                "example": "shipped",
                "enum": [
                  "backorder",
                  "canceled",
                  "partial",
                  "pending",
                  "ready",
                  "shipped"
                ]
              },
              "payment_state": {
                "type": "string",
                "example": "paid",
                "enum": [
                  "balance_due",
                  "credit_owed",
                  "failed",
                  "paid",
                  "void"
                ]
              },
              "email": {
                "type": "string",
                "example": "hi@getvendo.com"
              },
              "special_instructions": {
                "type": "string",
                "example": "I need it ASAP!"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "last_ip_address": {
                "type": "string",
                "example": "127.0.0.1"
              },
              "created_by_id": {
                "type": "string",
                "example": "1"
              },
              "shipment_total": {
                "type": "number",
                "example": 10
              },
              "additional_tax_total": {
                "type": "number",
                "example": 10
              },
              "promo_total": {
                "type": "number",
                "example": 0
              },
              "channel": {
                "type": "string",
                "example": "online"
              },
              "included_tax_total": {
                "type": "number",
                "example": 0
              },
              "item_count": {
                "type": "integer",
                "example": 2
              },
              "approver_id": {
                "type": "string"
              },
              "approved_at": {
                "type": "string",
                "example": "2022-11-08 19:33:50 UTC"
              },
              "confirmation_delivered": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "considered_risky": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "canceled_at": {
                "type": "string"
              },
              "canceler_id": {
                "type": "string"
              },
              "taxable_adjustment_total": {
                "type": "number",
                "example": 170.9
              },
              "non_taxable_adjustment_total": {
                "type": "number",
                "example": 10
              },
              "store_owner_notification_delivered": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "bill_address_attributes": {
                "$ref": "#/components/schemas/update_address_params"
              },
              "ship_address_attributes": {
                "$ref": "#/components/schemas/update_address_params"
              },
              "line_items_attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/update_line_item_params"
                }
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "order"
        ],
        "x-internal": false
      },
      "create_payment_method_params": {
        "type": "object",
        "properties": {
          "payment_method": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Test Payment Method"
              },
              "active": {
                "type": "boolean"
              },
              "auto_capture": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "example": "This is a test payment method"
              },
              "type": {
                "type": "string",
                "example": "Spree::Gateway::Bogus",
                "enum": [
                  "Spree::Gateway::Bogus",
                  "Spree::PaymentMethod::Check"
                ]
              },
              "display_on": {
                "type": "string",
                "example": "both",
                "enum": [
                  "both",
                  "back_end",
                  "front_end"
                ]
              },
              "store_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "payment_method"
        ],
        "x-internal": false
      },
      "update_payment_method_params": {
        "type": "object",
        "properties": {
          "payment_method": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Test Payment Method"
              },
              "active": {
                "type": "boolean"
              },
              "auto_capture": {
                "type": "boolean"
              },
              "description": {
                "type": "string",
                "example": "This is a test payment method"
              },
              "type": {
                "type": "string",
                "example": "Spree::Gateway::Bogus",
                "enum": [
                  "Spree::Gateway::Bogus",
                  "Spree::PaymentMethod::Check"
                ]
              },
              "display_on": {
                "type": "string",
                "example": "both",
                "enum": [
                  "both",
                  "back_end",
                  "front_end"
                ]
              },
              "store_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "payment_method"
        ],
        "x-internal": false,
        "title": "Update Payment Method"
      },
      "update_payment_method_params_bogus_gateway": {
        "type": "object",
        "properties": {
          "payment_method": {
            "type": "object",
            "properties": {
              "preferred_dummy_key": {
                "type": "string",
                "example": "UPDATED-DUMMY-KEY-123"
              },
              "preferred_server": {
                "type": "string",
                "example": "production"
              },
              "preferred_test_mode": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "payment_method"
        ],
        "x-internal": false,
        "title": "Update Bogus Gateway"
      },
      "create_product_params": {
        "type": "object",
        "properties": {
          "product": {
            "type": "object",
            "required": [
              "name",
              "price",
              "shipping_category_id"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "available_on": {
                "type": "string"
              },
              "discontinue_on": {
                "type": "string"
              },
              "permalink": {
                "type": "string"
              },
              "meta_description": {
                "type": "string"
              },
              "meta_keywords": {
                "type": "string"
              },
              "price": {
                "type": "string"
              },
              "sku": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string"
              },
              "prototype_id": {
                "type": "string"
              },
              "option_values_hash": {
                "type": "string"
              },
              "weight": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "width": {
                "type": "string"
              },
              "depth": {
                "type": "string"
              },
              "shipping_category_id": {
                "type": "string"
              },
              "tax_category_id": {
                "type": "string"
              },
              "cost_currency": {
                "type": "string"
              },
              "cost_price": {
                "type": "string"
              },
              "compare_at_price": {
                "type": "string"
              },
              "option_type_ids": {
                "type": "string"
              },
              "taxon_ids": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "product"
        ],
        "x-internal": false
      },
      "update_product_params": {
        "type": "object",
        "properties": {
          "product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "available_on": {
                "type": "string"
              },
              "discontinue_on": {
                "type": "string"
              },
              "permalink": {
                "type": "string"
              },
              "meta_description": {
                "type": "string"
              },
              "meta_keywords": {
                "type": "string"
              },
              "price": {
                "type": "string"
              },
              "sku": {
                "type": "string"
              },
              "deleted_at": {
                "type": "string"
              },
              "prototype_id": {
                "type": "string"
              },
              "option_values_hash": {
                "type": "string"
              },
              "weight": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "width": {
                "type": "string"
              },
              "depth": {
                "type": "string"
              },
              "shipping_category_id": {
                "type": "string"
              },
              "tax_category_id": {
                "type": "string"
              },
              "cost_currency": {
                "type": "string"
              },
              "cost_price": {
                "type": "string"
              },
              "compare_at_price": {
                "type": "string"
              },
              "option_type_ids": {
                "type": "string"
              },
              "taxon_ids": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "product"
        ],
        "x-internal": false
      },
      "create_promotion_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Promotions Used in 2021",
                "description": "Give the promotion a name."
              },
              "code": {
                "type": "string",
                "example": "BLK-FRI",
                "nullable": true,
                "description": "Set the promotion code. Promotions without a code are automatically applied if the order meets the Promotion Rule requirements."
              },
              "description": {
                "type": "string",
                "example": "Save today with discount code XYZ at checkout.",
                "nullable": true,
                "description": "Give the promotion a description."
              },
              "usage_limit": {
                "type": "integer",
                "example": 100,
                "nullable": true,
                "description": "If you wish you can set a usage limit for this promotion."
              },
              "advertise": {
                "type": "boolean"
              },
              "starts_at": {
                "type": "string",
                "nullable": true,
                "description": "Set a date and time that this promotion begins."
              },
              "ends_at": {
                "type": "string",
                "nullable": true,
                "description": "Set a date and time that this promotion ends."
              },
              "store_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Create a Promotion",
        "x-internal": false
      },
      "update_promotion_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Promotions Used in 2021",
                "description": "Change the promotion a name."
              },
              "code": {
                "type": "string",
                "example": "CYB-MON",
                "nullable": true,
                "description": "Change or remove the promotion code. Promotions without a code are automatically applied if the order meets the Promotion Rule requirements."
              },
              "description": {
                "type": "string",
                "example": "Save today with discount code XYZ at checkout.",
                "nullable": true,
                "description": "Update the promotion a description."
              },
              "usage_limit": {
                "type": "integer",
                "example": 100,
                "nullable": true,
                "description": "If you wish you can set a usage limit for this promotion."
              },
              "advertise": {
                "type": "boolean"
              },
              "starts_at": {
                "type": "string",
                "nullable": true,
                "description": "Set a date and time that this promotion begins."
              },
              "ends_at": {
                "type": "string",
                "nullable": true,
                "description": "Set a date and time that this promotion ends."
              },
              "store_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Update a Promotion",
        "x-internal": false
      },
      "update_promotion_add_rule_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_rules_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Spree::Promotion::Rules::Country",
                          "enum": [
                            "Spree::Promotion::Rules::Country",
                            "Spree::Promotion::Rules::ItemTotal",
                            "Spree::Promotion::Rules::Product",
                            "Spree::Promotion::Rules::User",
                            "Spree::Promotion::Rules::FirstOrder",
                            "Spree::Promotion::Rules::UserLoggedIn",
                            "Spree::Promotion::Rules::OneUsePerUser",
                            "Spree::Promotion::Rules::Taxon",
                            "Spree::Promotion::Rules::OptionValue"
                          ],
                          "description": "Set the Promotion Rule type."
                        },
                        "preferred_country_id": {
                          "type": "integer",
                          "example": 122,
                          "description": "Each rule type has its own preferred attributes. In this example we are setting the ID of the Country this rule applies to. To learn more about Spree preferences visit TODO: [LINK]."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Add a Rule to a Promotion",
        "x-internal": false
      },
      "update_promotion_update_rule_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_rules_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "22",
                          "description": "To update an existing Promotion Rule, you are required to pass the ID of the rule you are updating."
                        },
                        "type": {
                          "type": "string",
                          "example": "Spree::Promotion::Rules::Country",
                          "enum": [
                            "Spree::Promotion::Rules::Country",
                            "Spree::Promotion::Rules::ItemTotal",
                            "Spree::Promotion::Rules::Product",
                            "Spree::Promotion::Rules::User",
                            "Spree::Promotion::Rules::FirstOrder",
                            "Spree::Promotion::Rules::UserLoggedIn",
                            "Spree::Promotion::Rules::OneUsePerUser",
                            "Spree::Promotion::Rules::Taxon",
                            "Spree::Promotion::Rules::OptionValue"
                          ],
                          "description": "Set the Promotion Rule type."
                        },
                        "preferred_country_id": {
                          "type": "integer",
                          "example": 143,
                          "description": "Each rule type has its own preferred attributes. In this example we are changing the ID of the Country this rule applies to. To learn more about Spree preferences visit TODO: [LINK]."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Update an existing Rule",
        "x-internal": false
      },
      "update_promotion_add_action_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_actions_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "Spree::Promotion::Actions::CreateAdjustment",
                          "enum": [
                            "Spree::Promotion::Actions::CreateAdjustment",
                            "Spree::Promotion::Actions::CreateItemAdjustments",
                            "Spree::Promotion::Actions::FreeShipping",
                            "Spree::Promotion::Actions::CreateLineItems"
                          ],
                          "description": "Set the Promotion Action Type."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Add an Action to a Promotion",
        "x-internal": false
      },
      "update_promotion_action_calculator_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_actions_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "22",
                          "description": "To update an existing Promotion Action, you are required to pass the ID of the action you wish to update."
                        },
                        "calculator_attributes": {
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "19",
                              "description": "To update an existing Action Calculator, you are required to pass the ID of the calculator."
                            },
                            "type": {
                              "type": "string",
                              "example": "Spree::Promotion::Actions::CreateAdjustment",
                              "enum": [
                                "Spree::Promotion::Actions::CreateAdjustment",
                                "Spree::Promotion::Actions::CreateItemAdjustments",
                                "Spree::Promotion::Actions::CreateLineItems",
                                "Spree::Promotion::Actions::FreeShipping"
                              ],
                              "description": "Set the Type of Promotion Action you wish to use."
                            },
                            "preferred_flat_percent": {
                              "type": "integer",
                              "example": 10,
                              "description": "In this example we are setting the preferred flat percentage to `10`."
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Update an Action Calculator",
        "x-internal": false
      },
      "update_promotion_change_calculator_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_actions_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "22",
                          "description": "To update an existing Promotion Action, you are required to pass the ID of the Promotion Action."
                        },
                        "calculator_attributes": {
                          "properties": {
                            "type": {
                              "type": "string",
                              "example": "Spree::Calculator::FlatPercentItemTotal",
                              "enum": [
                                "Spree::Calculator::FlatPercentItemTotal",
                                "Spree::Calculator::FlatRate",
                                "Spree::Calculator::FlexiRate",
                                "Spree::Calculator::TieredPercent",
                                "Spree::Calculator::TieredFlatRate",
                                "Spree::Calculator::PercentOnLineItem"
                              ],
                              "description": "To set the Promotion Action Calculator pass the calculator type. Each Promotion action has certain Calculators available, to learn more visit TODO: [LINK]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Change an Action Calculator",
        "x-internal": false
      },
      "update_promotion_change_action_params": {
        "type": "object",
        "properties": {
          "promotion": {
            "type": "object",
            "properties": {
              "promotion_actions_attributes": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "22",
                          "description": "To update an existing Promotion Action, you are required to pass the ID of the Promotion Action."
                        },
                        "type": {
                          "type": "string",
                          "example": "Spree::Promotion::Actions::CreateAdjustment",
                          "enum": [
                            "Spree::Promotion::Actions::CreateAdjustment",
                            "Spree::Promotion::Actions::CreateItemAdjustments",
                            "Spree::Promotion::Actions::CreateLineItems",
                            "Spree::Promotion::Actions::FreeShipping"
                          ],
                          "description": "Set the Type of Promotion Action you wish to use."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "required": [
          "promotion"
        ],
        "title": "Change an Action Type",
        "x-internal": false
      },
      "create_promotion_action_params": {
        "type": "object",
        "properties": {
          "promotion_action": {
            "type": "object",
            "required": [
              "type",
              "promotion_id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "Spree::Promotion::Actions::CreateAdjustment",
                "enum": [
                  "Spree::Promotion::Actions::CreateAdjustment",
                  "Spree::Promotion::Actions::CreateItemAdjustments",
                  "Spree::Promotion::Actions::CreateLineItems",
                  "Spree::Promotion::Actions::FreeShipping"
                ],
                "description": "Set the Type of Promotion Action you wish to use."
              },
              "promotion_id": {
                "type": "string",
                "example": "22",
                "description": "Set the ID of the promotion this action belongs to."
              }
            }
          }
        },
        "required": [
          "promotion_action"
        ],
        "title": "Create a Promotion Action",
        "x-internal": false
      },
      "update_promotion_action_params": {
        "type": "object",
        "properties": {
          "promotion_action": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "Spree::Promotion::Actions::CreateAdjustment",
                "enum": [
                  "Spree::Promotion::Actions::CreateAdjustment",
                  "Spree::Promotion::Actions::CreateItemAdjustments",
                  "Spree::Promotion::Actions::CreateLineItems",
                  "Spree::Promotion::Actions::FreeShipping"
                ],
                "description": "Set the Type of Promotion Action you wish to use."
              }
            }
          }
        },
        "required": [
          "promotion_action"
        ],
        "title": "Create a Promotion Action",
        "x-internal": false
      },
      "create_promotion_category_params": {
        "type": "object",
        "properties": {
          "promotion_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Promotions Used in 2021",
                "description": "Give this Promotion Category a name."
              },
              "code": {
                "type": "string",
                "example": "2021-PROMOS",
                "nullable": true,
                "description": "Give this promotion category a code."
              }
            }
          }
        },
        "required": [
          "promotion_category"
        ],
        "x-internal": false
      },
      "update_promotion_category_params": {
        "type": "object",
        "properties": {
          "promotion_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Promotions Used in 2021",
                "description": "Update the name of this Promotion Category."
              },
              "code": {
                "type": "string",
                "example": "2021-PROMOS",
                "nullable": true,
                "description": "Change or remove the code for this Promotion Category."
              }
            }
          }
        },
        "required": [
          "promotion_category"
        ],
        "x-internal": false
      },
      "create_promotion_rule_params": {
        "type": "object",
        "properties": {
          "promotion_rule": {
            "type": "object",
            "required": [
              "type",
              "promotion_id"
            ],
            "properties": {
              "promotion_id": {
                "type": "string",
                "example": "22",
                "description": "Set the ID of the promotion this Promotion Rule belongs to."
              },
              "type": {
                "type": "string",
                "example": "Spree::Promotion::Rules::Country",
                "enum": [
                  "Spree::Promotion::Rules::Country",
                  "Spree::Promotion::Rules::ItemTotal",
                  "Spree::Promotion::Rules::Product",
                  "Spree::Promotion::Rules::User",
                  "Spree::Promotion::Rules::FirstOrder",
                  "Spree::Promotion::Rules::UserLoggedIn",
                  "Spree::Promotion::Rules::OneUsePerUser",
                  "Spree::Promotion::Rules::Taxon",
                  "Spree::Promotion::Rules::OptionValue"
                ],
                "description": "Set the Promotion Rule type."
              }
            }
          }
        },
        "required": [
          "promotion_rule"
        ],
        "title": "Create a Promotion Rule",
        "x-internal": false
      },
      "update_promotion_rule_params": {
        "type": "object",
        "properties": {
          "promotion_rule": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "Spree::Promotion::Rules::Country",
                "enum": [
                  "Spree::Promotion::Rules::Country",
                  "Spree::Promotion::Rules::ItemTotal",
                  "Spree::Promotion::Rules::Product",
                  "Spree::Promotion::Rules::User",
                  "Spree::Promotion::Rules::FirstOrder",
                  "Spree::Promotion::Rules::UserLoggedIn",
                  "Spree::Promotion::Rules::OneUsePerUser",
                  "Spree::Promotion::Rules::Taxon",
                  "Spree::Promotion::Rules::OptionValue"
                ],
                "description": "Set the Promotion Rule type."
              }
            }
          }
        },
        "required": [
          "promotion_rule"
        ],
        "title": "Create a Promotion Rule",
        "x-internal": false
      },
      "create_role_params": {
        "type": "object",
        "properties": {
          "role": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "vendor"
              }
            }
          }
        },
        "required": [
          "zone"
        ],
        "x-internal": false
      },
      "update_role_params": {
        "type": "object",
        "properties": {
          "role": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "vendor"
              }
            }
          }
        },
        "required": [
          "zone"
        ],
        "x-internal": false
      },
      "create_shipment_params": {
        "type": "object",
        "properties": {
          "shipment": {
            "type": "object",
            "required": [
              "stock_location_id",
              "order_id",
              "variant_id"
            ],
            "properties": {
              "stock_location_id": {
                "type": "string",
                "example": "101"
              },
              "order_id": {
                "type": "string",
                "example": "101"
              },
              "variant_id": {
                "type": "string",
                "example": "101"
              },
              "quantity": {
                "type": "integer",
                "example": 2
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "update_shipment_params": {
        "type": "object",
        "properties": {
          "shipment": {
            "type": "object",
            "properties": {
              "tracking": {
                "type": "string",
                "example": "MY-TRACKING-REF-12324"
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "add_item_shipment_params": {
        "type": "object",
        "properties": {
          "shipment": {
            "type": "object",
            "required": [
              "variant_id"
            ],
            "properties": {
              "variant_id": {
                "type": "string",
                "example": "101"
              },
              "quantity": {
                "type": "integer",
                "example": 2
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "remove_item_shipment_params": {
        "type": "object",
        "properties": {
          "shipment": {
            "type": "object",
            "required": [
              "variant_id"
            ],
            "properties": {
              "variant_id": {
                "type": "string",
                "example": "101"
              },
              "quantity": {
                "type": "integer",
                "example": 2
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "create_shipping_category_params": {
        "type": "object",
        "properties": {
          "shipping_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Another Category"
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "update_shipping_category_params": {
        "type": "object",
        "properties": {
          "shipping_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Another Category"
              }
            }
          }
        },
        "required": [
          "shipping_category"
        ],
        "x-internal": false
      },
      "create_shipping_method_params": {
        "type": "object",
        "properties": {
          "shipping_method": {
            "type": "object",
            "required": [
              "name",
              "display_on",
              "shipping_category_ids"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "DHL Express"
              },
              "admin_name": {
                "type": "string",
                "example": "DHL Area Code D"
              },
              "code": {
                "type": "string",
                "example": "DHL-A-D"
              },
              "tracking_url": {
                "type": "string",
                "example": "dhlexpress.com?tracking="
              },
              "display_on": {
                "type": "string",
                "example": "both",
                "enum": [
                  "both",
                  "back_end",
                  "front_end"
                ]
              },
              "tax_category_id": {
                "type": "string",
                "example": "1"
              },
              "shipping_category_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "calculator_attributes": {
                "$ref": "#/components/schemas/shipping_calculator_params"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "shipping_method"
        ],
        "x-internal": false
      },
      "update_shipping_method_params": {
        "type": "object",
        "properties": {
          "shipping_method": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "DHL Express"
              },
              "admin_name": {
                "type": "string",
                "example": "DHL Area Code D"
              },
              "code": {
                "type": "string",
                "example": "DHL-A-D"
              },
              "tracking_url": {
                "type": "string",
                "example": "dhlexpress.com?tracking="
              },
              "display_on": {
                "type": "string",
                "example": "both",
                "enum": [
                  "both",
                  "back_end",
                  "front_end"
                ]
              },
              "tax_category_id": {
                "type": "string",
                "example": "1"
              },
              "shipping_category_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "calculator_attributes": {
                "$ref": "#/components/schemas/shipping_calculator_params"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "shipping_method"
        ],
        "x-internal": false
      },
      "shipping_calculator_params": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Spree::Calculator::Shipping::FlatPercentItemTotal",
            "enum": [
              "Spree::Calculator::Shipping::DigitalDelivery",
              "Spree::Calculator::Shipping::FlatPercentItemTotal",
              "Spree::Calculator::Shipping::FlatRate",
              "Spree::Calculator::Shipping::FlexiRate",
              "Spree::Calculator::Shipping::PerItem",
              "Spree::Calculator::Shipping::PriceSack"
            ]
          }
        },
        "required": [
          "type"
        ],
        "x-internal": false
      },
      "create_stock_item_params": {
        "type": "object",
        "properties": {
          "stock_item": {
            "type": "object",
            "required": [
              "variant_id",
              "stock_location_id",
              "count_on_hand"
            ],
            "properties": {
              "variant_id": {
                "type": "string",
                "example": "2"
              },
              "stock_location_id": {
                "type": "string",
                "example": "2"
              },
              "count_on_hand": {
                "type": "number",
                "example": 200
              },
              "backorderable": {
                "type": "boolean",
                "example": true,
                "default": false
              }
            }
          }
        },
        "required": [
          "stock_item"
        ],
        "x-internal": false
      },
      "update_stock_item_params": {
        "type": "object",
        "properties": {
          "stock_item": {
            "type": "object",
            "required": [
              "variant_id",
              "stock_location_id",
              "count_on_hand"
            ],
            "properties": {
              "variant_id": {
                "type": "string",
                "example": "2"
              },
              "stock_location_id": {
                "type": "string",
                "example": "2"
              },
              "count_on_hand": {
                "type": "number",
                "example": 200
              },
              "backorderable": {
                "type": "boolean",
                "example": true,
                "default": false
              }
            }
          }
        },
        "required": [
          "stock_item"
        ],
        "x-internal": false
      },
      "create_stock_location_params": {
        "type": "object",
        "properties": {
          "stock_location": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Warehouse 3"
              },
              "default": {
                "type": "boolean"
              },
              "address1": {
                "type": "string",
                "example": "South St. 8"
              },
              "address2": {
                "type": "string",
                "example": "South St. 109"
              },
              "country_id": {
                "type": "string",
                "example": "2"
              },
              "state_id": {
                "type": "string",
                "example": "4"
              },
              "city": {
                "type": "string",
                "example": "Los Angeles"
              },
              "state_name": {
                "type": "string",
                "example": "California"
              },
              "zipcode": {
                "type": "string",
                "example": "90005"
              },
              "phone": {
                "type": "string",
                "example": "23333456"
              },
              "active": {
                "type": "boolean"
              },
              "backorderable_default": {
                "type": "boolean"
              },
              "propagate_all_variants": {
                "type": "boolean"
              },
              "admin_name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "stock_location"
        ],
        "x-internal": false
      },
      "update_stock_location_params": {
        "type": "object",
        "properties": {
          "stock_location": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Warehouse 3"
              },
              "default": {
                "type": "boolean"
              },
              "address1": {
                "type": "string",
                "example": "South St. 8"
              },
              "address2": {
                "type": "string",
                "example": "South St. 109"
              },
              "country_id": {
                "type": "string",
                "example": "2"
              },
              "state_id": {
                "type": "string",
                "example": "4"
              },
              "city": {
                "type": "string",
                "example": "Los Angeles"
              },
              "state_name": {
                "type": "string",
                "example": "California"
              },
              "zipcode": {
                "type": "string",
                "example": "90005"
              },
              "phone": {
                "type": "string",
                "example": "23333456"
              },
              "active": {
                "type": "boolean"
              },
              "backorderable_default": {
                "type": "boolean"
              },
              "propagate_all_variants": {
                "type": "boolean"
              },
              "admin_name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "stock_location"
        ],
        "x-internal": false
      },
      "create_store_credit_category_params": {
        "type": "object",
        "properties": {
          "store_credit_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "refunded"
              }
            }
          }
        },
        "required": [
          "store_credit_category"
        ],
        "x-internal": false
      },
      "update_store_credit_category_params": {
        "type": "object",
        "properties": {
          "store_credit_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "refunded"
              }
            }
          }
        },
        "required": [
          "store_credit_category"
        ],
        "x-internal": false
      },
      "create_store_credit_type_params": {
        "type": "object",
        "properties": {
          "store_credit_type": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "refunded"
              },
              "priority": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "store_credit_type"
        ],
        "x-internal": false
      },
      "update_store_credit_type_params": {
        "type": "object",
        "properties": {
          "store_credit_type": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "refunded"
              },
              "priority": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "store_credit_type"
        ],
        "x-internal": false
      },
      "create_store_credit_params": {
        "type": "object",
        "properties": {
          "store_credit": {
            "type": "object",
            "required": [
              "user_id",
              "category_id",
              "type_id",
              "created_by_id",
              "currency",
              "store_id",
              "amount"
            ],
            "properties": {
              "user_id": {
                "type": "string",
                "example": "2"
              },
              "category_id": {
                "type": "string",
                "example": "4"
              },
              "created_by_id": {
                "type": "string",
                "example": "5"
              },
              "amount": {
                "type": "number",
                "example": 25
              },
              "amount_used": {
                "type": "number",
                "example": 10
              },
              "memo": {
                "type": "string",
                "example": "This credit was given as a refund"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "amount_authorized": {
                "type": "number",
                "example": 15.5
              },
              "originator_id": {
                "type": "string",
                "example": "3"
              },
              "originator_type": {
                "type": "string",
                "example": "Refund"
              },
              "type_id": {
                "type": "string",
                "example": "1"
              },
              "store_id": {
                "type": "string",
                "example": "2"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "store_credit"
        ],
        "x-internal": false
      },
      "update_store_credit_params": {
        "type": "object",
        "properties": {
          "store_credit": {
            "type": "object",
            "required": [
              "user_id",
              "category_id",
              "type_id",
              "created_by_id",
              "currency",
              "store_id",
              "amount"
            ],
            "properties": {
              "user_id": {
                "type": "string",
                "example": "2"
              },
              "category_id": {
                "type": "string",
                "example": "4"
              },
              "created_by_id": {
                "type": "string",
                "example": "5"
              },
              "amount": {
                "type": "number",
                "example": 25
              },
              "amount_used": {
                "type": "number",
                "example": 10
              },
              "memo": {
                "type": "string",
                "example": "This credit was given as a refund"
              },
              "currency": {
                "type": "string",
                "example": "USD"
              },
              "amount_authorized": {
                "type": "number",
                "example": 15.5
              },
              "originator_id": {
                "type": "string",
                "example": "3"
              },
              "originator_type": {
                "type": "string",
                "example": "Refund"
              },
              "type_id": {
                "type": "string",
                "example": "1"
              },
              "store_id": {
                "type": "string",
                "example": "2"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "store_credit"
        ],
        "x-internal": false
      },
      "create_tax_category_params": {
        "type": "object",
        "properties": {
          "tax_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Clothing"
              },
              "is_default": {
                "type": "boolean",
                "example": true
              },
              "tax_code": {
                "type": "string",
                "example": "1257L"
              },
              "description": {
                "type": "string",
                "example": "Men's, women's and children's branded clothing"
              }
            }
          }
        },
        "required": [
          "tax_category"
        ],
        "x-internal": false
      },
      "update_tax_category_params": {
        "type": "object",
        "properties": {
          "tax_category": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Clothing"
              },
              "is_default": {
                "type": "boolean",
                "example": true
              },
              "tax_code": {
                "type": "string",
                "example": "1257L"
              },
              "description": {
                "type": "string",
                "example": "Men's, women's and children's branded clothing"
              }
            }
          }
        },
        "required": [
          "tax_category"
        ],
        "x-internal": false
      },
      "create_tax_rate_params": {
        "type": "object",
        "properties": {
          "tax_rate": {
            "type": "object",
            "required": [
              "amount",
              "calculator_attributes",
              "tax_category_id"
            ],
            "properties": {
              "amount": {
                "type": "number",
                "example": 0.05
              },
              "zone_id": {
                "type": "string",
                "example": "2"
              },
              "tax_category_id": {
                "type": "string",
                "example": "1"
              },
              "included_in_price": {
                "type": "boolean",
                "example": true
              },
              "name": {
                "type": "string",
                "example": "California"
              },
              "show_rate_in_label": {
                "type": "boolean",
                "example": false
              },
              "calculator_attributes": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "Spree::Calculator::FlatRate"
                  },
                  "preferences": {
                    "type": "object",
                    "example": {
                      "amount": 0,
                      "currency": "USD"
                    },
                    "properties": {
                      "amount": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "tax_rate"
        ],
        "x-internal": false
      },
      "update_tax_rate_params": {
        "type": "object",
        "properties": {
          "tax_rate": {
            "type": "object",
            "required": [
              "amount",
              "calculator_attributes",
              "tax_category_id"
            ],
            "properties": {
              "amount": {
                "type": "number",
                "example": 0.05
              },
              "zone_id": {
                "type": "string",
                "example": "2"
              },
              "tax_category_id": {
                "type": "string",
                "example": "1"
              },
              "included_in_price": {
                "type": "boolean",
                "example": true
              },
              "name": {
                "type": "string",
                "example": "California"
              },
              "show_rate_in_label": {
                "type": "boolean",
                "example": false
              },
              "calculator_attributes": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "example": "Spree::Calculator::FlatRate"
                  },
                  "preferences": {
                    "type": "object",
                    "example": {
                      "amount": 0,
                      "currency": "USD"
                    },
                    "properties": {
                      "amount": {
                        "type": "string"
                      },
                      "currency": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "tax_rate"
        ],
        "x-internal": false
      },
      "create_taxon_params": {
        "type": "object",
        "properties": {
          "taxon": {
            "type": "object",
            "required": [
              "name",
              "taxonomy_id"
            ],
            "properties": {
              "taxonomy_id": {
                "type": "string"
              },
              "parent_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "ability_to_recycle": "90%"
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "profitability": 2
                }
              }
            }
          }
        },
        "required": [
          "taxon"
        ],
        "x-internal": false
      },
      "update_taxon_params": {
        "type": "object",
        "properties": {
          "taxon": {
            "type": "object",
            "properties": {
              "taxonomy_id": {
                "type": "string"
              },
              "parent_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "taxon"
        ],
        "x-internal": false
      },
      "taxon_reposition": {
        "type": "object",
        "properties": {
          "taxon": {
            "type": "object",
            "required": [
              "new_parent_id",
              "new_position_idx"
            ],
            "properties": {
              "new_parent_id": {
                "type": "integer",
                "example": 1,
                "description": "The ID of the new target parent Taxon."
              },
              "new_position_idx": {
                "type": "integer",
                "example": 1,
                "description": "The new index position of the Taxon within the parent Taxon."
              }
            }
          }
        },
        "required": [
          "taxon"
        ],
        "title": "Reposition a Taxon",
        "x-internal": false
      },
      "create_taxonomy_params": {
        "type": "object",
        "properties": {
          "taxonomy": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this Taxonomy to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "ability_to_recycle": "90%"
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "profitability": 2
                }
              }
            }
          }
        },
        "required": [
          "taxonomy"
        ],
        "x-internal": false
      },
      "update_taxonomy_params": {
        "type": "object",
        "properties": {
          "taxonomy": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "position": {
                "type": "integer",
                "example": 2,
                "description": "Pass the position that you want this Taxonomy to appear in. (The list is not zero indexed, so the first item is position: `1`)"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "ability_to_recycle": "90%"
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                },
                "example": {
                  "profitability": 2
                }
              }
            }
          }
        },
        "required": [
          "taxonomy"
        ],
        "x-internal": false
      },
      "create_user_params": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "required": [
              "email",
              "password",
              "password_confirmation"
            ],
            "properties": {
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "password_confirmation": {
                "type": "string"
              },
              "selected_locale": {
                "type": "string"
              },
              "ship_address_id": {
                "type": "string"
              },
              "bill_address_id": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "user"
        ],
        "x-internal": false
      },
      "update_user_params": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "password_confirmation": {
                "type": "string"
              },
              "selected_locale": {
                "type": "string"
              },
              "ship_address_id": {
                "type": "string"
              },
              "bill_address_id": {
                "type": "string"
              },
              "public_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              },
              "private_metadata": {
                "type": "object",
                "properties": {
                  "some_data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "required": [
          "user"
        ],
        "x-internal": false
      },
      "create_webhook_subscriber_params": {
        "type": "object",
        "properties": {
          "subscriber": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "active": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "subscriptions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "example": "https://www.url.com/"
              }
            }
          }
        },
        "required": [
          "subscriber"
        ],
        "x-internal": false
      },
      "update_webhook_subscriber_params": {
        "type": "object",
        "properties": {
          "subscriber": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "active": {
                "type": "boolean",
                "example": true,
                "default": false
              },
              "subscriptions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string",
                "example": "https://www.url.com/"
              }
            }
          }
        },
        "required": [
          "subscriber"
        ],
        "x-internal": false
      },
      "create_wishlist_params": {
        "type": "object",
        "properties": {
          "wishlist": {
            "type": "object",
            "required": [
              "name",
              "user_id"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "is_default": {
                "type": "boolean"
              },
              "is_private": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "wishlist"
        ],
        "x-internal": false
      },
      "update_wishlist_params": {
        "type": "object",
        "properties": {
          "wishlist": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "user_id": {
                "type": "string"
              },
              "is_default": {
                "type": "boolean"
              },
              "is_private": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "wishlist"
        ],
        "x-internal": false
      },
      "create_wished_item_params": {
        "type": "object",
        "properties": {
          "wished_item": {
            "type": "object",
            "required": [
              "wishlist_id",
              "variant_id",
              "quantity"
            ],
            "properties": {
              "wishlist_id": {
                "type": "string"
              },
              "variant_id": {
                "type": "string"
              },
              "quantity": {
                "type": "integer",
                "description": "Must be an integer greater than 0"
              }
            }
          }
        },
        "required": [
          "wished_item"
        ],
        "x-internal": false
      },
      "update_wished_item_params": {
        "type": "object",
        "properties": {
          "wished_item": {
            "type": "object",
            "required": [
              "wishlist_id",
              "variant_id",
              "quantity"
            ],
            "properties": {
              "wishlist_id": {
                "type": "string"
              },
              "variant_id": {
                "type": "string"
              },
              "quantity": {
                "type": "integer",
                "description": "Must be an integer greater than 0"
              }
            }
          }
        },
        "required": [
          "wished_item"
        ],
        "x-internal": false
      },
      "create_zone_params": {
        "type": "object",
        "properties": {
          "zone": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "EU"
              },
              "description": {
                "type": "string",
                "example": "All countries in the EU"
              },
              "default_tax": {
                "type": "boolean"
              },
              "kind": {
                "type": "string",
                "example": "state",
                "enum": [
                  "state",
                  "country"
                ]
              }
            }
          }
        },
        "required": [
          "zone"
        ],
        "x-internal": false
      },
      "update_zone_params": {
        "type": "object",
        "properties": {
          "address": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "EU"
              },
              "description": {
                "type": "string",
                "example": "All countries in the EU"
              },
              "default_tax": {
                "type": "boolean"
              },
              "kind": {
                "type": "string",
                "example": "state",
                "enum": [
                  "state",
                  "country"
                ]
              }
            }
          }
        },
        "required": [
          "zone"
        ],
        "x-internal": false
      },
      "amount_param": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          }
        },
        "x-internal": false
      },
      "coupon_code_param": {
        "type": "object",
        "properties": {
          "coupon_code": {
            "type": "string"
          }
        },
        "x-internal": false
      },
      "resources_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/resource_properties"
                }
              ]
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "total_count": {
                "type": "integer"
              },
              "total_pages": {
                "type": "integer"
              }
            },
            "required": [
              "count",
              "total_count",
              "total_pages"
            ]
          },
          "links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              },
              "next": {
                "type": "string"
              },
              "prev": {
                "type": "string"
              },
              "last": {
                "type": "string"
              },
              "first": {
                "type": "string"
              }
            },
            "required": [
              "self",
              "next",
              "prev",
              "last",
              "first"
            ]
          }
        },
        "required": [
          "data",
          "meta",
          "links"
        ],
        "x-internal": false
      },
      "resource_properties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object"
          },
          "relationships": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "x-internal": false
      },
      "resource": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/resource_properties"
          }
        },
        "required": [
          "data"
        ],
        "x-internal": false
      },
      "error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "x-internal": false
      },
      "validation_errors": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errors": {
            "type": "object"
          }
        },
        "required": [
          "error",
          "errors"
        ],
        "x-internal": false
      }
    },
    "parameters": {
      "Token": {
        "name": "token",
        "in": "path",
        "required": true,
        "description": "The token is a unique string used to identify the target resource.",
        "schema": {
          "type": "string"
        },
        "example": "vmJtMiMozBdFtn1VkdJ8dYen"
      },
      "ItemId": {
        "name": "item_id",
        "in": "path",
        "required": true,
        "description": "The wished item id",
        "schema": {
          "type": "string"
        },
        "example": "3"
      },
      "CmsPageSlug": {
        "name": "cms_page_slug",
        "in": "path",
        "required": true,
        "description": "CMS Page Slug",
        "schema": {
          "type": "string"
        },
        "example": "about-us"
      },
      "CmsPageIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Pass `cms_sections` as an include value to fetch the CMS Sections associated with each CMS Page. If you need to fetch the CMS Sections Linked Resource, you can pass `cms_sections.linked_resource`.",
        "schema": {
          "type": "string",
          "example": "cms_sections.linked_resource"
        }
      },
      "CreditCardIncludeParam": {
        "name": "include",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "payment_method",
        "description": "Specify the related resources you would like to receive in the response body. [More Information](https://jsonapi.org/format/#fetching-includes)."
      },
      "MenuIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Pass `menu_items` as an include value to fetch the Menu Items associated with each Menu. If you need to fetch the Menu Item Linked Resource, you can pass `menu_items.linked_resource`, additionally, you can pass `menu_items.icon` to fetch the associated Icon for each menu Item",
        "schema": {
          "type": "string",
          "example": "menu_items.linked_resource"
        }
      },
      "LocaleParam": {
        "name": "locale",
        "in": "query",
        "description": "Pass `locale` as value to fetch the resources with the matching locale for example `?locale=fr`.",
        "schema": {
          "type": "string",
          "example": "en"
        }
      },
      "ProductSlug": {
        "name": "product_slug",
        "in": "path",
        "required": true,
        "description": "Product Slug",
        "schema": {
          "type": "string"
        },
        "example": "knitted-high-neck-sweater"
      },
      "TaxonPermalink": {
        "name": "taxon_permalink",
        "in": "path",
        "required": true,
        "description": "Specify the taxon using the permalink or taxon ID.",
        "schema": {
          "type": "string"
        },
        "example": "categories/women"
      },
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Number of requested page when paginating collection",
        "schema": {
          "type": "integer"
        },
        "example": 1
      },
      "PerPageParam": {
        "name": "per_page",
        "in": "query",
        "description": "Number of requested records per page when paginating collection",
        "schema": {
          "type": "integer"
        },
        "example": 25
      },
      "OrderParam": {
        "name": "order_number",
        "in": "path",
        "required": true,
        "description": "The required **{order_number}** value can be found in the cart response body, identified as the `number` attribute.",
        "schema": {
          "type": "string",
          "example": "R653163382"
        },
        "example": "R653163382"
      },
      "CartIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Specify the related resources you would like to receive in the response body. [More Information](https://jsonapi.org/format/#fetching-includes).",
        "example": "line_items,variants,variants.images,billing_address,shipping_address,user,payments,shipments,promotions"
      },
      "CartCurrencyParam": {
        "name": "currency",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Must be specified when is different than current store default currency.",
        "example": "USD"
      },
      "ProductIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Specify what related resources (relationships) you would like to receive in the response body. Eg.\n\n```\ndefault_variant,variants,option_types,product_properties,taxons,images,primary_variant\n```\n\n[More information](https://jsonapi.org/format/#fetching-includes)",
        "example": "default_variant,variants,option_types,product_properties,taxons,images,primary_variant"
      },
      "StoreIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Specify what related resources (relationships) you would like to receive in the response body. Eg.\n\n```\ndefault_country,menus,cms_pages\n```\n\n[More information](https://jsonapi.org/format/#fetching-includes)",
        "example": "default_country,menus,cms_pages"
      },
      "ProductImageTransformationSizeParam": {
        "in": "query",
        "name": "image_transformation[size]",
        "schema": {
          "type": "string"
        },
        "example": "100x50",
        "description": "Specifies dimensions for included images at transformed_url attribute."
      },
      "ProductImageTransformationQualityParam": {
        "in": "query",
        "name": "image_transformation[quality]",
        "schema": {
          "type": "string"
        },
        "example": "70",
        "description": "Specifies quality for included images at transformed_url attribute"
      },
      "TaxonIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Specify the related resources you would like to receive in the response body. [More Information](https://jsonapi.org/format/#fetching-includes).",
        "example": "parent,taxonomy,children,image,products"
      },
      "IsoOrIso3": {
        "name": "iso",
        "in": "path",
        "required": true,
        "description": "Provide a Country ISO `US` or ISO3 `USA` code.",
        "schema": {
          "type": "string",
          "example": "GB"
        }
      },
      "CountryIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Specify the related resources you would like to receive in the response body. [More Information](https://jsonapi.org/format/#fetching-includes).",
        "example": "states"
      },
      "AccountIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Pass `default_billing_address` and/or `default_shipping_address` as value to include selected addresses information",
        "example": "default_billing_address,default_shipping_address"
      },
      "WishlistIncludeParam": {
        "name": "include",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "wished_items.variant",
        "description": "Specify the related resources you would like to receive in the `included` section of the response body. You can also retrieve related resources of included resources by using the dot notation, eg. `wished_items.variant`. [More information](https://jsonapi.org/format/#fetching-includes)."
      },
      "WishlistIsVariantIncludedParam": {
        "name": "is_variant_included",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "150",
        "description": "Check for the presence of a variant in a wishlist by passing the variant ID, if the variant is present in the wishlist, the `variant_included` attribute will return `true`"
      },
      "FilterByIds": {
        "in": "query",
        "name": "filter[ids]",
        "schema": {
          "type": "string"
        },
        "example": "1,2,3",
        "description": "Fetch only resources with corresponding IDs"
      },
      "FilterBySKUs": {
        "in": "query",
        "name": "filter[skus]",
        "schema": {
          "type": "string"
        },
        "example": "SKU-123,SKU-345",
        "description": "Fetch only resources with corresponding SKUs"
      },
      "FilterByName": {
        "in": "query",
        "name": "filter[name]",
        "schema": {
          "type": "string"
        },
        "example": "rails",
        "description": "Find resources with matching name (supports wild-card, partial-word match search)"
      },
      "FilterByTitle": {
        "name": "filter[title]",
        "in": "query",
        "description": "Fetch only resources with correspondingTitle",
        "schema": {
          "type": "string",
          "example": "About Us"
        }
      },
      "FilterByType": {
        "name": "filter[type]",
        "in": "query",
        "description": "Fetch only resources with corresponding Type",
        "schema": {
          "type": "string",
          "example": "home"
        }
      },
      "FilterByLocation": {
        "name": "filter[location]",
        "in": "query",
        "description": "Fetch only resources with corresponding Location",
        "schema": {
          "type": "string",
          "example": "header"
        }
      },
      "SparseFieldsAddress": {
        "in": "query",
        "name": "fields[address]",
        "example": "firstname,lastname,country_name",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        }
      },
      "SparseFieldsUser": {
        "name": "fields[user]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "email,completed_orders"
      },
      "SparseFieldsCart": {
        "name": "fields[cart]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "token,currency,number"
      },
      "SparseFieldsCountry": {
        "name": "fields[country]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "iso_name,name,states_required"
      },
      "SparseFieldsCreditCard": {
        "name": "fields[credit_card]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "cc_type,last_digits,month,year,name,default"
      },
      "SparseFieldsProduct": {
        "name": "fields[product]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "price,description,name"
      },
      "SparseFieldsStore": {
        "name": "fields[store]",
        "in": "query",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        },
        "example": "name,url,supported_locales"
      },
      "SparseFieldsShippingRate": {
        "in": "query",
        "name": "fields[shipping_rate]",
        "example": "name,selected,final_price,display_final_price,cost,display_cost,tax_amount,display_tax_amount,shipping_method_id",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        }
      },
      "SparseFieldsTaxon": {
        "in": "query",
        "name": "fields[taxon]",
        "example": "name,pretty_name,permalink",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        }
      },
      "SparseFieldsWishlist": {
        "in": "query",
        "name": "fields[wishlist]",
        "example": "name,token,is_default,is_private,variant_included",
        "description": "Specify the fields you would like returned in the response body. [More information](https://jsonapi.org/format/#fetching-sparse-fieldsets).",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "404NotFound": {
        "description": "404 Not Found - Resource not found.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "The resource you were looking for could not be found.",
                  "default": "The resource you were looking for could not be found."
                }
              }
            }
          }
        }
      },
      "403Forbidden": {
        "description": "403 Forbidden - You are not authorized to access this page.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "properties": {
                "error": {
                  "type": "string",
                  "example": "You are not authorized to access this page.",
                  "default": "You are not authorized to access this page."
                }
              }
            }
          }
        }
      },
      "422UnprocessableEntity": {
        "description": "422 Unprocessable Entity",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Cart": {
        "description": "200 Success - Returns the `cart` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Cart"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "CartList": {
        "description": "200 Success - Returns an array of `cart` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cart"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "User": {
        "description": "200 Success - Returns the `user` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/User"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Address"
                      }
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "AddressList": {
        "description": "200 Success - Returns an array of `address` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Address": {
        "description": "200 Success - Returns the `address` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      },
      "CmsPage": {
        "description": "200 Success - Returns the `cms_page` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CmsPage"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmsPageIncludes"
                  }
                }
              }
            }
          }
        }
      },
      "CmsPageList": {
        "description": "200 Success - Returns an array of `cms_page` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmsPage"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CmsPageIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "CreditCard": {
        "description": "200 Success - Returns the `credit_card` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CreditCard"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditCardIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "CreditCardList": {
        "description": "200 Success - Returns an array of `credit_card` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditCard"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditCardIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Product": {
        "description": "200 Success - Returns the `product` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Product"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "ProductList": {
        "description": "200 Success - Returns an array of `product` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreditCardIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Store": {
        "description": "200 Success - Returns the `store` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Store"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "Taxon": {
        "description": "200 Success - Returns the `taxon` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Taxon"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
           
          }
        }
      },
      "TaxonList": {
        "description": "200 Success - Returns an array of `taxon` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Taxon"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxonIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Country": {
        "description": "200 Success - Returns the `country` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Country"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "CountryList": {
        "description": "200 Success - Returns an array of `country` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Shipment": {
        "description": "200 Success - Returns an array containing several `shipment` objects, along with the included array containing all available `shipping_rate` and `stock_location` objects. ",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentIncludes"
                  }
                }
              },
              "required": [
                "data",
                "included"
              ]
            }
          }
        }
      },
      "EstimatedShippingRates": {
        "description": "200 Success - Returns an array of `shipping_rate` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShippingRate"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "Menu": {
        "description": "200 Success - Returns the `menu` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Menu"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "MenuList": {
        "description": "200 Success - Returns an array of `menu` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Menu"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "Wishlist": {
        "description": "200 Success - Returns the `wishlist` object.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Wishlist"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WishlistIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "WishlistList": {
        "description": "200 Success - Returns an array of `wishlist` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wishlist"
                  }
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WishlistIncludes"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/ListMeta"
                },
                "links": {
                  "$ref": "#/components/schemas/ListLinks"
                }
              },
              "required": [
                "data",
                "meta",
                "links"
              ]
            }
          }
        }
      },
      "WishedItem": {
        "description": "200 Success - Returns an array of `wished_item` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WishedItem"
                },
                "included": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WishedItemIncludes"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      },
      "PaymentMethodList": {
        "description": "200 Success - Returns an array of `payment_method` objects.",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  }
                }
              },
              "required": [
                "data"
              ]
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account"
    },
    {
      "name": "Account / Address"
    },
    {
      "name": "Account / Credit Cards"
    },
    {
      "name": "Account / Orders"
    },
    {
      "name": "Cart"
    },
    {
      "name": "Cart / Line Items"
    },
    {
      "name": "Cart / Coupons"
    },
    {
      "name": "Cart / Other"
    },
    {
      "name": "Checkout"
    },
    {
      "name": "Checkout / State"
    },
    {
      "name": "Checkout / Shipments"
    },
    {
      "name": "Checkout / Payments"
    },
    {
      "name": "Checkout / Store Credit"
    },
    {
      "name": "CMS Pages"
    },
    {
      "name": "Countries"
    },
    {
      "name": "Digital Downloads"
    },
    {
      "name": "Menus"
    },
    {
      "name": "Order Status"
    },
    {
      "name": "Products"
    },
    {
      "name": "Stores"
    },
    {
      "name": "Taxons"
    },
    {
      "name": "Wishlists"
    },
    {
      "name": "Wishlists / Wished Items"
    },
    {
      "name": "Token"
    },
    {
      "name": "Addresses"
    },
    {
      "name": "Adjustments"
    },
    {
      "name": "Classifications"
    },
    {
      "name": "Digital Assets"
    },
    {
      "name": "Digital Links"
    },
    {
      "name": "Line Items"
    },
    {
      "name": "Menu Items"
    },
    {
      "name": "Option Types"
    },
    {
      "name": "Option Values"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Payment Methods"
    },
    {
      "name": "Promotions"
    },
    {
      "name": "Promotion Actions"
    },
    {
      "name": "Promotion Categories"
    },
    {
      "name": "Promotion Rules"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Shipments"
    },
    {
      "name": "Shipping Categories"
    },
    {
      "name": "Shipping Methods"
    },
    {
      "name": "States"
    },
    {
      "name": "Stock Items"
    },
    {
      "name": "Stock Locations"
    },
    {
      "name": "Store Credit Categories"
    },
    {
      "name": "Store Credit Types"
    },
    {
      "name": "Store Credits"
    },
    {
      "name": "Tax Categories"
    },
    {
      "name": "Tax Rates"
    },
    {
      "name": "Taxonomies"
    },
    {
      "name": "Users"
    },
    {
      "name": "Variants"
    },
    {
      "name": "Webhook Events"
    },
    {
      "name": "Webhook Subscribers"
    },
    {
      "name": "Zones"
    }
  ]
}