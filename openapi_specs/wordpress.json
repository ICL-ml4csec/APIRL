{
  "openapi": "3.1.0",
  "info": {
    "title": "A new title API",
    "description": "",
    "version": "6.2.2",
    "contact": {
      "name": "a new title",
      "url": "http://localhost:8082",
      "email": "admin@admin.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000/wp-json"
    }
  ],
  "tags": [
    {
      "name": "oembed/1.0",
      "description": ""
    },
    {
      "name": "wp-openapi/v1",
      "description": ""
    },
    {
      "name": "wp/v2",
      "description": ""
    },
    {
      "name": "wp-site-health/v1",
      "description": ""
    },
    {
      "name": "wp-block-editor/v1",
      "description": ""
    }
  ],
  "security": [],
  "components": {
    "schemas": {
      "post": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "post",
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "password": {
            "description": "A password to protect access to the content and excerpt.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "permalink_template": {
            "description": "Permalink template for the post.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "generated_slug": {
            "description": "Slug automatically generated from the post title.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "featured_media": {
            "description": "The ID of the featured media for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "comment_status": {
            "description": "Whether or not comments are open on the post.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "ping_status": {
            "description": "Whether or not the post can be pinged.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "format": {
            "description": "The format for the post.",
            "type": "string",
            "enum": [
              "standard",
              "aside",
              "chat",
              "gallery",
              "link",
              "image",
              "quote",
              "status",
              "video",
              "audio"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          },
          "sticky": {
            "description": "Whether or not the post should be treated as sticky.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ]
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "categories": {
            "description": "The terms assigned to the post in the category taxonomy.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "context": [
              "view",
              "edit"
            ]
          },
          "tags": {
            "description": "The terms assigned to the post in the post_tag taxonomy.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "context": [
              "view",
              "edit"
            ]
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-publish",
            "title": "The current user can publish this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "publish",
                    "future"
                  ]
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-sticky",
            "title": "The current user can sticky this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "sticky": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-author",
            "title": "The current user can change the author on this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-categories",
            "title": "The current user can assign terms in the category taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-create-categories",
            "title": "The current user can create terms in the category taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-tags",
            "title": "The current user can assign terms in the post_tag taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-create-tags",
            "title": "The current user can create terms in the post_tag taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/posts/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "post-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "post-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "page": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "page",
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "password": {
            "description": "A password to protect access to the content and excerpt.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "permalink_template": {
            "description": "Permalink template for the post.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "generated_slug": {
            "description": "Slug automatically generated from the post title.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "parent": {
            "description": "The ID for the parent of the post.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "featured_media": {
            "description": "The ID of the featured media for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "comment_status": {
            "description": "Whether or not comments are open on the post.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "ping_status": {
            "description": "Whether or not the post can be pinged.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "menu_order": {
            "description": "The order of the post in relation to other posts.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-publish",
            "title": "The current user can publish this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/pages/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "publish",
                    "future"
                  ]
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/pages/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-author",
            "title": "The current user can change the author on this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/pages/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "page-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "page-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "excerpt": {
            "description": "The excerpt for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Excerpt for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML excerpt for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the excerpt is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "attachment": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "attachment",
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "permalink_template": {
            "description": "Permalink template for the post.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "generated_slug": {
            "description": "Slug automatically generated from the post title.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "author": {
            "description": "The ID for the author of the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "comment_status": {
            "description": "Whether or not comments are open on the post.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "ping_status": {
            "description": "Whether or not the post can be pinged.",
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "alt_text": {
            "description": "Alternative text to display when attachment is not displayed.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "caption": {
            "description": "The attachment caption.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Caption for the attachment, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML caption for the attachment, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "description": {
            "description": "The attachment description.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Description for the attachment, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML description for the attachment, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "media_type": {
            "description": "Attachment type.",
            "type": "string",
            "enum": [
              "image",
              "file"
            ],
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "mime_type": {
            "description": "The attachment MIME type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "media_details": {
            "description": "Details about the media file, specific to its type.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "post": {
            "description": "The ID for the associated post of the attachment.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ]
          },
          "source_url": {
            "description": "URL to the original attachment file.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "missing_image_sizes": {
            "description": "List of the missing image sizes of the attachment.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "edit"
            ],
            "readonly": true
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/media/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-author",
            "title": "The current user can change the author on this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/media/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "nav_menu_item": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "nav_menu_item",
        "type": "object",
        "properties": {
          "title": {
            "description": "The title for the object.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the object, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the object, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the object.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "type_label": {
            "description": "The singular label used to describe this type of menu item.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "type": {
            "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\".",
            "type": "string",
            "enum": [
              "taxonomy",
              "post_type",
              "post_type_archive",
              "custom"
            ],
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "default": "custom"
          },
          "status": {
            "description": "A named status for the object.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the object.",
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "attr_title": {
            "description": "Text for the title attribute of the link element for this menu item.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "classes": {
            "description": "Class names for the link element of this menu item.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "description": {
            "description": "The description of this menu item.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "menu_order": {
            "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0.",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "object": {
            "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\".",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "type": "string"
          },
          "object_id": {
            "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories.",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "target": {
            "description": "The target attribute of the link element for this menu item.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "enum": [
              "_blank",
              ""
            ]
          },
          "url": {
            "description": "The URL to which this menu item points.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "xfn": {
            "description": "The XFN relationship expressed in the link of this menu item.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "invalid": {
            "description": "Whether the menu item represents an object that no longer exists.",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "type": "boolean",
            "readonly": true
          },
          "menus": {
            "description": "The terms assigned to the object in the nav_menu taxonomy.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-publish",
            "title": "The current user can publish this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/menu-items/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "publish",
                    "future"
                  ]
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/menu-items/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-assign-menus",
            "title": "The current user can assign terms in the nav_menu taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/menu-items/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "menus": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-create-menus",
            "title": "The current user can create terms in the nav_menu taxonomy.",
            "href": "http://localhost:8000/wp-json/wp/v2/menu-items/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "menus": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/menu-item-object",
            "title": "Get linked object.",
            "href": "http://localhost:8000/wp-json/wp/v2/menu-items/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      },
      "nav_menu_item-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "nav_menu_item-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "GUID for the revision, as it exists in the database.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The title for the object.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the object, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the object, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_block": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_block",
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "password": {
            "description": "A password to protect access to the content and excerpt.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-publish",
            "title": "The current user can publish this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/blocks/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "publish",
                    "future"
                  ]
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/blocks/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "wp_block-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_block-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_template": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_template",
        "type": "object",
        "required": [
          "slug"
        ],
        "properties": {
          "id": {
            "description": "ID of template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "Unique slug identifying the template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_\\%-]+"
          },
          "theme": {
            "description": "Theme identifier for the template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "source": {
            "description": "Source of template",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "origin": {
            "description": "Source of a customized template",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "content": {
            "description": "Content of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "title": {
            "description": "Title of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ]
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "description": {
            "description": "Description of template.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "status": {
            "description": "Status of template.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "wp_id": {
            "description": "Post ID.",
            "type": "integer",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "has_theme_file": {
            "description": "Theme file exists.",
            "type": "boolean",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "author": {
            "description": "The ID for the author of the template.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "is_custom": {
            "description": "Whether a template is a custom template.",
            "type": "boolean",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_template-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_template-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "GUID for the revision, as it exists in the database.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "Title of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ]
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "Content of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_template_part": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_template_part",
        "type": "object",
        "required": [
          "slug"
        ],
        "properties": {
          "id": {
            "description": "ID of template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "Unique slug identifying the template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "minLength": 1,
            "pattern": "[a-zA-Z0-9_\\%-]+"
          },
          "theme": {
            "description": "Theme identifier for the template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of template.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "source": {
            "description": "Source of template",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "origin": {
            "description": "Source of a customized template",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "content": {
            "description": "Content of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "title": {
            "description": "Title of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ]
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "description": {
            "description": "Description of template.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "status": {
            "description": "Status of template.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "default": "publish",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "wp_id": {
            "description": "Post ID.",
            "type": "integer",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "has_theme_file": {
            "description": "Theme file exists.",
            "type": "boolean",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "author": {
            "description": "The ID for the author of the template.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "area": {
            "description": "Where the template part is intended for use (header, footer, etc.)",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          }
        }
      },
      "wp_template_part-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_template_part-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "GUID for the revision, as it exists in the database.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "Title of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Title for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ]
              },
              "rendered": {
                "description": "HTML title for the template, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "Content of template.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the template, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ]
              },
              "block_version": {
                "description": "Version of the content block format used by the template.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_navigation": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_navigation",
        "type": "object",
        "properties": {
          "date": {
            "description": "The date the post was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the post was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the post.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "link": {
            "description": "URL to the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "modified": {
            "description": "The date the post was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "modified_gmt": {
            "description": "The date the post was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "A named status for the post.",
            "type": "string",
            "enum": [
              "publish",
              "future",
              "draft",
              "pending",
              "private"
            ],
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of post.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "password": {
            "description": "A password to protect access to the content and excerpt.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "template": {
            "description": "The theme file to use to display the post.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          }
        },
        "links": [
          {
            "rel": "https://api.w.org/action-publish",
            "title": "The current user can publish this post.",
            "href": "http://localhost:8000/wp-json/wp/v2/navigation/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "publish",
                    "future"
                  ]
                }
              }
            }
          },
          {
            "rel": "https://api.w.org/action-unfiltered-html",
            "title": "The current user can post unfiltered HTML markup and JavaScript.",
            "href": "http://localhost:8000/wp-json/wp/v2/navigation/{id}",
            "targetSchema": {
              "type": "object",
              "properties": {
                "content": {
                  "raw": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "wp_navigation-revision": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_navigation-revision",
        "type": "object",
        "properties": {
          "author": {
            "description": "The ID for the author of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date": {
            "description": "The date the revision was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the revision was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "guid": {
            "description": "The globally unique identifier for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "raw": {
                "description": "GUID for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "rendered": {
                "description": "GUID for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              }
            }
          },
          "id": {
            "description": "Unique identifier for the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "modified": {
            "description": "The date the revision was last modified, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "modified_gmt": {
            "description": "The date the revision was last modified, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "parent": {
            "description": "The ID for the parent of the revision.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the revision unique to its type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The title for the post.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Title for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "content": {
            "description": "The content for the post.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Content for the post, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit"
                ],
                "readonly": true
              },
              "block_version": {
                "description": "Version of the content block format used by the post.",
                "type": "integer",
                "context": [
                  "edit"
                ],
                "readonly": true
              },
              "protected": {
                "description": "Whether the content is protected with a password.",
                "type": "boolean",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "preview_link": {
            "description": "Preview link for the post.",
            "type": "string",
            "format": "uri",
            "context": [
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "type": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "type",
        "type": "object",
        "properties": {
          "capabilities": {
            "description": "All capabilities used by the post type.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "A human-readable description of the post type.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "hierarchical": {
            "description": "Whether or not the post type should have children.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "viewable": {
            "description": "Whether or not the post type can be viewed.",
            "type": "boolean",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "labels": {
            "description": "Human-readable labels for the post type for various contexts.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "The title for the post type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the post type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "supports": {
            "description": "All features, supported by the post type.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "has_archive": {
            "description": "If the value is a string, the value will be used as the archive slug. If the value is false the post type has no archive.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "taxonomies": {
            "description": "Taxonomies associated with post type.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "rest_base": {
            "description": "REST base route for the post type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "rest_namespace": {
            "description": "REST route's namespace for the post type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "visibility": {
            "description": "The visibility settings for the post type.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true,
            "properties": {
              "show_ui": {
                "description": "Whether to generate a default UI for managing this post type.",
                "type": "boolean"
              },
              "show_in_nav_menus": {
                "description": "Whether to make the post type available for selection in navigation menus.",
                "type": "boolean"
              }
            }
          },
          "icon": {
            "description": "The icon for the post type.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          }
        }
      },
      "status": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "status",
        "type": "object",
        "properties": {
          "name": {
            "description": "The title for the status.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "private": {
            "description": "Whether posts with this status should be private.",
            "type": "boolean",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "protected": {
            "description": "Whether posts with this status should be protected.",
            "type": "boolean",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "public": {
            "description": "Whether posts of this status should be shown in the front end of the site.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "queryable": {
            "description": "Whether posts with this status should be publicly-queryable.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "show_in_list": {
            "description": "Whether to include posts in the edit listing for their post type.",
            "type": "boolean",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the status.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "date_floating": {
            "description": "Whether posts of this status may have floating published dates.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "taxonomy": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "taxonomy",
        "type": "object",
        "properties": {
          "capabilities": {
            "description": "All capabilities used by the taxonomy.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "A human-readable description of the taxonomy.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "hierarchical": {
            "description": "Whether or not the taxonomy should have children.",
            "type": "boolean",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "labels": {
            "description": "Human-readable labels for the taxonomy for various contexts.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "The title for the taxonomy.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "slug": {
            "description": "An alphanumeric identifier for the taxonomy.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "show_cloud": {
            "description": "Whether or not the term cloud should be displayed.",
            "type": "boolean",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "types": {
            "description": "Types associated with the taxonomy.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "rest_base": {
            "description": "REST base route for the taxonomy.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "rest_namespace": {
            "description": "REST namespace route for the taxonomy.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "visibility": {
            "description": "The visibility settings for the taxonomy.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true,
            "properties": {
              "public": {
                "description": "Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.",
                "type": "boolean"
              },
              "publicly_queryable": {
                "description": "Whether the taxonomy is publicly queryable.",
                "type": "boolean"
              },
              "show_ui": {
                "description": "Whether to generate a default UI for managing this taxonomy.",
                "type": "boolean"
              },
              "show_admin_column": {
                "description": "Whether to allow automatic creation of taxonomy columns on associated post-types table.",
                "type": "boolean"
              },
              "show_in_nav_menus": {
                "description": "Whether to make the taxonomy available for selection in navigation menus.",
                "type": "boolean"
              },
              "show_in_quick_edit": {
                "description": "Whether to show the taxonomy in the quick/bulk edit panel.",
                "type": "boolean"
              }
            }
          }
        }
      },
      "category": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "category",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "count": {
            "description": "Number of published posts for the term.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "link": {
            "description": "URL of the term.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "taxonomy": {
            "description": "Type attribution for the term.",
            "type": "string",
            "enum": [
              "category"
            ],
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "parent": {
            "description": "The parent term ID.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          }
        }
      },
      "tag": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "tag",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "count": {
            "description": "Number of published posts for the term.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "link": {
            "description": "URL of the term.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "taxonomy": {
            "description": "Type attribution for the term.",
            "type": "string",
            "enum": [
              "post_tag"
            ],
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          }
        }
      },
      "nav_menu": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "nav_menu",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the term.",
            "type": "integer",
            "context": [
              "view",
              "embed",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "HTML description of the term.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "name": {
            "description": "HTML title for the term.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the term unique to its type.",
            "type": "string",
            "context": [
              "view",
              "embed",
              "edit"
            ]
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          },
          "locations": {
            "description": "The locations assigned to the menu.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit"
            ]
          },
          "auto_add": {
            "description": "Whether to automatically add top level pages to this menu.",
            "context": [
              "view",
              "edit"
            ],
            "type": "boolean"
          }
        }
      },
      "user": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "user",
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "type": "integer",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "username": {
            "description": "Login name for the user.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "name": {
            "description": "Display name for the user.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "first_name": {
            "description": "First name for the user.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "last_name": {
            "description": "Last name for the user.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "email": {
            "description": "The email address for the user.",
            "type": "string",
            "format": "email",
            "context": [
              "edit"
            ]
          },
          "url": {
            "description": "URL of the user.",
            "type": "string",
            "format": "uri",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "description": {
            "description": "Description of the user.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "link": {
            "description": "Author URL of the user.",
            "type": "string",
            "format": "uri",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "locale": {
            "description": "Locale for the user.",
            "type": "string",
            "enum": [
              "",
              "en_US"
            ],
            "context": [
              "edit"
            ]
          },
          "nickname": {
            "description": "The nickname for the user.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "slug": {
            "description": "An alphanumeric identifier for the user.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "registered_date": {
            "description": "Registration date for the user.",
            "type": "string",
            "format": "date-time",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "roles": {
            "description": "Roles assigned to the user.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "context": [
              "edit"
            ]
          },
          "password": {
            "description": "Password for the user (never included).",
            "type": "string",
            "context": []
          },
          "capabilities": {
            "description": "All capabilities assigned to the user.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "extra_capabilities": {
            "description": "Any extra capabilities assigned to the user.",
            "type": "object",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "avatar_urls": {
            "description": "Avatar URLs for the user.",
            "type": "object",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true,
            "properties": {
              "24": {
                "description": "Avatar URL with image size of 24 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              },
              "48": {
                "description": "Avatar URL with image size of 48 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              },
              "96": {
                "description": "Avatar URL with image size of 96 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "persisted_preferences": {
                "type": "object",
                "description": "",
                "context": [
                  "edit"
                ],
                "properties": {
                  "_modified": {
                    "description": "The date and time the preferences were updated.",
                    "type": "string",
                    "format": "date-time",
                    "readonly": false
                  }
                },
                "additionalProperties": true
              }
            }
          }
        }
      },
      "application-password": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "application-password",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "uuid": {
            "description": "The unique identifier for the application password.",
            "type": "string",
            "format": "uuid",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "app_id": {
            "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace.",
            "type": "string",
            "format": "uuid",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "name": {
            "description": "The name of the application password.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "minLength": 1,
            "pattern": ".*\\S.*"
          },
          "password": {
            "description": "The generated password. Only available after adding an application.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "created": {
            "description": "The GMT date the application password was created.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "last_used": {
            "description": "The GMT date the application password was last used.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          },
          "last_ip": {
            "description": "The IP address the application password was last used by.",
            "type": "string",
            "format": "ip",
            "context": [
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "comment": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "comment",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the comment.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "author": {
            "description": "The ID of the user object, if author was a user.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "author_email": {
            "description": "Email address for the comment author.",
            "type": "string",
            "format": "email",
            "context": [
              "edit"
            ]
          },
          "author_ip": {
            "description": "IP address for the comment author.",
            "type": "string",
            "format": "ip",
            "context": [
              "edit"
            ]
          },
          "author_name": {
            "description": "Display name for the comment author.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "author_url": {
            "description": "URL for the comment author.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "author_user_agent": {
            "description": "User agent for the comment author.",
            "type": "string",
            "context": [
              "edit"
            ]
          },
          "content": {
            "description": "The content for the comment.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "properties": {
              "raw": {
                "description": "Content for the comment, as it exists in the database.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "rendered": {
                "description": "HTML content for the comment, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          },
          "date": {
            "description": "The date the comment was published, in the site's timezone.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "date_gmt": {
            "description": "The date the comment was published, as GMT.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view",
              "edit"
            ]
          },
          "link": {
            "description": "URL to the comment.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "parent": {
            "description": "The ID for the parent of the comment.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "default": 0
          },
          "post": {
            "description": "The ID of the associated post object.",
            "type": "integer",
            "context": [
              "view",
              "edit"
            ],
            "default": 0
          },
          "status": {
            "description": "State of the comment.",
            "type": "string",
            "context": [
              "view",
              "edit"
            ]
          },
          "type": {
            "description": "Type of the comment.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "author_avatar_urls": {
            "description": "Avatar URLs for the comment author.",
            "type": "object",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true,
            "properties": {
              "24": {
                "description": "Avatar URL with image size of 24 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              },
              "48": {
                "description": "Avatar URL with image size of 48 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              },
              "96": {
                "description": "Avatar URL with image size of 96 pixels.",
                "type": "string",
                "format": "uri",
                "context": [
                  "embed",
                  "view",
                  "edit"
                ]
              }
            }
          },
          "meta": {
            "description": "Meta fields.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ],
            "properties": {}
          }
        }
      },
      "search-result": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "search-result",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "type": "integer",
            "context": [
              "view",
              "embed"
            ],
            "readonly": true
          },
          "title": {
            "description": "The title for the object.",
            "type": "string",
            "context": [
              "view",
              "embed"
            ],
            "readonly": true
          },
          "url": {
            "description": "URL to the object.",
            "type": "string",
            "format": "uri",
            "context": [
              "view",
              "embed"
            ],
            "readonly": true
          },
          "type": {
            "description": "Object type.",
            "type": "string",
            "enum": [
              "post",
              "term",
              "post-format"
            ],
            "context": [
              "view",
              "embed"
            ],
            "readonly": true
          },
          "subtype": {
            "description": "Object subtype.",
            "type": "string",
            "enum": [
              "post",
              "page",
              "category",
              "post_tag"
            ],
            "context": [
              "view",
              "embed"
            ],
            "readonly": true
          }
        }
      },
      "rendered-block": {
        "$schema": "http://json-schema.org/schema#",
        "title": "rendered-block",
        "type": "object",
        "required": [
          "rendered"
        ],
        "properties": {
          "rendered": {
            "description": "The rendered block.",
            "type": "string",
            "context": [
              "edit"
            ]
          }
        }
      },
      "block-type": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "block-type",
        "type": "object",
        "properties": {
          "api_version": {
            "description": "Version of block API.",
            "type": "integer",
            "default": 1,
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "title": {
            "description": "Title of block type.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "Unique name identifying the block type.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "Description of block type.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "icon": {
            "description": "Icon of block type.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "provides_context": {
            "description": "Context provided by blocks of this type.",
            "type": "object",
            "properties": {},
            "additionalProperties": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "uses_context": {
            "description": "Context values inherited by blocks of this type.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "supports": {
            "description": "Block supports.",
            "type": "object",
            "properties": {},
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "category": {
            "description": "Block category.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "is_dynamic": {
            "description": "Is the block dynamically rendered.",
            "type": "boolean",
            "default": false,
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "editor_script_handles": {
            "description": "Editor script handles.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "script_handles": {
            "description": "Public facing and editor script handles.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "view_script_handles": {
            "description": "Public facing script handles.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "editor_style_handles": {
            "description": "Editor style handles.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "style_handles": {
            "description": "Public facing and editor style handles.",
            "type": "array",
            
            "items": {
              "type": "string"
            },
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "styles": {
            "description": "Block style variations.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Unique name identifying the style.",
                  "type": "string"
                },
                "label": {
                  "description": "The human-readable label for the style.",
                  "type": "string"
                },
                "inline_style": {
                  "description": "Inline CSS code that registers the CSS class required for the style.",
                  "type": "string"
                },
                "style_handle": {
                  "description": "Contains the handle that defines the block style.",
                  "type": "string"
                }
              }
            },
            
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "variations": {
            "description": "Block variations.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "title",
                "isDefault"
              ],
              "properties": {
                "name": {
                  "description": "The unique and machine-readable name.",
                  "type": "string"
                },
                "title": {
                  "description": "A human-readable variation title.",
                  "type": "string"
                },
                "description": {
                  "description": "A detailed variation description.",
                  "type": "string"
                },
                "category": {
                  "description": "Block category.",
                  "type": "string",
                  "context": [
                    "embed",
                    "view",
                    "edit"
                  ],
                  "readonly": true
                },
                "icon": {
                  "description": "Icon of block type.",
                  "type": "string",
                  "context": [
                    "embed",
                    "view",
                    "edit"
                  ],
                  "readonly": true
                },
                "isDefault": {
                  "description": "Indicates whether the current variation is the default one.",
                  "type": "boolean",
                  "default": false
                },
                "innerBlocks": {
                  "description": "The list of inner blocks used in the example.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the inner block.",
                        "type": "string"
                      }
                    }
                  }
                },
                "scope": {
                  "description": "The list of scopes where the variation is applicable. When not provided, it assumes all available scopes.",
                  "type": "array",
                  
                  "items": {
                    "type": "string",
                    "enum": [
                      "block",
                      "inserter",
                      "transform"
                    ]
                  },
                  "readonly": true
                },
                "keywords": {
                  "description": "Block keywords.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  
                  "context": [
                    "embed",
                    "view",
                    "edit"
                  ],
                  "readonly": true
                }
              }
            },
            "readonly": true,
            "context": [
              "embed",
              "view",
              "edit"
            ]
          },
          "textdomain": {
            "description": "Public text domain.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "parent": {
            "description": "Parent blocks.",
            "type": "array",
            "items": {
              "type": "string"
            },
            
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "ancestor": {
            "description": "Ancestor blocks.",
            "type": "array",
            "items": {
              "type": "string"
            },
            
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "keywords": {
            "description": "Block keywords.",
            "type": "array",
            "items": {
              "type": "string"
            },
            
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
         
          "editor_script": {
            "description": "Editor script handle. DEPRECATED: Use `editor_script_handles` instead.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "script": {
            "description": "Public facing and editor script handle. DEPRECATED: Use `script_handles` instead.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "view_script": {
            "description": "Public facing script handle. DEPRECATED: Use `view_script_handles` instead.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "editor_style": {
            "description": "Editor style handle. DEPRECATED: Use `editor_style_handles` instead.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "style": {
            "description": "Public facing and editor style handle. DEPRECATED: Use `style_handles` instead.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp_global_styles": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "wp_global_styles",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of global styles config.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "styles": {
            "description": "Global styles.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ]
          },
          "settings": {
            "description": "Global settings.",
            "type": "object",
            "context": [
              "view",
              "edit"
            ]
          },
          "title": {
            "description": "Title of the global styles variation.",
            "type": "object",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "Title for the global styles variation, as it exists in the database.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ]
              },
              "rendered": {
                "description": "HTML title for the post, transformed for display.",
                "type": "string",
                "context": [
                  "view",
                  "edit",
                  "embed"
                ],
                "readonly": true
              }
            }
          }
        }
      },
      "settings": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "settings",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Site title."
          },
          "description": {
            "type": "string",
            "description": "Site tagline."
          },
          "url": {
            "type": "string",
            "description": "Site URL.",
            "format": "uri"
          },
          "email": {
            "type": "string",
            "description": "This address is used for admin purposes, like new user notification.",
            "format": "email"
          },
          "timezone": {
            "type": "string",
            "description": "A city in the same timezone as you."
          },
          "date_format": {
            "type": "string",
            "description": "A date format for all date strings."
          },
          "time_format": {
            "type": "string",
            "description": "A time format for all time strings."
          },
          "start_of_week": {
            "type": "integer",
            "description": "A day number of the week that the week should start on."
          },
          "language": {
            "type": "string",
            "description": "WordPress locale code.",
            "default": "en_US"
          },
          "use_smilies": {
            "type": "boolean",
            "description": "Convert emoticons like :-) and :-P to graphics on display.",
            "default": true
          },
          "default_category": {
            "type": "integer",
            "description": "Default post category."
          },
          "default_post_format": {
            "type": "string",
            "description": "Default post format."
          },
          "posts_per_page": {
            "type": "integer",
            "description": "Blog pages show at most.",
            "default": 10
          },
          "show_on_front": {
            "type": "string",
            "description": "What to show on the front page"
          },
          "page_on_front": {
            "type": "integer",
            "description": "The ID of the page that should be displayed on the front page"
          },
          "page_for_posts": {
            "type": "integer",
            "description": "The ID of the page that should display the latest posts"
          },
          "default_ping_status": {
            "type": "string",
            "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.",
            "enum": [
              "open",
              "closed"
            ]
          },
          "default_comment_status": {
            "type": "string",
            "description": "Allow people to submit comments on new posts.",
            "enum": [
              "open",
              "closed"
            ]
          },
          "site_logo": {
            "type": "integer",
            "description": "Site logo."
          },
          "site_icon": {
            "type": "integer",
            "description": "Site icon."
          }
        }
      },
      "theme": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "theme",
        "type": "object",
        "properties": {
          "stylesheet": {
            "description": "The theme's stylesheet. This uniquely identifies the theme.",
            "type": "string",
            "readonly": true
          },
          "template": {
            "description": "The theme's template. If this is a child theme, this refers to the parent theme, otherwise this is the same as the theme's stylesheet.",
            "type": "string",
            "readonly": true
          },
          "author": {
            "description": "The theme author.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The theme author's name, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "HTML for the theme author, transformed for display.",
                "type": "string"
              }
            }
          },
          "author_uri": {
            "description": "The website of the theme author.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The website of the theme author, as found in the theme header.",
                "type": "string",
                "format": "uri"
              },
              "rendered": {
                "description": "The website of the theme author, transformed for display.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "description": {
            "description": "A description of the theme.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The theme description, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "The theme description, transformed for display.",
                "type": "string"
              }
            }
          },
          "name": {
            "description": "The name of the theme.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The theme name, as found in the theme header.",
                "type": "string"
              },
              "rendered": {
                "description": "The theme name, transformed for display.",
                "type": "string"
              }
            }
          },
          "requires_php": {
            "description": "The minimum PHP version required for the theme to work.",
            "type": "string",
            "readonly": true
          },
          "requires_wp": {
            "description": "The minimum WordPress version required for the theme to work.",
            "type": "string",
            "readonly": true
          },
          "screenshot": {
            "description": "The theme's screenshot URL.",
            "type": "string",
            "format": "uri",
            "readonly": true
          },
          "tags": {
            "description": "Tags indicating styles and features of the theme.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The theme tags, as found in the theme header.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rendered": {
                "description": "The theme tags, transformed for display.",
                "type": "string"
              }
            }
          },
          "textdomain": {
            "description": "The theme's text domain.",
            "type": "string",
            "readonly": true
          },
          "theme_supports": {
            "description": "Features supported by this theme.",
            "type": "object",
            "readonly": true,
            "properties": {
              "align-wide": {
                "description": "Whether theme opts in to wide alignment CSS class.",
                "type": "boolean",
                "default": false
              },
              "automatic-feed-links": {
                "description": "Whether posts and comments RSS feed links are added to head.",
                "type": "boolean",
                "default": false
              },
              "block-templates": {
                "description": "Whether a theme uses block-based templates.",
                "type": "boolean",
                "default": false
              },
              "block-template-parts": {
                "description": "Whether a theme uses block-based template parts.",
                "type": "boolean",
                "default": false
              },
              "custom-background": {
                "description": "Custom background if defined by the theme.",
                "type": "object",
                "default": false,
                "properties": {
                  "default-image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "default-preset": {
                    "type": "string",
                    "enum": [
                      "default",
                      "fill",
                      "fit",
                      "repeat",
                      "custom"
                    ]
                  },
                  "default-position-x": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "default-position-y": {
                    "type": "string",
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ]
                  },
                  "default-size": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "contain",
                      "cover"
                    ]
                  },
                  "default-repeat": {
                    "type": "string",
                    "enum": [
                      "repeat-x",
                      "repeat-y",
                      "repeat",
                      "no-repeat"
                    ]
                  },
                  "default-attachment": {
                    "type": "string",
                    "enum": [
                      "scroll",
                      "fixed"
                    ]
                  },
                  "default-color": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "custom-header": {
                "description": "Custom header if defined by the theme.",
                "type": "object",
                "default": false,
                "properties": {
                  "default-image": {
                    "type": "string",
                    "format": "uri"
                  },
                  "random-default": {
                    "type": "boolean"
                  },
                  "width": {
                    "type": "integer"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "flex-height": {
                    "type": "boolean"
                  },
                  "flex-width": {
                    "type": "boolean"
                  },
                  "default-text-color": {
                    "type": "string"
                  },
                  "header-text": {
                    "type": "boolean"
                  },
                  "uploads": {
                    "type": "boolean"
                  },
                  "video": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "custom-logo": {
                "description": "Custom logo if defined by the theme.",
                "type": "object",
                "default": false,
                "properties": {
                  "width": {
                    "type": "integer"
                  },
                  "height": {
                    "type": "integer"
                  },
                  "flex-width": {
                    "type": "boolean"
                  },
                  "flex-height": {
                    "type": "boolean"
                  },
                  "header-text": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "unlink-homepage-logo": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "customize-selective-refresh-widgets": {
                "description": "Whether the theme enables Selective Refresh for Widgets being managed with the Customizer.",
                "type": "boolean",
                "default": false
              },
              "dark-editor-style": {
                "description": "Whether theme opts in to the dark editor style UI.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-colors": {
                "description": "Whether the theme disables custom colors.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-font-sizes": {
                "description": "Whether the theme disables custom font sizes.",
                "type": "boolean",
                "default": false
              },
              "disable-custom-gradients": {
                "description": "Whether the theme disables custom gradients.",
                "type": "boolean",
                "default": false
              },
              "disable-layout-styles": {
                "description": "Whether the theme disables generated layout styles.",
                "type": "boolean",
                "default": false
              },
              "editor-color-palette": {
                "description": "Custom color palette if defined by the theme.",
                "type": "array",
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "editor-font-sizes": {
                "description": "Custom font sizes if defined by the theme.",
                "type": "array",
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "size": {
                      "type": "number"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "editor-gradient-presets": {
                "description": "Custom gradient presets if defined by the theme.",
                "type": "array",
                "default": false,
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "gradient": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "editor-styles": {
                "description": "Whether theme opts in to the editor styles CSS wrapper.",
                "type": "boolean",
                "default": false
              },
              "html5": {
                "description": "Allows use of HTML5 markup for search forms, comment forms, comment lists, gallery, and caption.",
                "type": "array",
                "default": false,
                "items": {
                  "type": "string",
                  "enum": [
                    "search-form",
                    "comment-form",
                    "comment-list",
                    "gallery",
                    "caption",
                    "script",
                    "style"
                  ]
                }
              },
              "formats": {
                "description": "Post formats supported.",
                "type": "array",
                "default": [
                  "standard"
                ],
                "items": {
                  "type": "string",
                  "enum": [
                    "standard",
                    "aside",
                    "chat",
                    "gallery",
                    "link",
                    "image",
                    "quote",
                    "status",
                    "video",
                    "audio"
                  ]
                }
              },
              "post-thumbnails": {
                "description": "The post types that support thumbnails or true if all post types are supported.",
                "type": "array",
                "default": false,
                "items": {
                  "type": "string"
                }
              },
              "responsive-embeds": {
                "description": "Whether the theme supports responsive embedded content.",
                "type": "boolean",
                "default": false
              },
              "title-tag": {
                "description": "Whether the theme can manage the document title tag.",
                "type": "boolean",
                "default": false
              },
              "wp-block-styles": {
                "description": "Whether theme opts in to default WordPress block styles for viewing.",
                "type": "boolean",
                "default": false
              }
            }
          },
          "theme_uri": {
            "description": "The URI of the theme's webpage.",
            "type": "object",
            "readonly": true,
            "properties": {
              "raw": {
                "description": "The URI of the theme's webpage, as found in the theme header.",
                "type": "string",
                "format": "uri"
              },
              "rendered": {
                "description": "The URI of the theme's webpage, transformed for display.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "version": {
            "description": "The theme's current version.",
            "type": "string",
            "readonly": true
          },
          "status": {
            "description": "A named status for the theme.",
            "type": "string",
            "enum": [
              "inactive",
              "active"
            ]
          }
        }
      },
      "plugin": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "plugin",
        "type": "object",
        "properties": {
          "plugin": {
            "description": "The plugin file.",
            "type": "string",
            "pattern": "[^.\\/]+(?:\\/[^.\\/]+)?",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "status": {
            "description": "The plugin activation status.",
            "type": "string",
            "enum": [
              "inactive",
              "active"
            ],
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "name": {
            "description": "The plugin name.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "plugin_uri": {
            "description": "The plugin's website address.",
            "type": "string",
            "format": "uri",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ]
          },
          "author": {
            "description": "The plugin author.",
            "type": "object",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ]
          },
          "author_uri": {
            "description": "Plugin author's website address.",
            "type": "string",
            "format": "uri",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ]
          },
          "description": {
            "description": "The plugin description.",
            "type": "object",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ],
            "properties": {
              "raw": {
                "description": "The raw plugin description.",
                "type": "string"
              },
              "rendered": {
                "description": "The plugin description formatted for display.",
                "type": "string"
              }
            }
          },
          "version": {
            "description": "The plugin version number.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ]
          },
          "network_only": {
            "description": "Whether the plugin can only be activated network-wide.",
            "type": "boolean",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "requires_wp": {
            "description": "Minimum required version of WordPress.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "requires_php": {
            "description": "Minimum required version of PHP.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "textdomain": {
            "description": "The plugin's text domain.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit"
            ]
          }
        }
      },
      "sidebar": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "sidebar",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of sidebar.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "Unique name identifying the sidebar.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "Description of sidebar.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "class": {
            "description": "Extra CSS class to assign to the sidebar in the Widgets interface.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "before_widget": {
            "description": "HTML content to prepend to each widget's HTML output when assigned to this sidebar. Default is an opening list item element.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "after_widget": {
            "description": "HTML content to append to each widget's HTML output when assigned to this sidebar. Default is a closing list item element.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "before_title": {
            "description": "HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "after_title": {
            "description": "HTML content to append to the sidebar title when displayed. Default is a closing h2 element.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "status": {
            "description": "Status of sidebar.",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "widgets": {
            "description": "Nested widgets.",
            "type": "array",
            "items": {
              "type": "string"
            },
            
            "context": [
              "embed",
              "view",
              "edit"
            ]
          }
        }
      },
      "widget-type": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "widget-type",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique slug identifying the widget type.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "name": {
            "description": "Human-readable name identifying the widget type.",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "Description of the widget.",
            "type": "string",
            "default": "",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "is_multi": {
            "description": "Whether the widget supports multiple instances",
            "type": "boolean",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "classname": {
            "description": "Class name",
            "type": "string",
            "default": "",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "widget": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "widget",
        "type": "object",
        "required": [
          "sidebar"
        ],
        "properties": {
          "id": {
            "description": "Unique identifier for the widget.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "id_base": {
            "description": "The type of the widget. Corresponds to ID in widget-types endpoint.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "sidebar": {
            "description": "The sidebar the widget belongs to.",
            "type": "string",
            "default": "wp_inactive_widgets",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "rendered": {
            "description": "HTML representation of the widget.",
            "type": "string",
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "readonly": true
          },
          "rendered_form": {
            "description": "HTML representation of the widget admin form.",
            "type": "string",
            "context": [
              "edit"
            ],
            "readonly": true
          },
          "instance": {
            "description": "Instance settings of the widget, if supported.",
            "type": "object",
            "context": [
              "edit"
            ],
            "properties": {
              "encoded": {
                "description": "Base64 encoded representation of the instance settings.",
                "type": "string",
                "context": [
                  "edit"
                ]
              },
              "hash": {
                "description": "Cryptographic hash of the instance settings.",
                "type": "string",
                "context": [
                  "edit"
                ]
              }
            }
          },
          "form_data": {
            "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only.",
            "type": "string",
            "context": []
          }
        }
      },
      "block-directory-item": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "block-directory-item",
        "type": "object",
        "properties": {
          "name": {
            "description": "The block name, in namespace/block-name format.",
            "type": "string",
            "context": [
              "view"
            ]
          },
          "title": {
            "description": "The block title, in human readable format.",
            "type": "string",
            "context": [
              "view"
            ]
          },
          "description": {
            "description": "A short description of the block, in human readable format.",
            "type": "string",
            "context": [
              "view"
            ]
          },
          "id": {
            "description": "The block slug.",
            "type": "string",
            "context": [
              "view"
            ]
          },
          "rating": {
            "description": "The star rating of the block.",
            "type": "number",
            "context": [
              "view"
            ]
          },
          "rating_count": {
            "description": "The number of ratings.",
            "type": "integer",
            "context": [
              "view"
            ]
          },
          "active_installs": {
            "description": "The number sites that have activated this block.",
            "type": "integer",
            "context": [
              "view"
            ]
          },
          "author_block_rating": {
            "description": "The average rating of blocks published by the same author.",
            "type": "number",
            "context": [
              "view"
            ]
          },
          "author_block_count": {
            "description": "The number of blocks published by the same author.",
            "type": "integer",
            "context": [
              "view"
            ]
          },
          "author": {
            "description": "The WordPress.org username of the block author.",
            "type": "string",
            "context": [
              "view"
            ]
          },
          "icon": {
            "description": "The block icon.",
            "type": "string",
            "format": "uri",
            "context": [
              "view"
            ]
          },
          "last_updated": {
            "description": "The date when the block was last updated.",
            "type": "string",
            "format": "date-time",
            "context": [
              "view"
            ]
          },
          "humanized_updated": {
            "description": "The date when the block was last updated, in fuzzy human readable format.",
            "type": "string",
            "context": [
              "view"
            ]
          }
        }
      },
      "pattern-directory-item": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "pattern-directory-item",
        "type": "object",
        "properties": {
          "id": {
            "description": "The pattern ID.",
            "type": "integer",
            "minimum": 1,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The pattern title, in human readable format.",
            "type": "string",
            "minLength": 1,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "content": {
            "description": "The pattern content.",
            "type": "string",
            "minLength": 1,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "categories": {
            "description": "The pattern's category slugs.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "keywords": {
            "description": "The pattern's keywords.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "description": {
            "description": "A description of the pattern.",
            "type": "string",
            "minLength": 1,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "viewport_width": {
            "description": "The preferred width of the viewport when previewing a pattern, in pixels.",
            "type": "integer",
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "block_types": {
            "description": "The block types which can use this pattern.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "context": [
              "view",
              "embed"
            ]
          }
        }
      },
      "block-pattern": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "block-pattern",
        "type": "object",
        "properties": {
          "name": {
            "description": "The pattern name.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "title": {
            "description": "The pattern title, in human readable format.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "content": {
            "description": "The pattern content.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "description": {
            "description": "The pattern detailed description.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "viewport_width": {
            "description": "The pattern viewport width for inserter preview.",
            "type": "number",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "inserter": {
            "description": "Determines whether the pattern is visible in inserter.",
            "type": "boolean",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "categories": {
            "description": "The pattern category slugs.",
            "type": "array",
            "items":{"type": "string"},
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "keywords": {
            "description": "The pattern keywords.",
            "type": "array",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "items": {"type": "string"}
          },
          "block_types": {
            "description": "Block types that the pattern is intended to be used with.",
            "type": "array",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "items": {"type": "string"}
          },
          "post_types": {
            "description": "An array of post types that the pattern is restricted to be used with.",
            "type": "array",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "items": {"type": "string"}
          },
          "template_types": {
            "description": "An array of template types where the pattern fits.",
            "type": "array",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ],
            "items": {"type": "string"}
          }
        }
      },
      "block-pattern-category": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "block-pattern-category",
        "type": "object",
        "properties": {
          "name": {
            "description": "The category name.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "label": {
            "description": "The category label, in human readable format.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          },
          "description": {
            "description": "The category description, in human readable format.",
            "type": "string",
            "readonly": true,
            "context": [
              "view",
              "edit",
              "embed"
            ]
          }
        }
      },
      "menu-location": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "menu-location",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the menu location.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "description": {
            "description": "The description of the menu location.",
            "type": "string",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          },
          "menu": {
            "description": "The ID of the assigned menu.",
            "type": "integer",
            "context": [
              "embed",
              "view",
              "edit"
            ],
            "readonly": true
          }
        }
      },
      "wp-site-health-test": {
        "title": "wp-site-health-test",
        "type": "object",
        "properties": {
          "test": {
            "type": "string",
            "description": "The name of the test being run.",
            "readonly": true
          },
          "label": {
            "type": "string",
            "description": "A label describing the test.",
            "readonly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the test.",
            "enum": [
              "good",
              "recommended",
              "critical"
            ],
            "readonly": true
          },
          "badge": {
            "type": "object",
            "description": "The category this test is grouped in.",
            "properties": {
              "label": {
                "type": "string",
                "readonly": true
              },
              "color": {
                "type": "string",
                "enum": [
                  "blue",
                  "orange",
                  "red",
                  "green",
                  "purple",
                  "gray"
                ],
                "readonly": true
              }
            },
            "readonly": true
          },
          "description": {
            "type": "string",
            "description": "A more descriptive explanation of what the test looks for, and why it is important for the user.",
            "readonly": true
          },
          "actions": {
            "type": "string",
            "description": "HTML containing an action to direct the user to where they can resolve the issue.",
            "readonly": true
          }
        }
      }
    }
  },
  "paths": {
    "/oembed/1.0": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/oembed/1.0_get"
      }
    },
    "/oembed/1.0/embed": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL of the resource for which to fetch oEmbed data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "description": "The URL of the resource for which to fetch oEmbed data."
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/oembed/1.0/embed_get"
      }
    },
    "/oembed/1.0/proxy": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL of the resource for which to fetch oEmbed data.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "description": "The URL of the resource for which to fetch oEmbed data."
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The oEmbed format to use.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The oEmbed format to use.",
              "enum": [
                "json",
                "xml"
              ]
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "description": "The maximum width of the embed frame in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The maximum width of the embed frame in pixels."
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "description": "The maximum height of the embed frame in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The maximum height of the embed frame in pixels."
            }
          },
          {
            "name": "discover",
            "in": "query",
            "description": "Whether to perform an oEmbed discovery request for unsanctioned providers.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to perform an oEmbed discovery request for unsanctioned providers."
            }
          }
        ],
        "operationId": "/oembed/1.0/proxy_get"
      }
    },
    "/wp/v2": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp/v2_get"
      }
    },
    "/wp/v2/posts": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set based on relationship between multiple taxonomies.",
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                },
                "include_children": {
                  "type": "boolean",
                  "description": "Whether to include child terms in the terms limiting the result set."
                },
                "operator": {
                  "type": "string",
                  "description": "Whether items must be assigned all or any of the specified terms.",
                  "enum": [
                    "AND",
                    "OR"
                  ]
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "categories_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the categories taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                },
                "include_children": {
                  "type": "boolean",
                  "description": "Whether to include child terms in the terms limiting the result set."
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                },
                "operator": {
                  "type": "string",
                  "description": "Whether items must be assigned all or any of the specified terms.",
                  "enum": [
                    "AND",
                    "OR"
                  ]
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "tags_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the tags taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "sticky",
            "in": "query",
            "description": "Limit result set to items that are sticky.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Limit result set to items that are sticky."
            }
          }
        ],
        "operationId": "/wp/v2/posts_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                      
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "format": {
                    "type": "string",
                    "description": "The format for the post."
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether or not the post should be treated as sticky."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "categories": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the category taxonomy."
                  },
                  "tags": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the post_tag taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts_post"
      }
    },
    "/wp/v2/posts/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the post if it is password protected."
            }
          }
        ],
        "operationId": "/wp/v2/posts/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "format": {
                    "type": "string",
                    "description": "The format for the post."
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether or not the post should be treated as sticky."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "categories": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the category taxonomy."
                  },
                  "tags": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the post_tag taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "format": {
                    "type": "string",
                    "description": "The format for the post."
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether or not the post should be treated as sticky."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "categories": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the category taxonomy."
                  },
                  "tags": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the post_tag taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "format": {
                    "type": "string",
                    "description": "The format for the post."
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether or not the post should be treated as sticky."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "categories": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the category taxonomy."
                  },
                  "tags": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the post_tag taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{id}_delete"
      }
    },
    "/wp/v2/posts/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/posts/{parent}/revisions_get"
      }
    },
    "/wp/v2/posts/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/posts/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/posts/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "/wp/v2/posts/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the autosave."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "format": {
                    "type": "string",
                    "description": "The format for the post."
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether or not the post should be treated as sticky."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "categories": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the category taxonomy."
                  },
                  "tags": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The terms assigned to the post in the post_tag taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/posts/{id}/autosaves_post"
      }
    },
    "/wp/v2/posts/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/post-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/posts/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/pages": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to posts with a specific menu_order value."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to items with particular parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to all items except those of a particular parent ID."
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "operationId": "/wp/v2/pages_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The order of the post in relation to other posts."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages_post"
      }
    },
    "/wp/v2/pages/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the post if it is password protected."
            }
          }
        ],
        "operationId": "/wp/v2/pages/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The order of the post in relation to other posts."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The order of the post in relation to other posts."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The order of the post in relation to other posts."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{id}_delete"
      }
    },
    "/wp/v2/pages/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/pages/{parent}/revisions_get"
      }
    },
    "/wp/v2/pages/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/pages/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/pages/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/pages/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the post."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "excerpt": {
                    "type": "object",
                    "description": "The excerpt for the post."
                  },
                  "featured_media": {
                    "type": "integer",
                    "description": "The ID of the featured media for the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The order of the post in relation to other posts."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/pages/{id}/autosaves_post"
      }
    },
    "/wp/v2/pages/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/pages/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/media": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to posts assigned to specific authors."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes posts assigned to specific authors.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes posts assigned to specific authors."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to items with particular parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to items with particular parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Limit result set to all items except those of a particular parent ID.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to all items except those of a particular parent ID."
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "inherit",
                  "private",
                  "trash"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "media_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular media type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to attachments of a particular media type.",
              "enum": [
                "image",
                "video",
                "text",
                "application",
                "audio"
              ]
            }
          },
          {
            "name": "mime_type",
            "in": "query",
            "description": "Limit result set to attachments of a particular MIME type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to attachments of a particular MIME type."
            }
          }
        ],
        "operationId": "/wp/v2/media_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "alt_text": {
                    "type": "string",
                    "description": "Alternative text to display when attachment is not displayed."
                  },
                  "caption": {
                    "type": "object",
                    "description": "The attachment caption."
                  },
                  "description": {
                    "type": "object",
                    "description": "The attachment description."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID for the associated post of the attachment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/media_post"
      }
    },
    "/wp/v2/media/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/media/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "alt_text": {
                    "type": "string",
                    "description": "Alternative text to display when attachment is not displayed."
                  },
                  "caption": {
                    "type": "object",
                    "description": "The attachment caption."
                  },
                  "description": {
                    "type": "object",
                    "description": "The attachment description."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID for the associated post of the attachment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "alt_text": {
                    "type": "string",
                    "description": "Alternative text to display when attachment is not displayed."
                  },
                  "caption": {
                    "type": "object",
                    "description": "The attachment caption."
                  },
                  "description": {
                    "type": "object",
                    "description": "The attachment description."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID for the associated post of the attachment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the post."
                  },
                  "comment_status": {
                    "type": "string",
                    "description": "Whether or not comments are open on the post."
                  },
                  "ping_status": {
                    "type": "string",
                    "description": "Whether or not the post can be pinged."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  },
                  "alt_text": {
                    "type": "string",
                    "description": "Alternative text to display when attachment is not displayed."
                  },
                  "caption": {
                    "type": "object",
                    "description": "The attachment caption."
                  },
                  "description": {
                    "type": "object",
                    "description": "The attachment description."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID for the associated post of the attachment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attachment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}_delete"
      }
    },
    "/wp/v2/media/{id}/post-process": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the attachment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the attachment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "required": true
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}/post-process_post"
      }
    },
    "/wp/v2/media/{id}/edit": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "src": {
                    "type": "string",
                    "required": true,
                    "description": "URL to the edited image file."
                  },
                  "modifiers": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Array of image edits."
                  },
                  "rotation": {
                    "type": "integer",
                    "description": "The amount to rotate the image clockwise in degrees. DEPRECATED: Use `modifiers` instead."
                  },
                  "x": {
                    "type": "number",
                    "description": "As a percentage of the image, the x position to start the crop from. DEPRECATED: Use `modifiers` instead."
                  },
                  "y": {
                    "type": "number",
                    "description": "As a percentage of the image, the y position to start the crop from. DEPRECATED: Use `modifiers` instead."
                  },
                  "width": {
                    "type": "number",
                    "description": "As a percentage of the image, the width to crop the image to. DEPRECATED: Use `modifiers` instead."
                  },
                  "height": {
                    "type": "number",
                    "description": "As a percentage of the image, the height to crop the image to. DEPRECATED: Use `modifiers` instead."
                  }
                },
                "required": [
                  "src"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/media/{id}/edit_post"
      }
    },
    "/wp/v2/menu-items": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "menu_order"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          },
          {
            "name": "tax_relation",
            "in": "query",
            "description": "Limit result set based on relationship between multiple taxonomies.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set based on relationship between multiple taxonomies.",
              "enum": [
                "AND",
                "OR"
              ]
            }
          },
          {
            "name": "menus",
            "in": "query",
            "description": "Limit result set to items with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                },
                "operator": {
                  "type": "string",
                  "description": "Whether items must be assigned all or any of the specified terms.",
                  "enum": [
                    "AND",
                    "OR"
                  ]
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "menus_exclude",
            "in": "query",
            "description": "Limit result set to items except those with specific terms assigned in the menus taxonomy.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "terms": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "Term IDs."
                }
              },
              "description": "Perform an advanced term query."
            }
          },
          {
            "name": "menu_order",
            "in": "query",
            "description": "Limit result set to posts with a specific menu_order value.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to posts with a specific menu_order value."
            }
          }
        ],
        "operationId": "/wp/v2/menu-items_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title for the object."
                  },
                  "type": {
                    "type": "string",
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\"."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the object."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the object."
                  },
                  "attr_title": {
                    "type": "string",
                    "description": "Text for the title attribute of the link element for this menu item."
                  },
                  "classes": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Class names for the link element of this menu item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of this menu item."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
                  },
                  "object": {
                    "type": "string",
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
                  },
                  "object_id": {
                    "type": "integer",
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
                  },
                  "target": {
                    "type": "string",
                    "description": "The target attribute of the link element for this menu item."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to which this menu item points."
                  },
                  "xfn": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The XFN relationship expressed in the link of this menu item."
                  },
                  "menus": {
                    "type": "integer",
                    "description": "The terms assigned to the object in the nav_menu taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items_post"
      }
    },
    "/wp/v2/menu-items/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/menu-items/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title for the object."
                  },
                  "type": {
                    "type": "string",
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\"."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the object."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the object."
                  },
                  "attr_title": {
                    "type": "string",
                    "description": "Text for the title attribute of the link element for this menu item."
                  },
                  "classes": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Class names for the link element of this menu item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of this menu item."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
                  },
                  "object": {
                    "type": "string",
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
                  },
                  "object_id": {
                    "type": "integer",
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
                  },
                  "target": {
                    "type": "string",
                    "description": "The target attribute of the link element for this menu item."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to which this menu item points."
                  },
                  "xfn": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The XFN relationship expressed in the link of this menu item."
                  },
                  "menus": {
                    "type": "integer",
                    "description": "The terms assigned to the object in the nav_menu taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title for the object."
                  },
                  "type": {
                    "type": "string",
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\"."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the object."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the object."
                  },
                  "attr_title": {
                    "type": "string",
                    "description": "Text for the title attribute of the link element for this menu item."
                  },
                  "classes": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Class names for the link element of this menu item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of this menu item."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
                  },
                  "object": {
                    "type": "string",
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
                  },
                  "object_id": {
                    "type": "integer",
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
                  },
                  "target": {
                    "type": "string",
                    "description": "The target attribute of the link element for this menu item."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to which this menu item points."
                  },
                  "xfn": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The XFN relationship expressed in the link of this menu item."
                  },
                  "menus": {
                    "type": "integer",
                    "description": "The terms assigned to the object in the nav_menu taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title for the object."
                  },
                  "type": {
                    "type": "string",
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\"."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the object."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the object."
                  },
                  "attr_title": {
                    "type": "string",
                    "description": "Text for the title attribute of the link element for this menu item."
                  },
                  "classes": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Class names for the link element of this menu item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of this menu item."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
                  },
                  "object": {
                    "type": "string",
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
                  },
                  "object_id": {
                    "type": "integer",
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
                  },
                  "target": {
                    "type": "string",
                    "description": "The target attribute of the link element for this menu item."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to which this menu item points."
                  },
                  "xfn": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The XFN relationship expressed in the link of this menu item."
                  },
                  "menus": {
                    "type": "integer",
                    "description": "The terms assigned to the object in the nav_menu taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items/{id}_delete"
      }
    },
    "/wp/v2/menu-items/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/menu-items/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the object."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title for the object."
                  },
                  "type": {
                    "type": "string",
                    "description": "The family of objects originally represented, such as \"post_type\" or \"taxonomy\"."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the object."
                  },
                  "attr_title": {
                    "type": "string",
                    "description": "Text for the title attribute of the link element for this menu item."
                  },
                  "classes": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Class names for the link element of this menu item."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of this menu item."
                  },
                  "menu_order": {
                    "type": "integer",
                    "description": "The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0."
                  },
                  "object": {
                    "type": "string",
                    "description": "The type of object originally represented, such as \"category\", \"post\", or \"attachment\"."
                  },
                  "object_id": {
                    "type": "integer",
                    "description": "The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories."
                  },
                  "target": {
                    "type": "string",
                    "description": "The target attribute of the link element for this menu item."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to which this menu item points."
                  },
                  "xfn": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The XFN relationship expressed in the link of this menu item."
                  },
                  "menus": {
                    "type": "integer",
                    "description": "The terms assigned to the object in the nav_menu taxonomy."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menu-items/{id}/autosaves_post"
      }
    },
    "/wp/v2/menu-items/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu_item-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/menu-items/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/blocks": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "operationId": "/wp/v2/blocks_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks_post"
      }
    },
    "/wp/v2/blocks/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the post if it is password protected."
            }
          }
        ],
        "operationId": "/wp/v2/blocks/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{id}_delete"
      }
    },
    "/wp/v2/blocks/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/blocks/{parent}/revisions_get"
      }
    },
    "/wp/v2/blocks/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/blocks/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/blocks/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/blocks/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the autosave."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/blocks/{id}/autosaves_post"
      }
    },
    "/wp/v2/blocks/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_block-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/blocks/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/templates": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit to the specified post id."
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit to the specified template part area."
            }
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Post type to get the templates for."
            }
          }
        ],
        "operationId": "/wp/v2/templates_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "required": true,
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/templates_post"
      }
    },
    "/wp/v2/templates/lookup": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the template to get the fallback for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The slug of the template to get the fallback for"
            }
          },
          {
            "name": "is_custom",
            "in": "query",
            "description": "Indicates if a template is custom or part of the template hierarchy",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates if a template is custom or part of the template hierarchy"
            }
          },
          {
            "name": "template_prefix",
            "in": "query",
            "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`"
            }
          }
        ],
        "operationId": "/wp/v2/templates/lookup_get"
      }
    },
    "/wp/v2/templates/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/templates/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{id}_delete"
      }
    },
    "/wp/v2/templates/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/templates/{parent}/revisions_get"
      }
    },
    "/wp/v2/templates/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/templates/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/templates/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/templates/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the autosave."
                  },
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/templates/{id}/autosaves_post"
      }
    },
    "/wp/v2/templates/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/templates/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/template-parts": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "wp_id",
            "in": "query",
            "description": "Limit to the specified post id.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit to the specified post id."
            }
          },
          {
            "name": "area",
            "in": "query",
            "description": "Limit to the specified template part area.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit to the specified template part area."
            }
          },
          {
            "name": "post_type",
            "in": "query",
            "description": "Post type to get the templates for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Post type to get the templates for."
            }
          }
        ],
        "operationId": "/wp/v2/template-parts_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "required": true,
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  },
                  "area": {
                    "type": "string",
                    "description": "Where the template part is intended for use (header, footer, etc.)"
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts_post"
      }
    },
    "/wp/v2/template-parts/lookup": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "The slug of the template to get the fallback for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The slug of the template to get the fallback for"
            }
          },
          {
            "name": "is_custom",
            "in": "query",
            "description": "Indicates if a template is custom or part of the template hierarchy",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Indicates if a template is custom or part of the template hierarchy"
            }
          },
          {
            "name": "template_prefix",
            "in": "query",
            "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy`"
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/lookup_get"
      }
    },
    "/wp/v2/template-parts/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  },
                  "area": {
                    "type": "string",
                    "description": "Where the template part is intended for use (header, footer, etc.)"
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  },
                  "area": {
                    "type": "string",
                    "description": "Where the template part is intended for use (header, footer, etc.)"
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  },
                  "area": {
                    "type": "string",
                    "description": "Where the template part is intended for use (header, footer, etc.)"
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{id}_delete"
      }
    },
    "/wp/v2/template-parts/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/{parent}/revisions_get"
      }
    },
    "/wp/v2/template-parts/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/template-parts/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the autosave."
                  },
                  "slug": {
                    "type": "string",
                    "description": "Unique slug identifying the template."
                  },
                  "theme": {
                    "type": "string",
                    "description": "Theme identifier for the template."
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of template."
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of template."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of template."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of template."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of template."
                  },
                  "author": {
                    "type": "integer",
                    "description": "The ID for the author of the template."
                  },
                  "area": {
                    "type": "string",
                    "description": "Where the template part is intended for use (header, footer, etc.)"
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/template-parts/{id}/autosaves_post"
      }
    },
    "/wp/v2/template-parts/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_template_part-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/template-parts/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/navigation": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to posts published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_after",
            "in": "query",
            "description": "Limit response to posts modified after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified after a given ISO8601 compliant date."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to posts published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "modified_before",
            "in": "query",
            "description": "Limit response to posts modified before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to posts modified before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          },
          {
            "name": "search_columns",
            "in": "query",
            "description": "Array of column names to be searched.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post_title",
                  "post_content",
                  "post_excerpt"
                ]
              },
              "description": "Array of column names to be searched."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to posts with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to posts with one or more specific slugs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to posts assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "publish",
                  "future",
                  "draft",
                  "pending",
                  "private",
                  "trash",
                  "auto-draft",
                  "inherit",
                  "request-pending",
                  "request-confirmed",
                  "request-failed",
                  "request-completed",
                  "any"
                ]
              },
              "description": "Limit result set to posts assigned one or more statuses."
            }
          }
        ],
        "operationId": "/wp/v2/navigation_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation_post"
      }
    },
    "/wp/v2/navigation/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the post if it is password protected."
            }
          }
        ],
        "operationId": "/wp/v2/navigation/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the post.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the post."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{id}_delete"
      }
    },
    "/wp/v2/navigation/{parent}/revisions": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by object attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by object attribute.",
              "enum": [
                "date",
                "id",
                "include",
                "relevance",
                "slug",
                "include_slugs",
                "title"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/navigation/{parent}/revisions_get"
      }
    },
    "/wp/v2/navigation/{parent}/revisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/navigation/{parent}/revisions/{id}_get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the revision."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the revision.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the revision."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as revisions do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{parent}/revisions/{id}_delete"
      }
    },
    "/wp/v2/navigation/{id}/autosaves": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "The ID for the parent of the autosave.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/navigation/{id}/autosaves_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the autosave."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the post was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the post was published, as GMT."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the post unique to its type."
                  },
                  "status": {
                    "type": "string",
                    "description": "A named status for the post."
                  },
                  "password": {
                    "type": "string",
                    "description": "A password to protect access to the content and excerpt."
                  },
                  "title": {
                    "type": "object",
                    "description": "The title for the post."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the post."
                  },
                  "template": {
                    "type": "string",
                    "description": "The theme file to use to display the post."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/navigation/{id}/autosaves_post"
      }
    },
    "/wp/v2/navigation/{parent}/autosaves/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_navigation-revision"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "description": "The ID for the parent of the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the parent of the autosave."
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the autosave.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID for the autosave."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/navigation/{parent}/autosaves/{id}_get"
      }
    },
    "/wp/v2/types": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/types_get"
      }
    },
    "/wp/v2/types/{type}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "An alphanumeric identifier for the post type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alphanumeric identifier for the post type."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/types/{type}_get"
      }
    },
    "/wp/v2/statuses": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/statuses_get"
      }
    },
    "/wp/v2/statuses/{status}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "description": "An alphanumeric identifier for the status.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alphanumeric identifier for the status."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/statuses/{status}_get"
      }
    },
    "/wp/v2/taxonomies": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonomy"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to taxonomies associated with a specific post type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to taxonomies associated with a specific post type."
            }
          }
        ],
        "operationId": "/wp/v2/taxonomies_get"
      }
    },
    "/wp/v2/taxonomies/{taxonomy}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonomy"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "taxonomy",
            "in": "path",
            "description": "An alphanumeric identifier for the taxonomy.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alphanumeric identifier for the taxonomy."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/taxonomies/{taxonomy}_get"
      }
    },
    "/wp/v2/categories": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to hide terms not assigned to any posts."
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific parent.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to terms assigned to a specific parent."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to terms assigned to a specific post."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "operationId": "/wp/v2/categories_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The parent term ID."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/categories_post"
      }
    },
    "/wp/v2/categories/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/categories/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The parent term ID."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/categories/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The parent term ID."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/categories/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The parent term ID."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/categories/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as terms do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/categories/{id}_delete"
      }
    },
    "/wp/v2/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to hide terms not assigned to any posts."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to terms assigned to a specific post."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "operationId": "/wp/v2/tags_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/tags_post"
      }
    },
    "/wp/v2/tags/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/tags/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/tags/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/tags/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/tags/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as terms do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/tags/{id}_delete"
      }
    },
    "/wp/v2/menus": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by term attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by term attribute.",
              "enum": [
                "id",
                "include",
                "name",
                "slug",
                "include_slugs",
                "term_group",
                "description",
                "count"
              ]
            }
          },
          {
            "name": "hide_empty",
            "in": "query",
            "description": "Whether to hide terms not assigned to any posts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to hide terms not assigned to any posts."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to terms assigned to a specific post.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit result set to terms assigned to a specific post."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to terms with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to terms with one or more specific slugs."
            }
          }
        ],
        "operationId": "/wp/v2/menus_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "locations": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The locations assigned to the menu."
                  },
                  "auto_add": {
                    "type": "boolean",
                    "description": "Whether to automatically add top level pages to this menu."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/menus_post"
      }
    },
    "/wp/v2/menus/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/menus/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "locations": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The locations assigned to the menu."
                  },
                  "auto_add": {
                    "type": "boolean",
                    "description": "Whether to automatically add top level pages to this menu."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menus/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "locations": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The locations assigned to the menu."
                  },
                  "auto_add": {
                    "type": "boolean",
                    "description": "Whether to automatically add top level pages to this menu."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menus/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "HTML description of the term."
                  },
                  "name": {
                    "type": "string",
                    "description": "HTML title for the term."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the term unique to its type."
                  },
                  "locations": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "The locations assigned to the menu."
                  },
                  "auto_add": {
                    "type": "boolean",
                    "description": "Whether to automatically add top level pages to this menu."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menus/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nav_menu"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the term.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the term."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as terms do not support trashing."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/menus/{id}_delete"
      }
    },
    "/wp/v2/users": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by user attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by user attribute.",
              "enum": [
                "id",
                "include",
                "name",
                "registered_date",
                "slug",
                "include_slugs",
                "email",
                "url"
              ]
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit result set to users with one or more specific slugs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to users with one or more specific slugs."
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Limit result set to users matching at least one specific role provided. Accepts csv list or single role.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to users matching at least one specific role provided. Accepts csv list or single role."
            }
          },
          {
            "name": "capabilities",
            "in": "query",
            "description": "Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability."
            }
          },
          {
            "name": "who",
            "in": "query",
            "description": "Limit result set to users who are considered authors.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to users who are considered authors.",
              "enum": [
                "authors"
              ]
            }
          },
          {
            "name": "has_published_posts",
            "in": "query",
            "description": "Limit result set to users who have published posts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Limit result set to users who have published posts."
            }
          }
        ],
        "operationId": "/wp/v2/users_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "required": true,
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "required": true,
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "required": true,
                    "description": "Password for the user (never included)."
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/users_post"
      }
    },
    "/wp/v2/users/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the user."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/users/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the user."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the user."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the user."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the user.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the user."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as users do not support trashing."
                  },
                  "reassign": {
                    "type": "integer",
                    "required": true,
                    "description": "Reassign the deleted user's posts and links to this user ID."
                  }
                },
                "required": [
                  "reassign"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{id}_delete"
      }
    },
    "/wp/v2/users/me": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/users/me_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/me_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/me_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Login name for the user."
                  },
                  "name": {
                    "type": "string",
                    "description": "Display name for the user."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name for the user."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name for the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the user."
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of the user."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the user."
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale for the user."
                  },
                  "nickname": {
                    "type": "string",
                    "description": "The nickname for the user."
                  },
                  "slug": {
                    "type": "string",
                    "description": "An alphanumeric identifier for the user."
                  },
                  "roles": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Roles assigned to the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user (never included)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/me_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Required to be true, as users do not support trashing."
                  },
                  "reassign": {
                    "type": "integer",
                    "required": true,
                    "description": "Reassign the deleted user's posts and links to this user ID."
                  }
                },
                "required": [
                  "reassign"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/users/me_delete"
      }
    },
    "/wp/v2/users/{user_id}/application-passwords": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/users/{user_id}/application-passwords_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
                  },
                  "name": {
                    "type": "string",
                    "required": true,
                    "description": "The name of the application password."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{user_id}/application-passwords_post"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/users/{user_id}/application-passwords_delete"
      }
    },
    "/wp/v2/users/{user_id}/application-passwords/introspect": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/users/{user_id}/application-passwords/introspect_get"
      }
    },
    "/wp/v2/users/{user_id}/application-passwords/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp/v2/users/{user_id}/application-passwords/{uuid}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the application password."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{user_id}/application-passwords/{uuid}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the application password."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{user_id}/application-passwords/{uuid}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the application password."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/users/{user_id}/application-passwords/{uuid}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-password"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp/v2/users/{user_id}/application-passwords/{uuid}_delete"
      }
    },
    "/wp/v2/comments": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Limit response to comments published after a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to comments published after a given ISO8601 compliant date."
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Limit result set to comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to comments assigned to specific user IDs. Requires authorization."
            }
          },
          {
            "name": "author_exclude",
            "in": "query",
            "description": "Ensure result set excludes comments assigned to specific user IDs. Requires authorization.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes comments assigned to specific user IDs. Requires authorization."
            }
          },
          {
            "name": "author_email",
            "in": "query",
            "description": "Limit result set to that from a specific author email. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email",
              "description": "Limit result set to that from a specific author email. Requires authorization."
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Limit response to comments published before a given ISO8601 compliant date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Limit response to comments published before a given ISO8601 compliant date."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by comment attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by comment attribute.",
              "enum": [
                "date",
                "date_gmt",
                "id",
                "include",
                "post",
                "parent",
                "type"
              ]
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Limit result set to comments of specific parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to comments of specific parent IDs."
            }
          },
          {
            "name": "parent_exclude",
            "in": "query",
            "description": "Ensure result set excludes specific parent IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific parent IDs."
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit result set to comments assigned to specific post IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to comments assigned to specific post IDs."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to comments assigned a specific status. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to comments assigned a specific status. Requires authorization."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit result set to comments assigned a specific type. Requires authorization.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit result set to comments assigned a specific type. Requires authorization."
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the post if it is password protected.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the post if it is password protected."
            }
          }
        ],
        "operationId": "/wp/v2/comments_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "integer",
                    "description": "The ID of the user object, if author was a user."
                  },
                  "author_email": {
                    "type": "string",
                    "description": "Email address for the comment author."
                  },
                  "author_ip": {
                    "type": "string",
                    "description": "IP address for the comment author."
                  },
                  "author_name": {
                    "type": "string",
                    "description": "Display name for the comment author."
                  },
                  "author_url": {
                    "type": "string",
                    "description": "URL for the comment author."
                  },
                  "author_user_agent": {
                    "type": "string",
                    "description": "User agent for the comment author."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the comment."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the comment was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the comment was published, as GMT."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the comment."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID of the associated post object."
                  },
                  "status": {
                    "type": "string",
                    "description": "State of the comment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/comments_post"
      }
    },
    "/wp/v2/comments/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the comment."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the parent post of the comment (if the post is password protected).",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The password for the parent post of the comment (if the post is password protected)."
            }
          }
        ],
        "operationId": "/wp/v2/comments/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the comment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "integer",
                    "description": "The ID of the user object, if author was a user."
                  },
                  "author_email": {
                    "type": "string",
                    "description": "Email address for the comment author."
                  },
                  "author_ip": {
                    "type": "string",
                    "description": "IP address for the comment author."
                  },
                  "author_name": {
                    "type": "string",
                    "description": "Display name for the comment author."
                  },
                  "author_url": {
                    "type": "string",
                    "description": "URL for the comment author."
                  },
                  "author_user_agent": {
                    "type": "string",
                    "description": "User agent for the comment author."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the comment."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the comment was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the comment was published, as GMT."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the comment."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID of the associated post object."
                  },
                  "status": {
                    "type": "string",
                    "description": "State of the comment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/comments/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the comment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "integer",
                    "description": "The ID of the user object, if author was a user."
                  },
                  "author_email": {
                    "type": "string",
                    "description": "Email address for the comment author."
                  },
                  "author_ip": {
                    "type": "string",
                    "description": "IP address for the comment author."
                  },
                  "author_name": {
                    "type": "string",
                    "description": "Display name for the comment author."
                  },
                  "author_url": {
                    "type": "string",
                    "description": "URL for the comment author."
                  },
                  "author_user_agent": {
                    "type": "string",
                    "description": "User agent for the comment author."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the comment."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the comment was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the comment was published, as GMT."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the comment."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID of the associated post object."
                  },
                  "status": {
                    "type": "string",
                    "description": "State of the comment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/comments/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the comment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "integer",
                    "description": "The ID of the user object, if author was a user."
                  },
                  "author_email": {
                    "type": "string",
                    "description": "Email address for the comment author."
                  },
                  "author_ip": {
                    "type": "string",
                    "description": "IP address for the comment author."
                  },
                  "author_name": {
                    "type": "string",
                    "description": "Display name for the comment author."
                  },
                  "author_url": {
                    "type": "string",
                    "description": "URL for the comment author."
                  },
                  "author_user_agent": {
                    "type": "string",
                    "description": "User agent for the comment author."
                  },
                  "content": {
                    "type": "object",
                    "description": "The content for the comment."
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the comment was published, in the site's timezone."
                  },
                  "date_gmt": {
                    "type": "string",
                    "description": "The date the comment was published, as GMT."
                  },
                  "parent": {
                    "type": "integer",
                    "description": "The ID for the parent of the comment."
                  },
                  "post": {
                    "type": "integer",
                    "description": "The ID of the associated post object."
                  },
                  "status": {
                    "type": "string",
                    "description": "State of the comment."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/comments/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Unique identifier for the comment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to bypass Trash and force deletion."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the parent post of the comment (if the post is password protected)."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/comments/{id}_delete"
      }
    },
    "/wp/v2/search": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search-result"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit results to items of an object type.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to items of an object type.",
              "enum": [
                "post",
                "term",
                "post-format"
              ]
            }
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Limit results to items of one or more object subtypes.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "post",
                  "page",
                  "category",
                  "post_tag",
                  "any"
                ]
              },
              "description": "Limit results to items of one or more object subtypes."
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Ensure result set excludes specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Ensure result set excludes specific IDs."
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Limit result set to specific IDs.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "description": "Limit result set to specific IDs."
            }
          }
        ],
        "operationId": "/wp/v2/search_get"
      }
    },
    "/wp/v2/block-renderer/{name}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rendered-block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique registered name for the block."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "edit"
              ]
            }
          },
          {
            "name": "post_id",
            "in": "query",
            "description": "ID of the post context.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "ID of the post context."
            }
          }
        ],
        "operationId": "/wp/v2/block-renderer/{name}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rendered-block"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Unique registered name for the block.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique registered name for the block."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "Scope under which the request is made; determines fields present in response."
                  },
                  "post_id": {
                    "type": "integer",
                    "description": "ID of the post context."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/block-renderer/{name}_post"
      }
    },
    "/wp/v2/block-types": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Block namespace.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Block namespace."
            }
          }
        ],
        "operationId": "/wp/v2/block-types_get"
      }
    },
    "/wp/v2/block-types/{namespace}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Block namespace."
            }
          }
        ],
        "operationId": "/wp/v2/block-types/{namespace}_get"
      }
    },
    "/wp/v2/block-types/{namespace}/{name}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Block name.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Block name."
            }
          },
          {
            "name": "namespace",
            "in": "path",
            "description": "Block namespace.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Block namespace."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/block-types/{namespace}/{name}_get"
      }
    },
    "/wp/v2/global-styles/themes/{stylesheet}/variations": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The theme identifier"
            }
          }
        ],
        "operationId": "/wp/v2/global-styles/themes/{stylesheet}/variations_get"
      }
    },
    "/wp/v2/global-styles/themes/{stylesheet}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The theme identifier"
            }
          }
        ],
        "operationId": "/wp/v2/global-styles/themes/{stylesheet}_get"
      }
    },
    "/wp/v2/global-styles/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_global_styles"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a template",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a template"
            }
          }
        ],
        "operationId": "/wp/v2/global-styles/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_global_styles"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "type": "object",

                    "description": "Global styles."
                  },
                  "settings": {
                    "type": "object",

                    "description": "Global settings."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the global styles variation."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/global-styles/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_global_styles"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "type": "object",

                    "description": "Global styles."
                  },
                  "settings": {
                    "type": "object",

                    "description": "Global settings."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the global styles variation."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/global-styles/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp_global_styles"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "styles": {
                    "type": "object",

                    "description": "Global styles."
                  },
                  "settings": {
                    "type": "object",

                    "description": "Global settings."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the global styles variation."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/global-styles/{id}_patch"
      }
    },
    "/wp/v2/settings": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/settings_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Site title."
                  },
                  "description": {
                    "type": "string",
                    "description": "Site tagline."
                  },
                  "url": {
                    "type": "string",
                    "description": "Site URL."
                  },
                  "email": {
                    "type": "string",
                    "description": "This address is used for admin purposes, like new user notification."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "A city in the same timezone as you."
                  },
                  "date_format": {
                    "type": "string",
                    "description": "A date format for all date strings."
                  },
                  "time_format": {
                    "type": "string",
                    "description": "A time format for all time strings."
                  },
                  "start_of_week": {
                    "type": "integer",
                    "description": "A day number of the week that the week should start on."
                  },
                  "language": {
                    "type": "string",
                    "description": "WordPress locale code."
                  },
                  "use_smilies": {
                    "type": "boolean",
                    "description": "Convert emoticons like :-) and :-P to graphics on display."
                  },
                  "default_category": {
                    "type": "integer",
                    "description": "Default post category."
                  },
                  "default_post_format": {
                    "type": "string",
                    "description": "Default post format."
                  },
                  "posts_per_page": {
                    "type": "integer",
                    "description": "Blog pages show at most."
                  },
                  "show_on_front": {
                    "type": "string",
                    "description": "What to show on the front page"
                  },
                  "page_on_front": {
                    "type": "integer",
                    "description": "The ID of the page that should be displayed on the front page"
                  },
                  "page_for_posts": {
                    "type": "integer",
                    "description": "The ID of the page that should display the latest posts"
                  },
                  "default_ping_status": {
                    "type": "string",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
                  },
                  "default_comment_status": {
                    "type": "string",
                    "description": "Allow people to submit comments on new posts."
                  },
                  "site_logo": {
                    "type": "integer",
                    "description": "Site logo."
                  },
                  "site_icon": {
                    "type": "integer",
                    "description": "Site icon."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/settings_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Site title."
                  },
                  "description": {
                    "type": "string",
                    "description": "Site tagline."
                  },
                  "url": {
                    "type": "string",
                    "description": "Site URL."
                  },
                  "email": {
                    "type": "string",
                    "description": "This address is used for admin purposes, like new user notification."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "A city in the same timezone as you."
                  },
                  "date_format": {
                    "type": "string",
                    "description": "A date format for all date strings."
                  },
                  "time_format": {
                    "type": "string",
                    "description": "A time format for all time strings."
                  },
                  "start_of_week": {
                    "type": "integer",
                    "description": "A day number of the week that the week should start on."
                  },
                  "language": {
                    "type": "string",
                    "description": "WordPress locale code."
                  },
                  "use_smilies": {
                    "type": "boolean",
                    "description": "Convert emoticons like :-) and :-P to graphics on display."
                  },
                  "default_category": {
                    "type": "integer",
                    "description": "Default post category."
                  },
                  "default_post_format": {
                    "type": "string",
                    "description": "Default post format."
                  },
                  "posts_per_page": {
                    "type": "integer",
                    "description": "Blog pages show at most."
                  },
                  "show_on_front": {
                    "type": "string",
                    "description": "What to show on the front page"
                  },
                  "page_on_front": {
                    "type": "integer",
                    "description": "The ID of the page that should be displayed on the front page"
                  },
                  "page_for_posts": {
                    "type": "integer",
                    "description": "The ID of the page that should display the latest posts"
                  },
                  "default_ping_status": {
                    "type": "string",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
                  },
                  "default_comment_status": {
                    "type": "string",
                    "description": "Allow people to submit comments on new posts."
                  },
                  "site_logo": {
                    "type": "integer",
                    "description": "Site logo."
                  },
                  "site_icon": {
                    "type": "integer",
                    "description": "Site icon."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/settings_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Site title."
                  },
                  "description": {
                    "type": "string",
                    "description": "Site tagline."
                  },
                  "url": {
                    "type": "string",
                    "description": "Site URL."
                  },
                  "email": {
                    "type": "string",
                    "description": "This address is used for admin purposes, like new user notification."
                  },
                  "timezone": {
                    "type": "string",
                    "description": "A city in the same timezone as you."
                  },
                  "date_format": {
                    "type": "string",
                    "description": "A date format for all date strings."
                  },
                  "time_format": {
                    "type": "string",
                    "description": "A time format for all time strings."
                  },
                  "start_of_week": {
                    "type": "integer",
                    "description": "A day number of the week that the week should start on."
                  },
                  "language": {
                    "type": "string",
                    "description": "WordPress locale code."
                  },
                  "use_smilies": {
                    "type": "boolean",
                    "description": "Convert emoticons like :-) and :-P to graphics on display."
                  },
                  "default_category": {
                    "type": "integer",
                    "description": "Default post category."
                  },
                  "default_post_format": {
                    "type": "string",
                    "description": "Default post format."
                  },
                  "posts_per_page": {
                    "type": "integer",
                    "description": "Blog pages show at most."
                  },
                  "show_on_front": {
                    "type": "string",
                    "description": "What to show on the front page"
                  },
                  "page_on_front": {
                    "type": "integer",
                    "description": "The ID of the page that should be displayed on the front page"
                  },
                  "page_for_posts": {
                    "type": "integer",
                    "description": "The ID of the page that should display the latest posts"
                  },
                  "default_ping_status": {
                    "type": "string",
                    "description": "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
                  },
                  "default_comment_status": {
                    "type": "string",
                    "description": "Allow people to submit comments on new posts."
                  },
                  "site_logo": {
                    "type": "integer",
                    "description": "Site logo."
                  },
                  "site_icon": {
                    "type": "integer",
                    "description": "Site icon."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/settings_patch"
      }
    },
    "/wp/v2/themes": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/theme"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Limit result set to themes assigned one or more statuses.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive"
                ]
              },
              "description": "Limit result set to themes assigned one or more statuses."
            }
          }
        ],
        "operationId": "/wp/v2/themes_get"
      }
    },
    "/wp/v2/themes/{stylesheet}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/theme"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "stylesheet",
            "in": "path",
            "description": "The theme's stylesheet. This uniquely identifies the theme.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The theme's stylesheet. This uniquely identifies the theme."
            }
          }
        ],
        "operationId": "/wp/v2/themes/{stylesheet}_get"
      }
    },
    "/wp/v2/plugins": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Limits results to plugins with the given status.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "inactive",
                  "active"
                ]
              },
              "description": "Limits results to plugins with the given status."
            }
          }
        ],
        "operationId": "/wp/v2/plugins_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "slug": {
                    "type": "string",
                    "required": true,
                    "description": "WordPress.org plugin directory slug."
                  },
                  "status": {
                    "type": "string",
                    "description": "The plugin activation status."
                  }
                },
                "required": [
                  "slug"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/plugins_post"
      }
    },
    "/wp/v2/plugins/{plugin}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp/v2/plugins/{plugin}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "Scope under which the request is made; determines fields present in response."
                  },
                  "status": {
                    "type": "string",
                    "description": "The plugin activation status."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/plugins/{plugin}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "Scope under which the request is made; determines fields present in response."
                  },
                  "status": {
                    "type": "string",
                    "description": "The plugin activation status."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/plugins/{plugin}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "Scope under which the request is made; determines fields present in response."
                  },
                  "status": {
                    "type": "string",
                    "description": "The plugin activation status."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/plugins/{plugin}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugin"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "context": {
                    "type": "string",
                    "description": "Scope under which the request is made; determines fields present in response."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/plugins/{plugin}_delete"
      }
    },
    "/wp/v2/sidebars": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sidebar"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/sidebars_get"
      }
    },
    "/wp/v2/sidebars/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sidebar"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of a registered sidebar",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of a registered sidebar"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/sidebars/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sidebar"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Nested widgets."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/sidebars/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sidebar"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Nested widgets."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/sidebars/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sidebar"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "widgets": {
                    "type": "array",
                    "items":{"type":"string"},
                    "description": "Nested widgets."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/sidebars/{id}_patch"
      }
    },
    "/wp/v2/widget-types": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget-type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/widget-types_get"
      }
    },
    "/wp/v2/widget-types/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget-type"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The widget type id."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/widget-types/{id}_get"
      }
    },
    "/wp/v2/widget-types/{id}/encode": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The widget type id."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "object",
                    "description": "Current instance settings of the widget."
                  },
                  "form_data": {
                    "type": "string",
                    "description": "Serialized widget form data to encode into instance settings."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widget-types/{id}/encode_post"
      }
    },
    "/wp/v2/widget-types/{id}/render": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The widget type id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The widget type id."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "object",
                    "description": "Current instance settings of the widget."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widget-types/{id}/render_post"
      }
    },
    "/wp/v2/widgets": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "sidebar",
            "in": "query",
            "description": "The sidebar to return widgets for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The sidebar to return widgets for."
            }
          }
        ],
        "operationId": "/wp/v2/widgets_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the widget."
                  },
                  "id_base": {
                    "type": "string",
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
                  },
                  "sidebar": {
                    "type": "string",
                    "required": true,
                    "description": "The sidebar the widget belongs to."
                  },
                  "instance": {
                    "type": "object",
                    "description": "Instance settings of the widget, if supported."
                  },
                  "form_data": {
                    "type": "string",
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
                  }
                },
                "required": [
                  "sidebar"
                ]
              }
            }
          }
        },
        "operationId": "/wp/v2/widgets_post"
      }
    },
    "/wp/v2/widgets/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "operationId": "/wp/v2/widgets/{id}_get"
      },
      "post": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the widget."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "type": "string",
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
                  },
                  "sidebar": {
                    "type": "string",
                    "description": "The sidebar the widget belongs to."
                  },
                  "instance": {
                    "type": "object",
                    "description": "Instance settings of the widget, if supported."
                  },
                  "form_data": {
                    "type": "string",
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widgets/{id}_post"
      },
      "put": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the widget."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "type": "string",
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
                  },
                  "sidebar": {
                    "type": "string",
                    "description": "The sidebar the widget belongs to."
                  },
                  "instance": {
                    "type": "object",
                    "description": "Instance settings of the widget, if supported."
                  },
                  "form_data": {
                    "type": "string",
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widgets/{id}_put"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the widget.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the widget."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_base": {
                    "type": "string",
                    "description": "The type of the widget. Corresponds to ID in widget-types endpoint."
                  },
                  "sidebar": {
                    "type": "string",
                    "description": "The sidebar the widget belongs to."
                  },
                  "instance": {
                    "type": "object",
                    "description": "Instance settings of the widget, if supported."
                  },
                  "form_data": {
                    "type": "string",
                    "description": "URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widgets/{id}_patch"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/widget"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Whether to force removal of the widget, or move it to the inactive sidebar."
                  }
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/widgets/{id}_delete"
      }
    },
    "/wp/v2/block-directory/search": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-directory-item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Limit result set to blocks matching the search term.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Limit result set to blocks matching the search term."
            }
          }
        ],
        "operationId": "/wp/v2/block-directory/search_get"
      }
    },
    "/wp/v2/pattern-directory/patterns": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pattern-directory-item"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of the collection.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Current page of the collection."
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Maximum number of items to be returned in result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of items to be returned in result set."
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to those matching a string.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Limit results to those matching a string."
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Limit results to those matching a category ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit results to those matching a category ID."
            }
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Limit results to those matching a keyword ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit results to those matching a keyword ID."
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Limit results to those matching a pattern (slug).",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
              	"type": "string"
              },
              "description": "Limit results to those matching a pattern (slug)."
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset the result set by a specific number of items.",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Offset the result set by a specific number of items."
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order sort attribute ascending or descending.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order sort attribute ascending or descending.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Sort collection by post attribute.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort collection by post attribute.",
              "enum": [
                "author",
                "date",
                "id",
                "include",
                "modified",
                "parent",
                "relevance",
                "slug",
                "include_slugs",
                "title",
                "favorite_count"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/pattern-directory/patterns_get"
      }
    },
    "/wp/v2/block-patterns/patterns": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-pattern"
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/block-patterns/patterns_get"
      }
    },
    "/wp/v2/block-patterns/categories": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block-pattern-category"
                }
              }
            }
          }
        },
        "operationId": "/wp/v2/block-patterns/categories_get"
      }
    },
    "/wp/v2/menu-locations": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/menu-location"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/menu-locations_get"
      }
    },
    "/wp/v2/menu-locations/{location}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/menu-location"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "description": "An alphanumeric identifier for the menu location.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An alphanumeric identifier for the menu location."
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "Scope under which the request is made; determines fields present in response.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Scope under which the request is made; determines fields present in response.",
              "enum": [
                "view",
                "embed",
                "edit"
              ]
            }
          }
        ],
        "operationId": "/wp/v2/menu-locations/{location}_get"
      }
    },
    "/wp-site-health/v1": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp-site-health/v1_get"
      }
    },
    "/wp-site-health/v1/tests/background-updates": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        },
        "operationId": "/wp-site-health/v1/tests/background-updates_get"
      }
    },
    "/wp-site-health/v1/tests/loopback-requests": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        },
        "operationId": "/wp-site-health/v1/tests/loopback-requests_get"
      }
    },
    "/wp-site-health/v1/tests/https-status": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        },
        "operationId": "/wp-site-health/v1/tests/https-status_get"
      }
    },
    "/wp-site-health/v1/tests/dotorg-communication": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        },
        "operationId": "/wp-site-health/v1/tests/dotorg-communication_get"
      }
    },
    "/wp-site-health/v1/tests/authorization-header": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wp-site-health-test"
                }
              }
            }
          }
        },
        "operationId": "/wp-site-health/v1/tests/authorization-header_get"
      }
    },
    "/wp-site-health/v1/directory-sizes": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "/wp-site-health/v1/directory-sizes_get"
      }
    },
    "/wp-site-health/v1/tests/page-cache": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "/wp-site-health/v1/tests/page-cache_get"
      }
    },
    "/wp-block-editor/v1": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "context",
            "in": "query",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "/wp-block-editor/v1_get"
      }
    },
    "/wp-block-editor/v1/url-details": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL to process.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "description": "The URL to process."
            }
          }
        ],
        "operationId": "/wp-block-editor/v1/url-details_get"
      }
    },
    "/wp-block-editor/v1/export": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "/wp-block-editor/v1/export_get"
      }
    }
  }
}
